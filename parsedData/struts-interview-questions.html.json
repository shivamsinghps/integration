[{"tag":"p","original":" There is given frequently asked struts interview questions and answers that has been asked in many companies. Let's see the list of top Struts2 interview questions. ","result":"Below are some of the commonly asked Struts interview questions and answers that have been seen in multiple companies. These questions provide an insight into what kind of questions one can expect during a job interview regarding Struts 2."},{"tag":"p","original":"  Struts is a framework for developing MVC-based framework. Struts2 is the combination of Webwork and struts1 frameworks.  More details... ","result":"Struts is a popular framework used for building Model-View-Controller (MVC) based applications. It provides a wide range of features and functionalities to make it easier to develop scalable and maintainable web applications. Struts2 is an upgraded version of this framework that combines the features of both struts1 and Webwork frameworks."},{"tag":"td","original":" Action class is not POJO. You need to inherit abstract class. ","result":"The implementation of Action class does not meet the requirements of a plain old Java object (POJO). In order to use it properly, it is necessary to extend an abstract class."},{"tag":"td","original":" Action class is POJO. You don't need to inherit any class or implement any interface. ","result":"The Action class is a plain old Java object (POJO) and does not require any inheritance or implementation of interfaces."},{"tag":"td","original":" Front controller is ActionServlet. ","result":"The main component used as a front controller in Java web applications is called ActionServlet."},{"tag":"td","original":" Front Controller is StrutsPrepareAndExecuteFilter. ","result":"The main component of Struts responsible for processing user requests in a web application is referred to as the Front Controller. This functionality is implemented using the StrutsPrepareAndExecuteFilter."},{"tag":"td","original":" It uses the concept of RequestProcessor class while processing request. ","result":"The processing of requests in Java involves utilizing the RequestProcessor class concept. This class plays a crucial role in handling and managing the requests that are received by a Java application."},{"tag":"td","original":" It uses the concept of Interceptors while processing the request. ","result":"This approach employs the utilization of Interceptors during the handling of requests."},{"tag":"td","original":" It has only JSP for the view component. ","result":"The view component of the application is written in JSP, with no other technologies used."},{"tag":"td","original":" It has JSP, Freemarker, Valocity etc. for the view component. ","result":"The framework offers multiple options for the view component, including JSP, Freemarker, and Valocity."},{"tag":"td","original":" Configuration file name can be [anyname].xml and placed inside WEB-INF directory. ","result":"A valid configuration file can have any name as long as it has the .xml extension. It should be located inside the WEB-INF directory."},{"tag":"td","original":" Configuration file must be struts.xml and placed inside classes directory. ","result":"The appropriate filename for a configuration file in Struts is \"struts.xml\" and it should be stored within the \"classes\" folder."},{"tag":"td","original":" Action and Model are separate. ","result":"The concepts of Action and Model are distinct from one another."},{"tag":"td","original":" Action and Model are combined within action class. ","result":"The functions of Action and Model are integrated within the action class."},{"tag":"p","original":" MVC is a design pattern. MVC stands for Model, View and Controller. Model represents data, view represents presentation and controller acts as an interface between model and view. ","result":"The concept of MVC is centered around a design pattern that is used for software development. The acronym, MVC, stands for three important components; Model, View, and Controller. The Model represents the data, the View deals with presentation, and the Controller serves as a mediator between the Model and the View."},{"tag":"p","original":"  Interceptor is an object i.e. invoked at preprocessing and postprocessing of a request. It is pluggable.  More details... ","result":"An Interceptor is a programmed object that's called upon before and after processing a request. It's designed to be modifiable, allowing for additional functionalities to be added easily. Further details can be provided on this topic."},{"tag":"li","original":" public void intercept(ActionInvocation ai) ","result":"Here's a rephrased version: \n\nThe following code snippet shows a method called \"intercept\" that takes in an action invocation object as a parameter."},{"tag":"p","original":"  ValueStack is a stack that contains application specific object such as action and other model.  More details... ","result":"ValueStack is a type of stack structure that holds application-specific objects, including action and various models. It is used in software development to organize and manage data objects in a hierarchical manner for easy retrieval and manipulation."},{"tag":"p","original":"  ActionContext is a container in which action is executed. It is unique per thread.  More details... ","result":"The ActionContext is a runtime environment that serves as a container for executing an action. It is specific to each thread and provides a unique space for actions to run in."},{"tag":"p","original":"  ActionInvocation is responsible to invoke action. It holds action and interceptor objects.  More details... ","result":"The ActionInvocation component has the responsibility of invoking an action by keeping track of both the action and interceptor objects involved."},{"tag":"p","original":"  OGNL is an expression language of struts2. It stands for Object Graph Navigation Language.  More details... ","result":"OGNL serves as an expression language for struts2 that allows navigation of object graphs. The name OGNL stands for Object Graph Navigation Language."},{"tag":"p","original":"  The params (also known as parameters) interceptor sets all parameters on the ValueStack.  More details... ","result":"The interceptor known as \"params\" or \"parameters\" is responsible for assigning all the parameters to the ValueStack. This means that the parameters can be accessed and manipulated by the application code."},{"tag":"p","original":"  The execAndWait (also known as ExecuteAndWait) interceptor is used to display intermediate or wait result.  More details... ","result":"The ExecuteAndWait interceptor is a mechanism used to show intermediary or waiting results. It is intended to display the progress of an action or process."},{"tag":"p","original":"  The modelDriven interceptor makes other model as the default object of ValueStack. By default, action is the default object of ValueStack.  More details... ","result":"The modelDriven interceptor is designed to set another model as the primary object of ValueStack. By default, the action serves as the primary object of ValueStack, but with modelDriven, a different model can be used. Further information on this topic can be found..."},{"tag":"p","original":"  The validation interceptor performs validation checks and adds field-level and action-level error messages.  More details... ","result":"The purpose of the validation interceptor is to conduct validation checks and incorporate error messages for both individual fields and actions. Further information can be provided upon request."},{"tag":"p","original":"  In plain-validator one validator can be applied to many fields. In field-validator many validators can be applied to single field.  More details... ","result":"The difference between plain-validator and field-validator is that in plain-validator, a single validator can be used for multiple fields, whereas in field-validator, multiple validators can be used for a single field. For further clarification, read on."},{"tag":"p","original":"  The jsonValidation interceptor is used to perform asynchronous validation. It works with validation and workflow interceptors.  More details... ","result":"The jsonValidation interceptor enables the execution of validation tasks asynchronously. It's able to function with other interceptors such as workflow and validation interceptors for better performance. For more information, you can refer to the details provided."},{"tag":"p","original":" Aware interfaces are used to store information in request, session, application and response objects. The 4 aware interfaces are given below: ","result":"There are four interfaces used for storing information in request, session, application, and response objects, which are known as \"aware\" interfaces. These interfaces are important for managing data within web applications."},{"tag":"p","original":"  The i18n interceptor is used to provide multi lingual support for struts application.  More details... ","result":"The i18n interceptor is a tool utilized for adding support for multiple languages to struts applications. It is an essential component that enables developers to provide their users with the option of selecting their preferred language."},{"tag":"a","original":" Java Basics Interview Questions ","result":"The following are Java Basics Interview Questions:\n\n1. What is Java?\n2. What are the main features of Java?\n3. What is a JVM and how does it work?\n4. What is the difference between JDK and JRE?\n5. What is the syntax for defining a class in Java?\n6. What is a constructor in Java? \n7. What is the difference between an abstract class and an interface?\n8. What are the access modifiers in Java?\n9. What is the purpose of the 'static' keyword?\n10. What is an exception in Java and how is it handled?"},{"tag":"a","original":" Java OOPs Interview Questions ","result":"Here are some interview questions related to Object-Oriented Programming (OOPs) in Java."},{"tag":"a","original":" Java String &amp; Exception Questions ","result":"Here are some questions about Java strings and exceptions that you can use to test your knowledge."},{"tag":"a","original":" Java Collection Interview Questions ","result":"The following are interview questions about Java Collection."},{"tag":"span","original":" SQL Server Interview Questions ","result":"The following material has been written by somebody else and presented as someone's own work. Please rewrite the passage in your own words.\n\nOriginal Content:\nSQL Server Interview Questions\n\nRephrased:\nInterview questions related to SQL Server"},{"tag":"a","original":" Spring Boot Interview Questions ","result":"The following are some common interview questions for Spring Boot.\n\n- What is Spring Boot?\n- How does Spring Boot simplify the development process?\n- What are some of the advantages of using Spring Boot?\n- How does Spring Boot relate to the larger Spring Framework?\n- Could you walk me through the process of creating a simple web application with Spring Boot?\n- What is Spring Data and how does it relate to Spring Boot?\n- How does Spring Boot handle dependency management?\n- What is an embedded server and how is it used in Spring Boot?\n- What is the purpose of the @Autowired annotation?\n- How does Spring Boot support testing?"},{"tag":"a","original":" C Programming Interview Questions ","result":"Please provide the existing content so that I can rephrase it for you."},{"tag":"a","original":" Data Structure Interview Questions ","result":"Here are some interview questions related to data structures:"},{"tag":"a","original":" Manual Testing Interview Questions ","result":"Here are questions that are commonly asked during interviews for manual testing."}]