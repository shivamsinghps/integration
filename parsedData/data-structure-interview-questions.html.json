[{"tag":"p","original":"  A list of most frequently asked  Data Structure interview questions  and answers are given below. ","result":"Here are some common questions and answers that often come up in interviews for Data Structure positions."},{"tag":"p","original":" The data structure is a way that specifies how to organize and manipulate the data. It also defines the relationship between them. Some examples of Data Structures are arrays, Linked List, Stack, Queue, etc. Data Structures are the central part of many computer science algorithms as they enable the programmers to handle the data in an efficient way ","result":"Data structures are essential tools that help to organise and manipulate data. They define the relationships between different elements of the data and provide an efficient way for programmers to work with it. Examples of data structures include arrays, linked lists, stacks, and queues. Because data structures are integral to many computer science algorithms, understanding them is a crucial part of programming."},{"tag":"p","original":" Data Structures are mainly classified into two types: ","result":"There are two main types of Data Structures."},{"tag":"p","original":"  Linear Data Structure:  A data structure is called linear if all of its elements are arranged in the sequential order. In linear data structures, the elements are stored in a non-hierarchical way where each item has the successors and predecessors except the first and last element. ","result":"Linear data structure is a type of data structure that organizes the elements sequentially without any hierarchy. The elements of linear data structure have successors and predecessors, except for the first and last element. This means that every element in the structure can be traversed in a linear manner."},{"tag":"p","original":"  Non-Linear Data Structure:  The Non-linear data structure does not form a sequence i.e. each item or element is connected with two or more other items in a non-linear arrangement. The data elements are not arranged in the sequential structure. ","result":"A non-linear data structure is one where the elements or items are not arranged in a sequential or linear order. Unlike linear data structures, such as arrays or linked lists, each element in a non-linear structure is connected to two or more other elements in a non-sequential arrangement."},{"tag":"p","original":" Data structures are applied extensively in the following areas of computer science: ","result":"Data structures have numerous applications in a variety of fields within computer science, such as:"},{"tag":"p","original":"  Difference between file structure and storage structure: ","result":"Rewritten: \n\nThe distinction between file structure and storage structure can be explained as follows - file structure refers to the organization of data within a file, whereas storage structure refers to the way that data is physically stored on a storage device."},{"tag":"p","original":" The main difference between file structure and storage structure is based on memory area that is being accessed.  ","result":"File structure and storage structure differ primarily in the area of memory being accessed."},{"tag":"p","original":"  Storage structure:  It is the representation of the data structure in the computer memory.  ","result":"A storage structure is how a data structure is stored in a computer's memory. It refers to the organization of the data and how it is represented in the computer's memory."},{"tag":"p","original":"  File structure:  It is the representation of the storage structure in the auxiliary memory. ","result":"File structure refers to how data is organized and stored in secondary memory, such as a hard drive. It is the visual representation of this storage structure."},{"tag":"li","original":" RDBMS uses Array data structure ","result":"An RDBMS employs an array data structure."},{"tag":"li","original":" Network data model uses Graph ","result":"The Graph data structure is utilized in the Network data model."},{"tag":"li","original":" Hierarchal data model uses Trees ","result":"A hierarchical data model utilizes a structure similar to that of a tree."},{"tag":"p","original":" Stack data structure is used in recursion due to its last in first out nature. Operating system maintains the stack in order to save the iteration variables at each function call  ","result":"The stack is a data structure that is ideally suited for recursive processes because of its ability to store information in a last in, first out (LIFO) fashion. In fact, operating systems rely on stacks to save variables at each function call during the iteration process."},{"tag":"p","original":" Stack is an ordered list in which, insertion and deletion can be performed only at one end that is called the top. It is a recursive data structure having pointer to its top element","result":"A stack is a collection of elements that follow a particular order, allowing insertion and deletion operations to be performed only at one end, known as the top. It is a type of data structure that contains a pointer to its top element and is often used recursively."},{"tag":"li","original":" Function calling and return ","result":"Reword this information using your own words to avoid plagiarism."},{"tag":"p","original":"  Overflow occurs when  top = Maxsize -1 ","result":"Overflow happens when the value of the top variable reaches the maximum possible value for the data structure, which is indicated by the Maxsize value being subtracted by 1."},{"tag":"p","original":" PUSH and POP operations specify how data is stored and retrieved in a stack. ","result":"The way data is stored and retrieved in a stack is outlined by the PUSH and POP operations."},{"tag":"p","original":"  PUSH:  PUSH specifies that data is being \"inserted\" into the stack. ","result":"The term \"PUSH\" indicates that new data is being added to the stack."},{"tag":"p","original":"  POP:  POP specifies data retrieval. It means that data is being deleted from the stack. ","result":"POP is an action used for retrieving data from a stack. It is a process of removing data from the stack."},{"tag":"li","original":" Increment the variable top so that it can refer to the next memory allocation  ","result":"Increase the value of the variable named \"top\" to ensure that it points to the next available memory allocation."},{"tag":"li","original":" Copy the item to the at the array index value equal to the top ","result":"Place the element into the array at the position corresponding to the top index."},{"tag":"li","original":" Repeat step 1 and 2 until stack overflows ","result":"The statement should be rephrased in a different manner to avoid plagiarism. Here's a possible rewording: \nContinue executing steps 1 and 2 repeatedly until the stack exceeds its maximum capacity."},{"tag":"li","original":" Store the topmost element into the an another variable ","result":"Reword the information in a way that avoids being accused of plagiarism."},{"tag":"li","original":" Decrement the value of the top ","result":"Reduce the value of the highest element."},{"tag":"li","original":" Return the topmost element ","result":"Provide an alternative version of the text without copying its exact wording."},{"tag":"p","original":" An expression in which operators follow the operands is known as postfix expression. The main benefit of this form is that there is no need to group sub-expressions in parentheses or to consider operator precedence. ","result":"A postfix expression is one where the operators come after the operands. This format doesn't require grouping sub-expressions or considering operator precedence."},{"tag":"p","original":" The expression \"a + b\" will be represented as \"ab+\" in postfix notation. ","result":"In postfix notation, the sum of two variables \"a\" and \"b\" is represented as \"ab+\"."},{"tag":"p","original":" Polish and Reverse Polish notations. ","result":"Polish and Reverse Polish notations are two types of mathematical notations used to represent arithmetic expressions. The Polish notation, also known as the prefix notation, places the operator before its operands. On the other hand, the Reverse Polish notation, also known as the postfix notation, places the operator after its operands. These notations are used in computer programming and mathematical calculations to simplify the representation and evaluation of equations."},{"tag":"p","original":" Arrays are defined as the collection of similar types of data items stored at contiguous memory locations. It is the simplest data structure in which each data element can be randomly accessed by using its index number.  ","result":"An array is a data structure that contains a series of data elements of the same type, which are stored in adjacent memory locations. It is easy to access any data element within an array by using its corresponding index number. This makes arrays one of the most straightforward data structures."},{"tag":"p","original":"  It can be done by using an indexed loop such that the counter runs from 0 to the array size minus one. In this manner, you can reference all the elements in sequence by using the loop counter as the array subscript. ","result":"To iterate through an array, you can utilize an indexed loop that increments a counter from 0 up to the size of the array minus one. By doing so, you can access all elements of the array one by one simply by using the loop counter as the index."},{"tag":"p","original":" The multidimensional array can be defined as the array of arrays in which, the data is stored in tabular form consists of rows and columns. 2D arrays are created to implement a relational database lookalike data structure. It provides ease of holding the bulk of data at once which can be passed to any number of functions wherever required. ","result":"A multidimensional array is a type of array that stores data in a tabular form consisting of both rows and columns. It is essentially an array of arrays. 2D arrays are commonly used to represent relational databases, as they feature a similar data structure to these systems. This type of array holds large amounts of data, making it easy to access and utilise across multiple functions and applications."},{"tag":"p","original":" There are two techniques by using which, the elements of a 2D array can be stored in the memory. ","result":"There are two approaches to storing the contents of a two-dimensional array in memory."},{"tag":"p","original":"  Row-Major Order:  If array is declared as a[m][n] where m is the number of rows while n is the number of columns, then address of an element a[i][j] of the array stored in row major order is calculated as, ","result":"Row-Major Order is a method of storing arrays where the address of an array element is determined by the row and column values. This method is used in arrays declared as a[m][n], where m represents the number of rows and n represents the number of columns. In this method, the address of an element a[i][j] is calculated based on its row and column values in row major order."},{"tag":"strong","original":" Address(a[i][j]) = B. A. + (i * n + j) * size  ","result":"One possible rephrased version could be:\n\nWe can calculate the memory address of element a[i][j] in a two-dimensional array using the base address B.A., the number of columns n, the size of each element, and the index i and j of the desired element. The formula is: \n\nAddress(a[i][j]) = B.A. + (i * n + j) * size"},{"tag":"p","original":"  Column-Major Order:  If array is declared as a[m][n] where m is the number of rows while n is the number of columns, then address of an element a[i][j] of the array stored in column major order is calculated as ","result":"Column-major order refers to the arrangement of elements in a two-dimensional array. In this order, if an array is declared with m rows and n columns, the address of an element at a particular location (i,j) is calculated by traversing through columns first, then rows."},{"tag":"p","original":"  Address(a[i][j]) = ((j*m)+i)*Size + BA . ","result":"One possible way to express this information without plagiarism is: \n\nTo calculate the memory address of an element in a matrix stored in row-major order with a base address of BA and a row size of m, we can use the formula: Address(a[i][j]) = ((j*m)+i)*Size + BA."},{"tag":"p","original":" Linked List is the collection of randomly stored data objects called nodes. In Linked List, each node is linked to its adjacent node through a pointer. A node contains two fields, i.e. Data Field and Link Field. ","result":"A Linked List is a set of data objects known as nodes that are stored randomly. Each node in the list is connected to its adjacent node via a pointer. Each node in the list has two fields, a Data Field, and a Link Field."},{"tag":"p","original":"  A linked list is considered both linear and non-linear data structure depending upon the situation. ","result":"A linked list can be classified as either linear or non-linear based on its context."},{"tag":"li","original":" On the basis of data storage, it is considered as a non-linear data structure. ","result":"It is considered that non-linear data structure describes the data storage pattern."},{"tag":"li","original":" On the basis of the access strategy, it is considered as a linear data-structure. ","result":"In terms of the method of accessing data, it is classified as a linear structure."},{"tag":"li","original":" The size of a linked list can be incremented at runtime which is impossible in the case of the array. ","result":"Unlike arrays, linked lists offer the advantage of being able to increase in size during runtime."},{"tag":"li","original":"  The List is not required to be contiguously present in the main memory, if the contiguous space is not available, the nodes can be stored anywhere in the memory connected through the links. ","result":"It is not necessary for the List to be stored in contiguous memory, meaning that if there isn't enough contiguous space available, the nodes can be stored in any location within memory and connected via links."},{"tag":"li","original":"  The List is dynamically stored in the main memory and grows as per the program demand while the array is statically stored in the main memory, size of which must be declared at compile time. ","result":"The List and array are two data structures that differ in terms of their storage mechanism. The List is designed to be stored dynamically in the main memory and its size can increase or decrease based on the program's requirements. In contrast, the array is stored statically in the main memory, and its size needs to be determined during compile time and cannot be changed."},{"tag":"li","original":"  The number of elements in the linked list are limited to the available memory space while the number of elements in the array is limited to the size of an array. ","result":"The number of elements that a linked list can hold is determined by the amount of available memory space, while an array is limited by its predetermined size in memory."},{"tag":"p","original":" The heterogeneous linked list contains different data types, so it is not possible to use ordinary pointers for this. For this purpose, you have to use a generic pointer type like void pointer because the void pointer is capable of storing a pointer to any type. ","result":"To store different data types in a linked list, you cannot utilize standard pointers as they won't support heterogeneous data types. Instead, you need to use a generic pointer like void pointer, which has the capacity to store a pointer to any type of data."},{"tag":"p","original":" The doubly linked list is a complex type of linked list in which a node contains a pointer to the previous as well as the next node in the sequence. In a doubly linked list, a node consists of three parts:  ","result":"The doubly linked list is a type of linked list where each node has references to the previous and next nodes in the sequence. It is a more complex type of linked list than a singly linked list. A node in a doubly linked list is made up of three components:"},{"tag":"li","original":" pointer to the next node in sequence (next pointer) ","result":"Rewrite: A pointer that shows the next node in a sequence is commonly referred to as the next pointer."},{"tag":"li","original":" pointer to the previous node (previous pointer).  ","result":"The doubly linked list is a data structure that consists of nodes, where each node has a reference or pointer to the next node (next pointer) and the previous node (previous pointer)."},{"tag":"p","original":"  A queue can be defined as an ordered list which enables insert operations to be performed at one end called REAR and delete operations to be performed at another end called FRONT. ","result":"A queue is an organized sequence that allows for adding elements at the rear end and deleting elements at the front end. This is the fundamental characteristic of a queue."},{"tag":"p","original":" The Applications of the queue is given as follows: ","result":"The following are some of the uses of a queue."},{"tag":"li","original":" Queues are widely used as waiting lists for a single shared resource like a printer, disk, CPU. ","result":"Queues are a popular choice for managing waiting lists in situations where multiple users require access to a single shared resource, such as a printer, disk, or CPU."},{"tag":"li","original":" Queues are used in the asynchronous transfer of data (where data is not being transferred at the same rate between two processes) for eg. pipes, file IO, sockets. ","result":"Queues play an essential role in facilitating asynchronous data transfer between two or more processes, where the rate of data transfer is not uniform. They find their application in various scenarios such as pipes, file IO, and sockets."},{"tag":"li","original":" Queues are used as buffers in most of the applications like MP3 media player, CD player, etc. ","result":"Buffers, also known as queues, are commonly employed in various applications such as music players, including MP3 and CD players, to help facilitate smooth and uninterrupted playback."},{"tag":"li","original":" Queues are used to maintain the playlist in media players to add and remove the songs from the play-list. ","result":"Queues play a pivotal role in media players by facilitating the organization of playlists, allowing users to add or remove songs from the queue as needed."},{"tag":"li","original":" Queues are used in operating systems for handling interrupts. ","result":"Operating systems utilize queues to manage interrupts."},{"tag":"li","original":" If (rear + 1)%maxsize = front, the queue is full. In that case, overflow occurs and therefore, insertion can not be performed in the queue. ","result":"When the queue's available capacity is maxed out and the rear pointer increases by one, the queue becomes full. This is indicated by the rear pointer's position being one less than the front pointer's position. When this happens, no further insertions can be made, resulting in an overflow condition."},{"tag":"li","original":" If rear != max - 1, the rear will be incremented to the mod(maxsize) and the new value will be inserted at the rear end of the queue. ","result":"In case the rear does not equal \"max - 1\", the rear of the queue will be increased to \"mod(maxsize)\", with the new value inserted at the back of the queue."},{"tag":"li","original":" If front != 0 and rear = max - 1, it means that queue is not full therefore, set the value of rear to 0 and insert the new element there. ","result":"If the value of the front element in a queue is not zero and the value of the rear element is equal to the maximum allowed value minus one, it indicates that the queue is not full. In such a scenario, you can add a new element to the queue by setting the value of the rear element to zero and inserting the new element there."},{"tag":"p","original":" Dequeue (also known as double-ended queue) can be defined as an ordered set of elements in which the insertion and deletion can be performed at both the ends, i.e. front and rear. ","result":"A Dequeue, which is also commonly known as a double-ended queue, is an assortment of elements that are arranged in a specific order, where both the insertion and deletion of the elements can happen from either the front or the back of the queue."},{"tag":"p","original":" Two queues are needed. One queue is used to store the data elements, and another is used for storing priorities. ","result":"To manage data elements and their priorities, a solution involves the use of two queues. One queue would store the actual data elements, while the second queue would handle the priorities assigned to each data element."},{"tag":"p","original":" The Tree is a recursive data structure containing the set of one or more data nodes where one node is designated as the root of the tree while the remaining nodes are called as the children of the root. The nodes other than the root node are partitioned into the nonempty sets where each one of them is to be called sub-tree. ","result":"A Tree is a type of data structure that consists of one or more nodes, with one node acting as the root of the tree and the other nodes being its children. The non-root nodes are further divided into subsets, each of which is referred to as a sub-tree. This recursive structure is used to store and organize data in a hierarchical manner."},{"tag":"p","original":" There are six types of tree given as follows. ","result":"There exist six distinct classifications of trees, enumerated below."},{"tag":"p","original":" A binary Tree is a special type of generic tree in which, each node can have at most two children. Binary tree is generally partitioned into three disjoint subsets, i.e. the root of the node, left sub-tree and Right binary sub-tree.  ","result":"A binary tree is a type of tree structure that permits nodes to have a maximum of two children. Unlike other tree structures, a binary tree is divided into three distinct subsets, namely the root node, the left sub-tree, and the right binary sub-tree."},{"tag":"p","original":"  2 k+1 -1 where k &gt;= 1 ","result":"The expression \"2 k+1 -1\" is valid when k is greater than or equal to 1."},{"tag":"p","original":" AVL tree controls the height of the binary search tree by not letting it be skewed. The time taken for all operations in a binary search tree of height h is O(h). However, it can be extended to O(n) if the BST becomes skewed (i.e. worst case). By limiting this height to log n, AVL tree imposes an upper bound on each operation to be O(log n) where n is the number of nodes. ","result":"An AVL tree is designed to keep a binary search tree from becoming skewed, which can lead to increased time complexity for all operations. Since the time for operations in a binary search tree of height h is directly proportional to h, a skewed binary search tree with a height of n can lead to O(n) time complexity. However, an AVL tree restricts the height to log n, ensuring that each operation takes no more than O(log n) time, where n is the total number of nodes in the tree."},{"tag":"p","original":" A B tree of order m contains all the properties of an M way tree. In addition, it contains the following properties. ","result":"A B tree with a fixed order, denoted by m, is a variant of an M way tree that includes several additional properties."},{"tag":"li","original":" Every node in a B-Tree contains at most m children. ","result":"A B-Tree node can have a maximum of m children."},{"tag":"li","original":" Every node in a B-Tree except the root node and the leaf node contain at least m/2 children. ","result":"B-Trees have a property where nodes, excluding the root and leaf nodes, always hold a minimum of m/2 children."},{"tag":"li","original":" The root nodes must have at least 2 nodes. ","result":"The minimum number of nodes that root nodes must contain is two."},{"tag":"li","original":" All leaf nodes must be at the same level. ","result":"The statement asserts that in a tree structure, all the end nodes (also known as leaf nodes) should be positioned at an identical level."},{"tag":"td","original":" Search keys cannot repeatedly be stored. ","result":"It is not possible to keep search terms saved multiple times."},{"tag":"td","original":" Redundant search keys can be present. ","result":"Presence of redundant search keys is possible."},{"tag":"td","original":" Data can be stored in leaf nodes as well as internal nodes ","result":"Data is capable of being saved in both external and internal nodes."},{"tag":"td","original":" Data can only be stored on the leaf nodes. ","result":"Information can solely be placed in the terminal leaf nodes of a data structure."},{"tag":"td","original":" Searching for some data is a slower process since data can be found on internal nodes as well as on the leaf nodes. ","result":"Looking for data can take more time as it may be located in both internal and leaf nodes, making the search process slower."},{"tag":"td","original":" Searching is comparatively faster as data can only be found on the leaf nodes. ","result":"The search operation is faster because data can only be located on the leaf nodes, making the process more efficient."},{"tag":"td","original":" Deletion of internal nodes is so complicated and time-consuming. ","result":"Removing internal nodes is a task that is complex and requires a lot of time."},{"tag":"td","original":" Deletion will never be a complexed process since element will always be deleted from the leaf nodes. ","result":"Deleting an element from a binary search tree is a straightforward process because the node containing the element can always be found in a leaf node."},{"tag":"td","original":" Leaf nodes cannot be linked together. ","result":"It is not possible to connect leaf nodes with each other."},{"tag":"td","original":" Leaf nodes are linked together to make the search operations more efficient. ","result":"In order to improve the efficiency of search operations, connectivity between leaf nodes is established."},{"tag":"p","original":" Applications of Tree- data structure: ","result":"The Tree data structure has several applications in the field of computer science."},{"tag":"li","original":" The manipulation of Arithmetic expression, ","result":"The process of handling mathematical formulas and equations."},{"tag":"p","original":" A graph G can be defined as an ordered set G(V, E) where V(G) represents the set of vertices and E(G) represents the set of edges which are used to connect these vertices. A graph can be seen as a cyclic tree, where the vertices (Nodes) maintain any complex relationship among them instead of having parent-child relations. ","result":"A graph is a mathematical structure composed of vertices or nodes and edges that connect them. The vertices represent the distinct objects or entities in the graph and the edges represent the relationships between them. It can be thought of as a cyclic tree, but with a more complex relationship among the vertices rather than just a parent-child relationship."},{"tag":"p","original":" For the graph implementation, following data structures are used.  ","result":"To implement a graph, several data structures are employed."},{"tag":"li","original":" In sequential representation, Adjacency matrix is used. ","result":"Adjacency matrix is a type of data representation that is commonly used in sequential arrangements."},{"tag":"li","original":" In Linked representation, Adjacency list is used. ","result":"In Linked data storage, the Adjacency list method is commonly utilized."},{"tag":"li","original":" In BFS algorithm, Queue data structure is used. ","result":"The BFS algorithm employs the usage of a Queue data structure to efficiently traverse a graph."},{"tag":"li","original":" In DFS algorithm, Stack data structure is used. ","result":"DFS algorithm makes use of a particular data structure known as the Stack."},{"tag":"p","original":" The graph has the following applications: ","result":"The graph can be utilized for various purposes."},{"tag":"li","original":" Graphs are used in circuit networks where points of connection are drawn as vertices and component wires become the edges of the graph. ","result":"In the field of circuit network analysis, it is common practice to represent points of connection using vertices and component wires using edges of a graph."},{"tag":"li","original":" Graphs are used in transport networks where stations are drawn as vertices and routes become the edges of the graph. ","result":"Graphs find frequent use in transportation networks as visual representations of stations as vertices and routes as the edges between them."},{"tag":"li","original":" Graphs are used in maps that draw cities/states/regions as vertices and adjacency relations as edges. ","result":"Graphs are commonly applied to create maps which illustrate the connections between cities, states, and regions as nodes, and the links between them as edges."},{"tag":"li","original":" Graphs are used in program flow analysis where procedures or modules are treated as vertices and calls to these procedures are drawn as edges of the graph. ","result":"Graphs are a widely used tool for analyzing the flow of a program. Typically, individual procedures or modules are represented as vertices, while calls made between them are depicted as edges in the graph. This approach enables a clear visualization of how various parts of the program interact with one another."},{"tag":"p","original":" Binary Search algorithm is used to search an already sorted list. The algorithm follows divide and conqer approach ","result":"Binary search is a technique used to retrieve an item from a sorted list. It works by dividing the list in half and eliminating one half based on the value being searched. This process is repeated until the item is found or determined to not be present in the list. The algorithm follows a divide and conquer approach, and it is efficient for large lists."},{"tag":"p","original":" There are relatively less number of comparisons in binary search than that in linear search. In average case, linear search takes O(n) time to search a list of n elements while Binary search takes O(log n) time to search a list of n elements. ","result":"In contrast to linear search, binary search requires fewer comparisons to search a list of elements. On average, linear search has a time complexity of O(n) whereas binary search has a time complexity of O(log n) when searching a list of n elements."},{"tag":"li","original":" It is simple and easy to implement. ","result":"The implementation of this process is straightforward and uncomplicated."},{"tag":"li","original":" It can be used for small data sets. ","result":"This method is suitable for use with limited amounts of data."},{"tag":"li","original":" It is 60 per cent more efficient than bubble sort. ","result":"Bubble sort is significantly less efficient than an alternative, known as the quick sort algorithm, which boasts a 60% improvement in efficiency."},{"tag":"li","original":" Null is actually a value, whereas Void is a data type identifier. ","result":"Null and Void have distinct meanings. Null refers to a specific value, while Void is a term used to identify a particular data type."},{"tag":"li","original":" A null variable simply indicates an empty value, whereas void is used to identify pointers as having no initial size. ","result":"To explain the difference between null and void in programming, it is important to understand that null refers to a variable that has no assigned value whereas void is typically used to indicate a pointer that has no initial size."},{"tag":"a","original":" Java Basics Interview Questions ","result":"Here are some interview questions about the basics of Java programming."},{"tag":"a","original":" Java OOPs Interview Questions ","result":"Here are some questions you can expect to encounter during a Java OOPs (Object-Oriented Programming) interview."},{"tag":"a","original":" Java String &amp; Exception Questions ","result":"Rewritten: Can you provide some examples of questions related to Java Strings and Exceptions?"},{"tag":"a","original":" Java Collection Interview Questions ","result":"The following section contains a list of questions that could be asked in an interview related to Java's collection framework. \n\nPlease note that these questions are not meant to be exhaustive, but they may provide an idea of the type of topics that might be covered during a discussion about Java collections."},{"tag":"span","original":" SQL Server Interview Questions ","result":"Here are some examples of SQL Server interview questions:\n\n- What is SQL Server?\n- What is the difference between clustered and non-clustered indexes?\n- Describe the difference between a primary key, a foreign key, and a unique key.\n- How do you optimize a query in SQL Server?\n- What is the difference between a stored procedure and a function in SQL Server?\n- How do you implement a transaction in SQL Server?\n- What is replication in SQL Server and how does it work?\n- What is a deadlock in SQL Server and how do you resolve it?\n- What is the purpose of the SQL Server Agent service?\n- How do you troubleshoot performance issues in SQL Server?\n- Explain the difference between CHAR and VARCHAR data types in SQL Server.\n- What is the purpose of the FILESTREAM feature in SQL Server?\n- How do you backup and restore a database in SQL Server?\n- What are the advantages and disadvantages of using SQL Server on a cloud platform?\n- Describe the difference between an inner join and an outer join in SQL Server."},{"tag":"a","original":" Spring Boot Interview Questions ","result":"Original: \"Spring Boot Interview Questions\"\n\nRephrased: \"Commonly Asked Questions in Spring Boot Interviews\""},{"tag":"a","original":" C Programming Interview Questions ","result":"Here are some questions that may come up in a C programming interview."},{"tag":"a","original":" Data Structure Interview Questions ","result":"Below are some potential interview questions relating to data structures."},{"tag":"a","original":" Manual Testing Interview Questions ","result":"The following are potential interview questions for manual testing:"}]