[{"tag":"p","original":" Salesforce Lightning is a component-based framework developed by Salesforce.com to provide app development. It is designed to simplify business users who are not aware of this technology and typically do not have programming experience. ","result":"Salesforce Lightning is a framework that enables the development of applications using components. It was created by Salesforce.com with the aim of making app development more accessible to business users who lack programming knowledge."},{"tag":"p","original":" Salesforce Lightning consists of a set of tools and technologies behind an important upgrade to the Salesforce1 Platform (now known as App Cloud), the company's mobile app development platform. ","result":"Salesforce Lightning refers to a range of technologies and tools that power an essential upgrade to the App Cloud, which is Salesforce's mobile app development platform."},{"tag":"p","original":" Salesforce Lightning contains the following important components: ","result":"Salesforce Lightning comprises a range of significant elements that are essential to its functionality."},{"tag":"p","original":"  Experience:  It is a set of modern user interfaces optimized for speed. This includes the Lightning Experience, Salesforce1 Mobile App, and template-based communities. ","result":"The Experience is a collection of contemporary interfaces designed to deliver fast and efficient user experiences. Its components encompass the Lightning Experience, Salesforce1 Mobile App, and pre-built communities."},{"tag":"p","original":"  Lightning Component Framework:  This is a JavaScript framework and set of standard components that facilitate us to build reusable components to customize the Lightning Experience, Salesforce1 Mobile App, and template-based communities and build your standalone apps. ","result":"The Lightning Component Framework is a JavaScript framework used to create customizable components for different applications such as the Lightning Experience, Salesforce1 Mobile App, and template-based communities. It allows the creation of reusable components and standalone apps."},{"tag":"p","original":"  Lightning Exchange:  It specifies a section of the AppExchange where we can find 70+ partner components to start our development.  ","result":"The Lightning Exchange is a dedicated area within AppExchange that offers access to over 70 partner components that can be used to jumpstart development projects."},{"tag":"p","original":"  Lightning Design System:  It specifies the best practices and style guides and modern enterprise UX best practices to build pixel-perfect apps that match the look and feel of the Lightning Experience and Salesforce1 Mobile app. ","result":"The Lightning Design System is a set of guidelines and templates that details the top recommendations and style guides for creating enterprise-level user experiences. It ensures that applications built using this system have a consistent and modern look-and-feel that is similar to Salesforce1 and the Lightning Experience."},{"tag":"p","original":"  Visual Building Tools:  It specifies the drag-and-drop technologies for fast and easy app building &amp; customizations. We can use the Lightning App Builder to customize the Lightning Experience and Salesforce1 Mobile app. We can also use the Community Builder to customize template-based communities. ","result":"The Lightning App Builder and Community Builder are two visual building tools used for creating and customizing applications in Salesforce. These tools utilize drag-and-drop technology, which makes it easy to build and customize apps to meet specific requirements. The Lightning App Builder is used to customize the Lightning Experience and Salesforce1 Mobile app, while the Community Builder is used to customize template-based communities. With the help of these tools, users can effortlessly create and modify applications to enhance their functionality and user experience."},{"tag":"p","original":" We can develop the Salesforce Lightning components by using the following two programming models: ","result":"There are two programming models that can be utilized to build Salesforce Lightning components."},{"tag":"li","original":" Native Aura Components model ","result":"The Native Aura Components framework provides a model for creating Aura Components that are optimized for use on native platforms such as iOS and Android. It enables developers to build high-performance, native mobile apps with the same ease and flexibility as web-based Aura Components. This model is designed to streamline the development process and deliver a seamless user experience across different devices and platforms."},{"tag":"li","original":" Lightning web components model ","result":"The Lightning web components framework is a model used to develop reusable, efficient web components that can be integrated into Salesforce. It provides a standardized structure for creating components, making it easier for developers to collaborate and build applications that meet the needs of Salesforce users. With Lightning web components, developers can create and deploy powerful, intuitive apps that are fast and responsive, enhancing the user experience and driving business results."},{"tag":"p","original":" No, Salesforce Lightning is not an MVC framework. Instead, it is a component-based framework. ","result":"Sure, here's a rephrased version: \n\nSalesforce Lightning is not classified as an MVC framework; instead, it is a framework based on components."},{"tag":"p","original":" Lightning experience is the latest Salesforce desktop application, which has the latest features. Lightning experience is developed with an advanced User Interface (UI) and provides a lightning-fast optimized speed. ","result":"The lightning experience is the newest Salesforce desktop application, offering cutting-edge functionality and features. This advanced user interface is optimized for speed and delivers lightning-fast performance."},{"tag":"p","original":" Following is the list of main tools included in Lightning: ","result":"The Lightning platform comprises several primary tools; here is a breakdown of what they are."},{"tag":"p","original":"  Lightning Component Framework:  The set of components and extensions facilitates us to build reusable components, customize the Salesforce1 Mobile App, and build standalone apps. ","result":"The Lightning Component Framework is a collection of customizable components and extensions that provide a way for developers to build reusable components, create customizations for the Salesforce1 Mobile App, and develop standalone applications."},{"tag":"p","original":"  Lightning App Builder:  It is a new UI tool that facilitates us to build extremely fast apps using components provided by Salesforce and platform developers. ","result":"The Lightning App Builder is a recently developed user interface tool that enables users to create applications quickly by utilizing components offered by Salesforce as well as platform developers. With this tool, building fast and efficient apps has become more accessible and convenient."},{"tag":"p","original":"  Lightning Process Builder:  This is a UI tool for visualizing and creating automated business processes. ","result":"The Lightning Process Builder is a graphical user interface tool that allows users to create and visualize automated business processes. It provides an intuitive way to map out workflows and automate tasks without the need for coding."},{"tag":"p","original":"  Lightning Schema Builder:  This is also a UI tool used for viewing and creating objects, fields, and relationships. ","result":"The Lightning Schema Builder is an interface tool that enables users to visualize and construct objects, fields, and relationships within the Salesforce platform. It provides a user-friendly and intuitive way to create, modify, and manage data structures without requiring extensive coding knowledge."},{"tag":"p","original":"  Lightning Connect:  This is an integration tool that makes the Force.com app easily consume data from any external source that conforms to the OData spec. ","result":"Lightning Connect is a useful integration tool that allows easy consumption of data from external sources that comply with the OData specification within the Force.com application."},{"tag":"p","original":" Aura is an open-source freeware technology that powers Lightning Components. The aura: namespace consists of all basic building blocks to define applications and components. ","result":"Aura is a technology that is freely available and open-source. It is responsible for powering Lightning Components. The aura: namespace incorporates all of the fundamental elements necessary to establish applications and components."},{"tag":"p","original":" The Aura application bundle consists of definitions and their associated resources. The aura definition can be defined as an application, interface, component, and event. The Aura definition bundle element is a folder consisting of definition files opposite the other metadata components. On the other hand, the aura definition bundle component is not a single file. Instead, it is a group of files. ","result":"The Aura software package comprises of several components and resources that are used to define the application functions. These components include the application, interface, component, and event. Each component is stored in a specific folder, with its respective definition files. Notably, unlike other metadata components, the aura definition bundle is not a single file, but a collection of several files."},{"tag":"p","original":" The Visualforce components are page-centric, and they complete most of the work on the server. On the other hand, Lightning Components are client-side centric, making them more dynamic and mobile-friendly. ","result":"The functionality of Visualforce components is primarily focused on pages and relies on server-side processing. In contrast, Lightning Components are designed to be more dynamic and mobile-responsive by being client-side centric."},{"tag":"p","original":" The Native Aura Components model and Lightning, web components model, can be coexisted in the following way: ","result":"One can achieve coexistence between the Lightning web components model and the Native Aura Components model by following certain guidelines."},{"tag":"li","original":" The Native Aura Components model can contain and utilize the Lightning web components model, including communicating via events and component methods. But, the opposite is not true. The Lightning web components model cannot be composed of Aura components, and they can only ever be its parent. ","result":"The Native Aura Components framework allows for integration with the Lightning web components framework, allowing for communication through events and component methods. However, it is not possible for the Lightning web components framework to incorporate Aura components and can only interface with them as their parent."},{"tag":"li","original":" The code can also be shared between the Aura Components model and Lightning web components model using an ES Module. ","result":"One way to share code between the Aura Components model and the Lightning Web Components model is through the use of an ES Module."},{"tag":"p","original":" Following are the main three different types of events of Salesforce lightning components: ","result":"The following are the primary categories of events that Salesforce lightning components can fall into:"},{"tag":"p","original":" Following is the list of the different component bundles of the lightning components: ","result":"Here are the different bundles in which components for lightning are available:"},{"tag":"p","original":" Following are the main usages of Lightning Data Service: ","result":"Lightning Data Service has several key applications, such as providing real-time data updates, simplifying the development process, and improving overall performance for Lightning components."},{"tag":"li","original":" Lightning Data Service is used for creating, deleting, editing, and loading a record in our component without Apex code. ","result":"Lightning Data Service allows us to carry out record creation, deletion, editing, and loading within our component without having to use Apex code."},{"tag":"li","original":" It is used to handle field-level security and sharing rules. ","result":"In Salesforce, there is a feature that is utilized for managing security at the field level and implementing sharing rules."},{"tag":"li","original":" It is used to enhance the user interface and performance consistency. ","result":"The purpose of UI consistency is to improve the user experience and maintain a consistent level of performance."},{"tag":"li","original":" The biggest advantage of using Lightning Data Service is that it facilitates us to carry out basic tasks without Apex code. ","result":"Lightning Data Service offers a major advantage by providing a simpler method to carry out essential tasks that does not require Apex code."},{"tag":"p","original":" The Lightning Design System provides style guides and modern enterprise UX best practices to build pixel-perfect apps that look great and provide a look and feel of the Lightning Experience and Salesforce1 Mobile app. ","result":"The Lightning Design System offers guidelines and contemporary UX strategies for developing flawless applications with a consistent look and feel, mirroring the Lightning Experience and Salesforce1 Mobile application. Its purpose is to facilitate the creation of pixel-perfect apps that possess a professional appearance and provide an optimal user experience."},{"tag":"p","original":" Following are the different types of events used in the Salesforce Lightning component: ","result":"The Salesforce Lightning component utilizes various forms of events, which include:"},{"tag":"p","original":"  Application Event:  The scope of the application event is throughout the lightning App. It sends a notification if any component is registered for this event. ","result":"The Application Event is a notification mechanism that works across all components within a Lightning App. If any component has registered for this event, it will receive the notification."},{"tag":"p","original":"  Component Event:  The scope of this event is within itself or the parent component of this event. It sends a notification for all the components declared within the parent component. ","result":"This event pertains to the component itself or its parent component, and only sends notifications to other components declared within the same parent component."},{"tag":"p","original":"  System Event:  This type of event is fired by Salesforce's system during the lifecycle of the lightning app. ","result":"A System Event is an event triggered by Salesforce's system as part of the lightning app's lifecycle."},{"tag":"p","original":" An aura definition bundle is a specific type of bundle that contains an Aura definition and its related resources. This may be a component, application, event, interface, or a tokens collection. The AuraDefinitionBundle component is a folder that contains definition files. This is not a single file like most other metadata components. Instead, it is a collection of files. Each file represents a resource in a bundle, such as a markup, applications, code files (including controllers and helpers), events, documentation, and interfaces. ","result":"An Aura definition bundle is a bundle that includes an Aura definition and its corresponding resources, such as components, applications, events, interfaces, or collections of tokens. It is represented by the AuraDefinitionBundle component, which is actually a folder containing several definition files that define the resources within the bundle. Each file represents a specific resource, such as code files, markup, documentation, events, and helpers. Unlike most metadata components, the AuraDefinitionBundle is not a single file, but a collection of files that define the resources in the bundle."},{"tag":"p","original":" An aura definition bundle does not have a suffix. The definition files can have one of the following suffixes: ","result":"The contents should be rewritten to avoid plagiarism. Here's a possible rephrased version:\n\nAura definition bundles do not have specific file extensions, but their definition files can be saved with various suffixes. Some of the common suffixes used for aura definition files are:"},{"tag":"td","original":" Controller, Helper, or Renderer ","result":"Reword the following text to avoid plagiarism:\n\n\"The three main components of the Model-View-Controller (MVC) architecture are the Controller, Helper, and Renderer.\""},{"tag":"p","original":" Lightning out is a process that is used when we want to use our component on the external site. The biggest advantage of lightning out is utilizing lightning components in a visual force page. ","result":"Lightning out is a technique that enables the use of Lightning components on external websites. It offers the benefit of incorporating lightning components in a visual force page, allowing for enhanced functionality and design."},{"tag":"p","original":" Following is the list of key differences between Component Event and Application Event: ","result":"The following outlines the primary distinctions between Component Event and Application Event:"},{"tag":"td","original":" Component events are used for communication between child and parent. ","result":"Interactions between child and parent components are facilitated by component events."},{"tag":"td","original":" Application events are used to communicate any changes in the component to a broader audience. ","result":"Application events serve as a means of broadcasting any updates in a component to a wider audience."},{"tag":"td","original":" Component events use bubbling and capture same as used in DOM events. If you make any changes in a child component, it will be communicated to the parent component via component event. ","result":"Component events work in a similar fashion to DOM events, where they utilize the concepts of bubbling and capturing. Whenever a change is triggered within a child component, it is then relayed to the parent component through the component event system."},{"tag":"td","original":" If a component is registered for this event in application events, it will get notified. ","result":"When an event occurs within an application, any components that have been registered for that particular event will receive a notification. This is a common practice in software development, where different parts of an application need to communicate with each other. By registering for events, components can be designed to respond to specific actions or behaviors within the system. This helps ensure that the application is more modular and scalable, as different parts can be added, removed, or modified without impacting the overall functionality of the system."},{"tag":"td","original":" Component events can only be handled by components above them in the containment hierarchy. That's why their usage is localized to the components that need to know about them. ","result":"Component events are specific to certain components and can only be processed by components higher up in the hierarchy. Therefore, they are limited to use within the components that require them."},{"tag":"td","original":" Application events are best suitable for things that should be handled at the application level, such as navigating to a specific record. Application events also allow communication between components in separate application parts and have no direct containment relationship. ","result":"Application events are most appropriate for handling tasks at the application level, like navigating to a specific data record. These types of events are also useful for allowing communication between components that are not directly related and are located in different parts of the application."},{"tag":"p","original":" There are mainly three types of Lightning Record pages: ","result":"There exist three primary varieties of Lightning Record pages."},{"tag":"p","original":" We can create or build Lightning Record pages by using Lightning App Builder. ","result":"The development of Lightning Record pages can be carried out through the utilization of the Lightning App Builder."},{"tag":"p","original":" Implements are used to refer to platform interfaces that make components able to be used in different contexts or to grant access to extra context data. A component can implement more than one interface. ","result":"Implements are a means of enabling components to be utilized in various contexts or obtain additional context data through platform interfaces. Multiple interfaces can be implemented by a component."},{"tag":"p","original":" Following is the list of all interfaces that can be implemented in lightning component: ","result":"Here is a comprehensive catalog of interfaces that can be integrated within your Lightning components:"},{"tag":"p","original":" Lightning components are client-side-centric and known for their dynamic, mobile-friendly nature. On the other hand, Visualforce components are page-centric and mainly work on server-based. ","result":"Lightning components are known for their mobile-friendly dynamic nature, as they are focused on the client-side. Conversely, Visualforce components are oriented towards working on the server and are designed around pages."},{"tag":"p","original":" Attributes are the variables that are used for storing the values. We should define the Default, Type, Name, Access, and Description in the attribute definition, although; only Name and Type are the required parameters. ","result":"Attributes serve as the storage variables for values. An attribute definition should include several parameters such as Default, Type, Name, Access, and Description; however, the only necessary parameters are Name and Type."},{"tag":"p","original":" In Salesforce lightning, the Locker service is robust security architecture for the lightning components. This service is used to improve and enhance security by isolating the lightning components which belong to the namespace from the components in the distinct namespace. Locker service follows some practices that enhance the code's maintainability by providing access to the supported APIs. ","result":"Salesforce Lightning utilizes the Locker service, a comprehensive security architecture designed specifically for lightning components. This service renders better security by securing the lightning components within a given namespace, isolating them from components in other namespaces. The Locker service also follows best practices that boost code maintainability by allowing access to supported APIs."},{"tag":"p","original":" We can embed the lightning component on the VisualForce page by using Lightning out. We should follow the following three steps to add the lightning component to the VisualForce page: ","result":"To include a lightning component on a VisualForce page, we can make use of Lightning out. The process involves three essential steps to add the lightning component seamlessly."},{"tag":"li","original":" First, we must insert the lightning components for the JavaScript library of visual force to our intent visual force page through the tag. ","result":"To incorporate the JavaScript library of VisualForce into our intent VisualForce page, we need to include the lightning components through the appropriate tag."},{"tag":"li","original":" Now, we can generate and point a lightning app that we use for the component dependencies. ","result":"We can create a Lightning app to manage the dependencies of the component and direct it accordingly."},{"tag":"li","original":" At last, we have to write a JavaScript function that creates the component over the page through $ Lightning.createComponent(). ","result":"Finally, we need to develop a JavaScript function that utilizes $ Lightning.createComponent() to generate the component on the webpage."},{"tag":"p","original":" FlexiPage is the metadata related to a lightning page. The lightning page specifies an adaptive screen that has several lightning components. It contains 25 components. FlexiPages are stored as XML files and deployed through a deployment tool or metadata API. These lightning pages are referred to as Flexipages in the API. ","result":"FlexiPage refers to the metadata associated with a lightning page, an intelligent screen consisting of multiple lightning components. It includes 25 components and represents an adaptable user interface. FlexiPages are saved as XML files and can be deployed using metadata API or deployment tool. In API, these lightning pages are known as Flexipages."},{"tag":"p","original":" The Lightning Components are mainly designed with a mobile-first approach, but they have a responsive design that allows them to give the same experience even over the desktop without writing any separate lines of code. ","result":"The Lightning Components were created with a priority on mobile devices, but they also possess a flexible design that enables them to provide a consistent user experience on desktops without extra coding."},{"tag":"p","original":" The Lightning:navigation is used to navigate to a page reference or create a URL from the given page Reference. We have to define the page reference object for navigating. The page reference is the JavaScript object which references a page, offering a defined structure that explains the type of page and its respective values. ","result":"The Lightning:navigation component is utilized for navigating to a specified page reference or producing a URL based on the given page reference. To perform the navigation, a page reference object must be defined. This object is a JavaScript reference to a page and has a well-defined structure that defines the page type and its corresponding values."},{"tag":"strong","original":" It facilitates us to navigate to the following supported features: ","result":"The tool enables us to access and utilize various features with ease. These features include: [list of supported features]"},{"tag":"p","original":" The component page acting as a JavaScript controller is on the client-side for the Lightning parts. On the other hand, the server-side acts as an Apex Controller. ","result":"The Lightning components have a page that functions as a JavaScript controller on the client-side, while the server-side works as an Apex Controller."},{"tag":"p","original":" Following are the different types of attributes that can be used for storing the values: ","result":"You can use various kinds of attributes for storing values. Here are some examples of these types of attributes."},{"tag":"p","original":" Yes, we can integrate Lightning components with any third-party framework like Angular. ","result":"Certainly. Integrating Lightning components with third-party frameworks, such as Angular, is possible."},{"tag":"p","original":" There are mainly three phases in the application events propagation: ","result":"The process of application event propagation involves three primary stages."},{"tag":"p","original":" In the Lightning:recordEditForm, the Lightning:inputField is used for creating the editable fields. Using the Lightning:output field, we can display the read-only information. ","result":"To enable users to create editable fields, the Lightning:recordEditForm utilizes the Lightning:inputField. Meanwhile, the Lightning:output field is used to display information that is read-only."},{"tag":"strong","original":" The Lightning:recordEditForm contains the following features: ","result":"The Lightning:recordEditForm has several functionalities that include:"},{"tag":"li","original":" It displays the record edit layout to edit a particular record. ","result":"The edit record layout is shown to allow users to modify specific records."},{"tag":"li","original":" It can also display the record to create the layout to create a particular record. ","result":"The software has the ability to generate a layout for creating a specific record. It can also display examples to assist with record creation."},{"tag":"p","original":" Yes, we can make a Lightning Component that can be used in the mobile and desktop user interfaces. The Lightning Component specifies an extremely fast experience that is responsive and ready by default and has compatibility in Salesforce1 App. Its responsive nature makes it adjust as per the resolution of the screen size. So, we can use it easily on the desktop without any separate code. ","result":"Certainly! A Lightning Component can be created to cater to mobile and desktop user interfaces. It's specifically designed to offer a quick and responsive experience that's compatible with Salesforce1 App. Additionally, its responsiveness allows it to adapt to various screen sizes, making it adaptable for desktop use without requiring additional code."},{"tag":"p","original":" There are the following three ways that a developer can choose to add the Aura components to the Visualforce page: ","result":"An individual developing a project can opt for one of three methods when incorporating Aura components into a Visualforce page."},{"tag":"li","original":" A developer can create a reference to a Lightning app for declaring the component dependencies. ","result":"To declare component dependencies while developing, a Lightning app reference can be created by the developer."},{"tag":"li","original":" Use the &lt;apex:includeLightning/&gt; component and add the Lightning component for the Visualforce JavaScript library used in your Visualforce page. ","result":"To integrate Salesforce Lightning components into your Visualforce page, you can use the <apex:includeLightning/> component and include the respective JavaScript library. This will enable you to seamlessly use the Lightning components in your Visualforce page."},{"tag":"li","original":" Use the $Lightning.createComponent() to create the component for a page by writing a JavaScript function. ","result":"To generate a component for a webpage, a JavaScript function can utilize the $Lightning.createComponent() method."},{"tag":"p","original":" The main difference between &lt;ui:input&gt; and &lt;lightning:input&gt;: ","result":"Sure, here's a rephrased version of the original content:\n\nWhen it comes to Salesforce development, one common confusion is between the <ui:input> and <lightning:input> components. The key difference between these two components lies in their feature sets and the way they handle data input and output."},{"tag":"li","original":" &lt;ui:input&gt;: It does not contain lightning design system styling. ","result":"The <ui:input> component does not come with any styling from the Lightning Design System."},{"tag":"li","original":" &lt;lightning:input&gt;: It contains lightning design system styling. ","result":"The 'lightning:input' is a component that includes design styling from the Lightning Design System."},{"tag":"p","original":" The Aura: method tag is mainly used to define component API. After using this tag, we don't need to fire and handle a component event, and it allows us to directly invoke the method in the component's controller on the client-side. It simplifies the code required for a parent component to call a method on a child component that forms a part of the parent component. ","result":"The Aura: method tag is a helpful tool for defining a component's API. By implementing this tag, there is no need to handle a component event, making it easier to invoke methods in the component's controller directly from the client-side. Using the Aura: method tag simplifies the code necessary for a parent component to call a method on a child component that is part of the parent."},{"tag":"p","original":" It is completely possible to create one component for inheriting style/CSS from the parent component. We can inherit styles from parents, and it is not necessary to always define them in the Salesforce component. ","result":"Developers can easily create Salesforce components that inherit styles from their parent components. This means that styles do not always have to be defined within the component itself. By inheriting styles from parents, developers can streamline and simplify their code."},{"tag":"p","original":" An Action provider facilitates us to manage the events, actions, and handlers for the component. On the other hand, a Value provider facilitates us to use the component attribute's value in the component JavaScript and markup controller. ","result":"An Action provider helps to manage a component's events, actions, and handlers, while a Value provider enables the use of a component's attribute values in both the component's JavaScript and markup controller."},{"tag":"p","original":" Yes, it is possible to include multiple external JavaScript/CSS libraries like JQuery, Bootstrap, custom CSS, and custom JavaScript libraries in our lightning component using a static resource. ","result":"Certainly! Including various external JavaScript/CSS libraries such as JQuery, Bootstrap, custom CSS, and custom JavaScript libraries in a lightning component is achievable through the utilization of a static resource."},{"tag":"p","original":"  To get the current record id in the lightning component, we have to add the  force:hasRecordId  interface to a Lightning component. It makes the component able to assign the ID of the current record. The current record ID is useful if the component is used on a Lightning record page as an object-specific custom action or action override in Lightning Experience or the Salesforce app. This interface doesn't show any effect except when used within Lightning Experience, the Salesforce mobile app, and template-based communities. ","result":"To access the current record ID in a Lightning component, it's necessary to implement the  force:hasRecordId  interface. This interface allows the component to receive the ID of the current record. It's particularly beneficial when the component is utilized as a custom action or action override specific to an object on a Lightning record page in Salesforce's app and Lightning Experience. This interface has no impact unless used in Lightning Experience, Salesforce mobile app, or template-based communities."},{"tag":"p","original":" The Scratch org is an expandable Salesforce org used for testing and development. The Scratch org can be created for 30 days, after which we deactivate the Scratch org. The by default duration of Scratch org is seven days. ","result":"The Scratch org is a type of Salesforce org that is designed for testing and development purposes. It can be used for up to 30 days, before it is deactivated. The Scratch org's default lifespan is typically seven days."},{"tag":"p","original":" Popup or Modals Boxes display content in a layer above the app. This paradigm is mainly used in cases such as creating or editing a record and various types of messaging and wizards. ","result":"Popup or modal boxes are UI elements that display information or interactive content in a layer that appears above the primary app window. They're commonly used for tasks like creating or editing a record, providing messaging or notifications, and guiding users through a sequence of steps for completing a task."},{"tag":"p","original":" The force:appHostable interface is used as a custom tab in the Salesforce lightning component or mobile app. ","result":"The force:appHostable interface serves as a means to incorporate custom tabs within a Salesforce lightning component or mobile application."},{"tag":"p","original":" We can use the Lightning:recordEditForm, force: record data, and Lightning: record form to define the field level security. ","result":"To specify the field level security, we can make use of a combination of the Lightning:recordEditForm, force:recordData, and Lightning:recordForm components in Salesforce development."},{"tag":"p","original":" Following are the different global value providers in Salesforce lightning: ","result":"Here are some of the various providers of global values in Salesforce Lightning:"},{"tag":"p","original":"  Loading spinners are the CSS indicators we can display while retrieving the data or performing slow calculations. We can use  Lightning:spinner  that shows the animated spinner image indicating that a request is loading. ","result":"CSS loading spinners are useful indicators that signal the progress of data retrieval or slow calculations. One way to display them is by utilizing the Lightning:spinner component, which displays an animated image to signify that a request is in progress."},{"tag":"p","original":" The capture phase propagates from top to bottom while the bubble phase propagates from bottom to top. ","result":"When talking about the two phases of distillation, it's important to note that they propagate in opposite directions. The capture phase moves from the top to the bottom, whereas the bubble phase moves from the bottom to the top."},{"tag":"a","original":" Spring Boot Interview Questions ","result":"The following is a list of frequently asked interview questions on the topic of Spring Boot. These questions can help prepare candidates for a job interview in which knowledge of Spring Boot is necessary."},{"tag":"a","original":" C Programming Interview Questions ","result":"The following set of questions pertains to interviews for C programming positions."},{"tag":"a","original":" Data Structure Interview Questions ","result":"Here are some interview questions related to data structures."},{"tag":"a","original":" Manual Testing Interview Questions ","result":"Please provide the original content so I can rephrase it properly."}]