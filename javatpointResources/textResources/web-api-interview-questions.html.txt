
div => [ 
 ]
h1 => [ Most Asked Web API Interview Questions ]
p => [ Following is a list of frequently asked Web API interview questions and their best possible answers. ]
h3 => [ 1) What is a Web API? / What do you understand by Web API? ]
p => [ In Web API, API stands for Application Programming Interface. It is a framework that helps users to develop or build HTTP services that can be used by various clients, including browsers and mobile devices. For example, The ASP.NET Web API helps us to build these services on the .NET framework. ]
h3 => [ 2) Why use Web API? / Why is Web API preferred to use? / What is the reason behind using Web API? ]
p => [ We have many other technologies similar to Web API, but there are several genuine reasons to use Web API. ]
strong => [ For example: ]
li => [ Web API provides us the ability to create non-SOAP-based HTTP services. ]
li => [ We can easily use it with HTTP verbs for Create, Read, Update and Delete operations. ]
li => [ It is very lightweight, and its lightweight architecture makes it ideal for small bandwidth devices such as smartphones. ]
li => [ It is based on HTTP and easy to define, expose and consume in a REST-ful way. ]
li => [ It provides an ability to select response output in either JSON or XML and support for Open Data (OData) protocol. ]
h3 => [ 3) Is it possible to use RESTful services using WCF? / Why is the use of Web API preferred over RESTful services?  ]
p => [ Yes, it is possible to use RESTful services using WCF. We can easily develop RESTful services with WCF, but two main reasons make users choose Web API instead of RESTful services. ]
li => [ Web API increases the TDD (Test Data-Driven) approach in the development of RESTful services. ]
li => [ If we want to develop RESTful services in WCF, you surely need many config settings, URI templates, contracts &amp; endpoints. ]
h3 => [ 4) Is it true that ASP.NET Web API has replaced WCF? ]
p => [ No, it is not true at all that ASP.NET Web API has replaced WCF. ASP.NET Web API is another way to build non-SOAP-based services, i.e., plain XML or JSON string. ]
p => [ Web API is lightweight due to using HTTP only so. It cannot match the power and flexibility of WCF. Web API is perfect if you only need to use HTTP as your transport. But if you want to use a different protocol such as TCP or Named Pipes, you would have to use WCF. ]
h3 => [ 5) What is the main difference between Web API and WCF? ]
p => [ WCF stands for Windows Communication Foundation. It is used for service-oriented application development supporting various transport protocols such as HTTP, TCP, MSMQ. The WCF clients must be able to understand XML. On the other hand, Web API is designed specifically for HTTP services, and due to its low-bandwidth, it supports non-SOAP services and most MVC features.  ]
h3 => [ 6) What are the main advantages of using Web API? ]
p => [ Following are the main advantages of using Web API: ]
li => [ Content Negotiation ]
li => [ Self-Hosting ]
li => [ OData ]
li => [ Filters ]
li => [ Routing ]
li => [ Model Bindings ]
h3 => [ 7) What are the differences between Web API and MVC? ]
p => [ Following are the main differences between Web API and MVC (Model View Controller) ]
th => [ MVC ]
th => [ Web API ]
td => [ MVC is an application design model used to create web applications with a front-end and controls and back-end processes. ]
td => [ Web API is used to create HTTP services to interact with a variety of clients. ]
td => [ We can use the MVC to create web apps with user interfaces. ]
td => [ We use Web API to develop HTTP services. ]
td => [ In the MVC design pattern, the web application returns a view as well as data. ]
td => [ Web API returns the data only. ]
td => [ MVC can only map requests to action methods. ]
td => [ With Web API, we can map all requests to actions using HTTP verbs. ]
td => [ MVC can return data only in JSON format. ]
td => [ Web API can return data in JSON and XML, among other formats. ]
h3 => [ 8) Which .NET framework supports Web API? ]
p => [ The .NET framework version 4.0 and above versions support web API. ]
h3 => [ 9) What are the main return types supported in Web API?  ]
p => [ Following are the main return types of Web API controller action: ]
strong => [ Void: ]
strong => [ HttpResponseMessage: ]
strong => [ IHttpActionResult: ]
strong => [ Other types: ]
h3 => [ 10) Which open-source library is supported by Web API for JSON serialization? ]
p => [ Web API uses JSON.NET library for JSON serialization. ]
h3 => [ 11) What is the biggest drawback of "Other Return Types" in Web API? ]
p => [ The biggest disadvantage of the "Other Return Types" in Web API is that it doesn't help us directly return an error code like a 404 error. ]
h3 => [ 12) What do you understand by Web API Routing? ]
p => [ Web API Routing is a pattern matching just similar we do in MVC. All routes are registered in Route Tables. ]
strong => [ For example: ]
h3 => [ 13) Is it possible to use ASP.NET Web API in applications created using other than .NET language?  ]
p => [ Yes, we can easily use ASP.NET Web API in the applications created using another language than .NET, but those applications must have access/support to the HTTP protocol.  ]
h3 => [ 14) What do you understand by SOAP?  ]
p => [ The full form of SOAP is Simple Object Access Protocol. It is an XML message format used in web service interactions to interchange data. It facilitates users to send messages over HTTP or JMS. It is also an XML-based messaging protocol for exchanging information among computers. ]
p => [ In other words, we can say that SOAP is a messaging protocol used for interchanging data in a decentralized and distributed environment. ]
h3 => [ 15) How to use the Web API with ASP.NET Web Form? ]
p => [ We can use the Web API with ASP.NET Web Form by performing the following three simple steps: ]
li => [ First, create a Web API Controller. ]
li => [ Now, add a routing table to the Application_Start method of Global. sax ]
li => [ Now, we can make a jQuery AJAX Call to Web API method and get the data. ]
h3 => [ 16) How can we restrict or limit access to Web API to Specific HTTP Verb?  ]
p => [ We can easily restrict or limit access to an ASP.NET Web API method called using a particular HTTP method. In this process, attribute programming plays a crucial role.  ]
h3 => [ 17) What do you understand by the RESTful Services?  ]
p => [  The full form of REST stands for the  Representational State Transfer . Roy Fielding coined this term in 2000. RESTful is an architectural style for creating loosely coupled applications over HTTP. To make API to be RESTful, we have to follow the six constraints given below: ]
strong => [ Client and Server Separation: ]
strong => [ Stateless: ]
strong => [ Uniform Interface: ]
strong => [ Cacheable: ]
strong => [ Code-On-Demand ]
strong => [ Layered System ]
h3 => [ 18) What do you understand by exception filters? ]
p => [ Exception filters are used to execute when exceptions are unhandled and thrown from a controller method. There may be several reasons for the exception. Exception filters implement the "IExceptionFilter" interface.  ]
h3 => [ 19) What do you understand by TestApi in Web API?  ]
p => [ TestApi is a utility library of Web APIs. Using this library tester, developers can create testing tools and automated tests for a .NET application using data-structure and algorithms. ]
h3 => [ 20) Is it possible to return View from Web API? ]
p => [ No, Web API does not return View, but they return the data. In Web API, APIController is used for returning the data. If you want to return a view from the controller class, you have to make sure you have used or inherited the Controller class.  ]
h3 => [ 21) What is Parameter Binding in ASP.NET Web API?  ]
p => [ Parameter Binding is a process that specifies that when a Web API calls a method on a controller, it must set the values for the parameters. ]
p => [ By Default, Web API uses the following rules to bind the parameter: ]
strong => [ FromUri: ]
strong => [ FromBody: ]
h3 => [ 22) How can you register exception filter globally? ]
p => [ We can easily register exception filter globally by using the following code:  ]
h3 => [ 23) What is the difference between REST and RESTful?  ]
p => [ Difference between REST and RESTful: ]
th => [ REST ]
th => [ RESTful ]
td => [ The full form of REST is REpresentational State Transfer. ]
td => [ The term RESTful is written by applying REST architectural concepts called RESTful services. ]
td => [ It is a completely new aspect of writing a web app. ]
td => [ It mainly focuses on system resources and how the resource's state should be transported over HTTP protocol. ]
h3 => [ 24) What is Content Negotiation in Web API?  ]
p => [ Content Negotiation is the process of selecting the best representation for a given response from a set of various multiple representations available. Following are the two main headers that are responsible for the Content Negotiation: ]
strong => [ Content-Type: ]
strong => [ Accept: ]
h3 => [ 25) Give an example to specify Web API Routing? ]
p => [ Following is an example of Web API Routing:  ]
h3 => [ 26) What do you understand by a Media-Type Formatter in ASP.NET Web API? ]
p => [ The Media-Type formatter is an abstract class acting as a parent class of JsonMediaTypeFormatter and XmlMediaTypeFormatter. These two classes, JsonMediaTypeFormatter (which is used to handle JSON format) and XmlMediaTypeFormatter (which is used to handle XML format), are derived from the Media-Type formatter. ]
p => [ The Media-Type formatter classes are also responsible for serializing the response data in the client's format. ]
h3 => [ 27) What is the method to handle errors in Web API? ]
p => [ Several classes are available in Web API, such as HttpError, Exception Filters, HttpResponseException, and Registering Exception Filters, etc., to handle errors.  ]
h3 => [ 28) What are the several new features that come with ASP.NET Web API 2.0? ]
p => [ Following are the latest new features of ASP.NET Web API framework v2.0: ]
li => [ Attribute Routing ]
li => [ Open Web Interface NET ]
li => [ Cross-Origin Resource Sharing ]
li => [ External Authentication ]
li => [ HttpActionResult ]
li => [ Web API OData ]
h3 => [ 29) How can you restrict access methods to specific HTTP verbs in Web API? ]
p => [ It is very easy to implement access restrictions in Web API with Attributes' help (like HTTP verbs). We can do it by defining HTTP verbs as an attribute to restrict access. ]
strong => [ For example, ]
h3 => [ 30) What is Authorize Attribute? What is its use? ]
p => [ Web API provides a built-in authorization filter known as Authorize Attribute. This filter is used to check whether the user is authenticated or not. If not, the user will see 401 Unauthorized HTTP Status Code.  ]
h3 => [ 31) Is it possible to pass multiple complex types in Web API?  ]
p => [ Yes, we can easily pass multiple complex types in Web API by using the following two methods: ]
li => [ Using ArrayList ]
li => [ Using Newtonsoft array ]
h3 => [ 32) What do you understand by basic HTTP Authentication?  ]
p => [ Basic HTTP Authentication is a mechanism that is used for user authentication. Here, users are authenticated through the service in which the client passes username and password in the HTTP Authorization request headers. The credentials are formatted as the string "username:password," based on encoded.  ]
h3 => [ 33) How can you pass an ArrayList in Web API? ]
p => [ The following example shows the code how we can pass an ArrayList in Web API:  ]
h3 => [ 34) How can the Web API route the HTTP request to the Controller ASP.NET MVC? ]
p => [ In ASP.NET Web API, an HTTP request is used to map to the controller. The Web API framework uses a routing table to determine which action is to invoke.  ]
h3 => [ 35) How can we handle an error using HttpError in Web API?  ]
p => [ In Web API, the HttpError method is used to throw the response body's error info. Along with this, the "CreateErrorResponse" method can also be used, which is an extension method defined in "HttpRequestMessageExtension."  ]
h3 => [ 36) How can you register exception filter globally? ]
p => [ We can use the following code to register an exception filter globally: ]
h3 => [ 37) What do you understand by Exception handling in Web API?  ]
p => [ Exception handling is a technique used to handle runtime error in the application code. There are several ways that we can use to handle the error in ASP.NET Web API. Following is a list of some of them: ]
li => [ HttpResponseException ]
li => [ HttpError ]
li => [ Exception Filters etc. ]
h3 => [ 38) What is Web API Versioning, and why is it used? ]
p => [ Web API Versioning is a technique in which Web API is arranged to cope with the business changes, and the API will not impact the client that is using/consuming the existing API. As we know, multiple clients can consume the Web API at a time, so Web API versioning is necessary and required as the business grows, and business requirement changes with the time.  ]
h3 => [ 39) How many ways are you to do Web API Versioning? ]
p => [ Following are the several ways to do Web API Versioning: ]
li => [ URI ]
li => [ Query String Parameter ]
li => [ Custom Header Parameter ]
li => [ Accept Header Parameter ]
h3 => [ 40) What are the advantages of Web API over WCF?  ]
p => [ WCF services use the SOAP protocol while Web API never uses the SOAP protocol. That's why Web API services are lightweight since it doesn't use SOAP. It also reduces the data which is transferred to resume service. The biggest advantage of Web API is that it never needs too much configuration. Therefore, the client can interact with the service by using the HTTP verbs.  ]
h3 => [ 41) What is the difference between MVC and Web API? ]
p => [ Differences between MVC and Web API: ]
th => [ MVC framework ]
th => [ Web API ]
td => [ The MVC framework is used for developing applications that have a User Interface. ]
td => [ WebAPI is used for developing HTTP services. ]
td => [ In the MVC framework, views are used for building a User Interface. ]
td => [ Other apps can also call the WebAPI methods to fetch that data. ]
h3 => [ 42) Who can use or consume Web API? ]
p => [ Any client which supports HTTP verbs such as GET, PUT, DELETE, POST etc., can use or consume Web API. Web API services don't need any configuration, so it is very easy to consume them by any client. Even portable devices like mobile devices can easily consume them, and it is surely the biggest advantages of this technology.  ]
h3 => [ 43) What are the different HTTP methods used in Web API? ]
p => [ Following are the different types of HTTP methods used in Web API. We can use them according to the requirements. ]
strong => [ GET: ]
strong => [ HEAD: ]
strong => [ PUT: ]
strong => [ POST: ]
strong => [ DELETE: ]
strong => [ OPTIONS: ]
strong => [ CONNECT: ]
strong => [ TRACE: ]
h4 => [ Note: From the list of all the above methods, the GET, PUT, POST, and DELETE are the most popular methods. All methods are case-sensitive, and we must use them in uppercase. ]
h3 => [ 44) What do you understand by the HTTP Status Codes? ]
p => [ The Response Header of each API response consists of an HTTP Status Code. The HTTP Status Codes are the three-digit integers that contain the server response. Here, each number specifies a meaning. The first digit of the Status-Code defines the class of response. According to this first number, the HTTP Status Codes are categorized into five types. ]
p => [ Following is the list of HTTP Status Codes with their meaning: ]
th => [ HTTP Status Codes ]
th => [ Status ]
th => [ Meaning ]
td => [ 1xx ]
td => [ Informational ]
td => [ It specifies that the request has been received and the process is continuing. ]
td => [ 2xx ]
td => [ Success ]
td => [ It specifies that the action was successfully received, understood, and accepted. ]
td => [ 3xx ]
td => [ Redirection ]
td => [ It specifies that we have to take further actions to complete the request. ]
td => [ 4xx ]
td => [ Client Error ]
td => [ It specifies that the request contains incorrect syntax or cannot be fulfilled. ]
td => [ 5xx ]
td => [ Server Error ]
td => [ It specifies that the server failed to fulfil a valid request. ]
h3 => [ 45) What are some commonly seen HTTP Status Codes?  ]
p => [ Following is the list of some commonly seen HTTP Status Codes: ]
li => [ 200 (Request is Ok) ]
li => [ 201 (Created) ]
li => [ 202 (Accepted) ]
li => [ 204 (No Content) ]
li => [ 301 (Moved Permanently) ]
li => [ 400 (Bad Request) ]
li => [ 401 (Unauthorized) ]
li => [ 403 (Forbidden) ]
li => [ 404 (Not Found) ]
li => [ 500 (Internal Server Error) ]
li => [ 502 (Bad Gateway) ]
li => [ 503 (Service Unavailable) etc. ]
h3 => [ 46) What do you understand by Internet Media Types? ]
p => [ The Internet Media Type is a file identification mechanism on the MIME encoding system. It is also known as the "MIME type." It has become the de facto standard for identifying content on the Internet. ]
p => [ For example, suppose we receive an email from a server with an attachment, then the server embeds the media type of the attachment in the message header. So, the browser can launch the appropriate helper application or plug-in. ]
h3 => [ 47) What is the difference between XML and JSON? ]
p => [ Following are the differences between XML and JSON:  ]
th => [ XML ]
th => [ JSON ]
td => [ The full form of XML is eXtensible Markup Language.	The full form of JSON is JavaScript Object Notation. ]
td => [ It is a markup language like HTML and is designed to store and transport data. ]
td => [ JSON is often used when data is sent from a server to a web page. It is also used to store and transport data. ]
td => [ XML doesn't do anything, but it can store data in a specific format. ]
td => [ JSON is a self-describing, easy-to-understand, lightweight format for storing and transporting data. ]
h3 => [ 48) In which .NET framework the ASP .NET Web API was introduced?  ]
p => [ The first version of ASP.NET Web API was introduced in .NET Framework 4. After that, all the later versions of the .NET Framework support the ASP.NET Web API.  ]
h3 => [ 49) What are the main differences between WCF vs. MVC vs. Web API? ]
p => [ WCF vs. MVC vs. ASP.NET Web API: ]
th => [ WCF ]
th => [ MVC ]
th => [ Web API ]
td => [ WCF stands for Windows Communication Foundation. It is a framework that is used to build or develop service-oriented applications. ]
td => [ MVC stands for Model View Controller. It is used to create a web application that returns both data and view (HTML). ]
td => [ Web API is an open-source platform and framework used to create HTTP-based services that only return data and not view. ]
td => [ It is designed to exchange standard SOAP-based messages. ]
td => [ MVC is used to facilitate the easy rendering of HTML. ]
td => [ It supports most of the MVC features, which keep Web API over WCF. ]
td => [ WCF can be consumed by clients who can understand XML. ]
td => [ MVC is used to create a web app in which we can build web pages. ]
td => [ The Web API framework is used to generate HTTP services that cover more clients by generating raw format data, for example, plain XML or JSON string. ]
td => [ WCF supports a variety of transport protocols such as HTTP, TCP, Named Pipes or MSMQ, etc. ]
td => [ JSONit will return JSONResult from the action method. ]
td => [ Web API creates simple HTTP services that render raw data. ]
td => [ WCF ships out with the .NET Framework. ]
td => [ All requests are mapped to the respective action methods. ]
td => [ Web API returns XML or JSON to the client. ]
td => [ WCF service is good for Message Queue, duplex communication, one-way messaging. ]
td => [ We can return a view from MVC. In an ASP.NET MVC application, requests are mapped to Action Methods. ]
td => [ All requests are mapped to actions using HTTP verbs. ]
h3 => [ 50) How can we unit test the Web API?  ]
p => [ We can use the Fiddler tool to unit test the Web API. Follow the steps given below and do the setting in the Fiddler tool: ]
p => [ Compose Tab -&gt; Enter Request Headers -&gt; Enter the Request Body and execute. ]
h3 => [ 51) How can you return JSON from Web API Service irrespective of the Accept header value? ]
p => [ We can easily return JSON from Web API Service irrespective of the Accept header value by removing the XmlFormatter from the Register() method of WebApiConfig.cs file, which is present inside the App_Start folder. Use the following piece of code to remove XmlFormatter completely. It will always return data in JSON format irrespective of the Accept header value in the client request.  ]
h3 => [ 52) What is the difference between Controller and ApiController?  ]
p => [ Controller is used to rendering our normal views. ]
strong => [ Example: ]
p => [ ApiController is used when we have only to return data that is serialized and sent to the client. ]
p => [  Example:   ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ Company Interview Questions &amp; Procedure ]
a => [ JavaScript Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
a => [ jQuery Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
