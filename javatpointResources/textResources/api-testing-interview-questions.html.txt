
div => [ 
 ]
h1 => [ API Testing Interview Questions ]
p => [  A list of frequently asked  API Testing interview questions and answers  are given below. ]
h3 => [ 1) What is API? ]
p => [  API  ( Application Programming Interface ) helps in communication and data exchange between two software systems. API act as an interface between two applications and allows the two software systems communicate with one another. API is a collection of functions which can be executed by another software program. ]
p => [ API works as; it takes a request from the source, takes that request to the database, fetches the request data from the database and returns a response to the source. API takes the requests from the user and gives the response without exposing the internal details. API acts as Abstraction. ]
p => [  Example:  Amazon API, Google Map API ]
h3 => [ 2) What is API testing? ]
p => [  API testing  is a type of software testing that involves testing APIs directly. API is a part of integration testing to check whether the API meets expectations in terms of functionality, reliability, performance, and security of applications. Multiple API system can performed API testing. In API testing, our primary focus is on Business Logic Layer of the software architecture. ]
h3 => [ 3) What are the types of API testing? ]
p => [ API testing involves the following types of testing: ]
li => [ Unit Testing ]
li => [ Functional Testing ]
li => [ Load Testing ]
li => [ Runtime/Error Detection  ]
li => [ Security Testing ]
li => [ UI Testing ]
li => [ Interoperability and WS compliance Testing ]
li => [ Penetration Testing ]
li => [ Fuzz Testing ]
h3 => [ 4) What are the protocols used in API Testing? ]
p => [ Protocols used in API testing are: ]
li => [ HTTP ]
li => [ REST ]
li => [ SOAP ]
li => [ JMS ]
li => [ UDDI ]
h3 => [ 5) What are the tools used for API Testing? ]
p => [ Tools used for API testing are: ]
li => [ Parasoft SOAtest ]
li => [ PostMan ]
li => [ AlertSite API monitoring ]
h3 => [ 6) What is API test environment? ]
p => [ For API the test environment is a quite complex method where the configuration of server and database is done as per the requirement of the software application. API testing does not involve graphical user interface (GUI). ]
p => [ API is checked for its proper functioning after installation. ]
h3 => [ 7) What is API framework? ]
p => [ API framework is described by the config. File which consist of the list of all APIs that are required to be activated and are activated for any particular program run. This is essential as every test run does not require all APIs. ]
h3 => [ 8) What are the limits of API usage? ]
p => [ Many APIs have certain limit set up by the provider. Hence, try to estimate our usage and understand how that will impact the overall cost of the offering.  ]
h3 => [ 9) What are the advantages of API testing? ]
p => [ Advantages of API testing are: ]
strong => [ Test for core functionality: ]
strong => [ Time effective: ]
strong => [ Language Independent: ]
strong => [ Easy Integration with GUI: ]
h3 => [ 10) What are the principles of an API test design? ]
p => [ Here, are the seven principles of API test design. ]
strong => [ Exhaustive Testing: ]
strong => [ Defect Clustering: ]
strong => [ Pesticide Paradox: ]
strong => [ Testing shows presence of defects: ]
strong => [ Absence of error -fallacy: ]
strong => [ Early Testing: ]
strong => [ Testing is context dependent: ]
h3 => [ 11) What is API framework? ]
p => [ A framework or software framework is a platform for developing software applications. API framework is a foundation on which software developer can build applications for a specific platform. ]
p => [  Example:  A framework can include predefined classes and functions that can be used to process input, manage hardware devices and interact with system software. ]
p => [ Framework is similar to an Application Programming Interface, technically framework includes API. Framework serves foundation for programming while API provides access to the elements supported by the framework. Framework also includes code libraries, compiler and other programs used in the software development process. ]
p => [ API framework is defined by configuration file which consists the list of all APIs that is required to be activated and activated for a particular program run. ]
h3 => [ 12) What are the common tests that performed on API? ]
p => [ Here, are the common tests that performed on API are as: ]
li => [ Response of the API should be verified based on the request. We will verify that the return value is based on request. ]
li => [ When API is updating any data structure we should verify the system is authenticating the outcome. ]
li => [ We will verify whether the API is trigger other event or request another API. ]
li => [ We will verify the behavior of the API when no value is return. ]
h3 => [ 13) What exactly needs to verify in API testing? ]
p => [ In API testing, we send a request to API with the known data and then analysis the response. ]
li => [ We will verify the accuracy of the data. ]
li => [ Will see the HTTP status code. ]
li => [ We will see the response time. ]
li => [ Error codes in case API returns any errors. ]
li => [ Authorization would be check. ]
li => [ Non-Functional testing such as performance testing, security testing. ]
h3 => [ 14) What are the differences between API and Web Services? ]
th => [ Sr. No. ]
th => [ API ]
th => [ Web Services ]
strong => [ 1. ]
td => [ API may or may not need network for its operations. ]
td => [ Web Services always need network for its operation. ]
strong => [ 2. ]
td => [ Web service can be communicated through SOAP, REST, AND RPC. ]
strong => [ 3. ]
td => [ API can perform all the operations which web service can't perform. ]
td => [ Web service can't perform all the operations like API. ]
strong => [ 4. ]
td => [ All APIs are not web service. ]
td => [ All web services are API ]
h3 => [ 15) What is API documentation? ]
p => [ A good documentation is must for any foundation. API documentation serves as quick reference for accessing library or working within a program. ]
p => [ When we use any such documents, it must consists of proper plan, content source, proper layout, information related to each function etc. ]
p => [ There are various documentation tools like Doxygen and JavaDoc. Here, are the functions which are documented which revolve around the parameters like: ]
li => [ Function description ]
li => [ Type and syntax of error message that may occure ]
li => [ Syntax, elements and sequence needed for each parameter ]
li => [ Links regarding functions ]
h3 => [ 16) What is the most used template for API documentation? ]
p => [ Here, are the various documentation template that make the whole process simple and easy. They are: ]
li => [ Swagger ]
li => [ Miredot ]
li => [ Slate ]
li => [ FlatDoc ]
li => [ API blueprint ]
li => [ RestDoc ]
li => [ Web service API specification ]
h3 => [ 17) What are the types of bug that can be found during API testing? ]
p => [ API testing helps us to find many types of bugs which are: ]
li => [ Stress ]
li => [ Security ]
li => [ Duplicate or missing functionality ]
li => [ Reliability ]
li => [ Unused flags ]
li => [ Performance ]
li => [ Incompatible error handling ]
li => [ Multi-threaded issue ]
li => [ Improper errors ]
h3 => [ 18) What are the difference between API testing and UI testing? ]
p => [ UI (User Interface) testing means the testing of the graphical user interface. The focus of UI testing is on the look and feel of the application. In user interface testing the main focus is on how users can interact with app elements such as images, fonts, layout etc. are checked. ]
p => [ API testing allows the communication between two software systems. API testing works on backend also known as backend testing. ]
h3 => [ 19) What is SOAP? ]
p => [ SOAP (Simple Object Access Control) . It is an XML based protocol that helps in exchanging information among computers. ]
h3 => [ 20) What is REST API? ]
p => [  REST API  is a set of function helps the developers performing requests when the response is receiving. Through HTTP protocol interaction is made in REST API. ]
p => [ REST is defined as Representational state transfer. It is an effective standard for API creation. ]
h3 => [ 21) What are the differences between SOAP and REST API? ]
th => [ Sr. No. ]
th => [ SOAP API ]
th => [ REST API ]
strong => [ 1. ]
strong => [ SOAP ]
strong => [ REST ]
strong => [ 2. ]
strong => [ SOAP ]
strong => [ REST ]
strong => [ 3. ]
strong => [ SOAP ]
strong => [ REST ]
h3 => [ 22) What are the major challenges faced during API testing? ]
p => [ The major challenges faced during the API testing are: ]
li => [ Parameter Selection ]
li => [ Parameter Combination ]
li => [ Call sequencing ]
li => [ Output verification and validation ]
li => [ A major challenge is providing input values which are very difficult because GUI is not available. ]
h3 => [ 23) What are the difference between API Testing and Unit Testing? ]
p => [ Difference between API testing and Unit testing are: ]
th => [ Sr. No. ]
th => [ API Testing ]
th => [ UNIT Testing ]
strong => [ 1. ]
td => [ API testing is a form of black box testing. ]
td => [ Unit testing is a form of white box testing. ]
strong => [ 2. ]
td => [ API testing is performed after the project completion during the test. ]
td => [ Unit testing is performed when the project is created. ]
strong => [ 3. ]
td => [ In API testing there is a wide scope of testing. ]
td => [ In Unit testing there is a limited scope of testing we can test only the basic functionality. ]
strong => [ 4. ]
td => [ API testing is done by the testers. The whole purpose of API testing is end to end testing of the functionality. ]
td => [ Unit testing is done by the developer. In unit testing every functionality is separately tested. ]
h3 => [ 24) What is a RESTFUL web services? ]
p => [ There are two kinds of web services  ]
li => [ SOAP Web Services ]
li => [ RESTFUL Web Services ]
p => [  1. SOAP (Simple Object Access Protocol) -  SOAP is a XML based method which is used in Web Services. ]
p => [  2. RESTFUL Web Services -  To implement the concept of REST architecture HTTP method is used. RESTFUL Web Services defines URI (Uniform Resource Identifier), and also provides resource representation like JSON and a set of HTTP method. ]
h3 => [ 25) What is Resource in REST? ]
p => [ REST architecture treats any content as resource, which can be text files, HTML pages, images, videos or dynamic business information. REST server gives the functionality to access the resources and modifies them. We can identify the each resources by URIs/ global IDs. ]
h3 => [ 26) What is the way to represent the resource in REST? ]
p => [ REST uses different representation to define the resources like text, JSON and XML. The most popular representation of resources is JSON and XML. ]
h3 => [ 27) What protocol is used by the RESTFUL Web Services? ]
p => [ RESTFUL Web Services uses the HTTP protocol. They use the HTTP protocol as a medium of communication between the client and the server. ]
h3 => [ 28) What are the characteristics of REST? ]
p => [ Here, are the two characteristics of REST. ]
li => [ REST is stateless. With the use of the REST API the server has no status, we can restart the server between two calls, inspite of all the data is transferred to the server. ]
li => [ Web Services uses POST method to perform operations, while REST uses GET method to access the resources. ]
h3 => [ 29) What is messaging in RESTFUL Web Services? ]
p => [ RESTFUL Web Services use the HTTP protocol as a communication tool between the client and the server. This is the technique when the client sends a message in the form of HTTP request the server send back the HTTP reply which is called Messaging. This message consists message data and Meta data i.e. information on the message itself. ]
h3 => [ 30) What are the components of an HTTP request? ]
p => [ An HTTP request have five components. These are: ]
strong => [ Action showing HTTP method ]
strong => [ Uniform Resource Identifier (URI): ]
strong => [ HTTP version: ]
strong => [ Request Header: ]
strong => [ Request Body: ]
h3 => [ 31) What is the HTTP protocol supported by REST? ]
p => [  GET:  GET is used to request data from the specified resource. ]
p => [ GET request can be cached and bookmark. It remains in the browser history and has length restriction. When dealing with sensitive data GET requests should not be used. ]
p => [  POST:  POST is used to send data to server for creation or updating the resources. ]
p => [ POST requests are never cached or bookmark. ]
p => [  PUT:  PUT replaces the current representation of the target resource with the request payload. ]
p => [  DELETE:  DELETE removes the specified resource. ]
p => [  OPTIONS:  OPTION is used to describe the communication option for the target resources. ]
p => [  HEAD:  HEAD asks for response which is identical to GET requests, but without the response body. ]
h3 => [ 32) Can we use GET request instead of PUT to create a resource? ]
p => [ PUT or POST method is used create a resource. GET is only used to request the resources.  ]
h3 => [ 33) What is URI? What is the purpose of web-based service and what is it's format? ]
p => [ URI stands for Uniform Resource Identifier. It is a string of characters designed for unambiguous identification of resources and extensibility by the URI scheme. The purpose of URI is to locate the resource on the server hosting of the web service. ]
p => [  A URIs format is  [object Object] ]
h3 => [ 34) What are SOAP Web Services? ]
p => [  SOAP  ( Simple Object Access Protocol ) is defined as the XML based protocol. SOAP is also known for developing and designing web services and also enable the communication between the applications developed on different platform by using different programming languages on the internet. SOAP is platform and language independent. ]
h3 => [ 35) When we can use SOAP API? ]
p => [ We can use SOAP API to perform the operation on records like create, retrieve, update or delete. We can use API to manage password, perform searches etc. ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ jQuery Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
