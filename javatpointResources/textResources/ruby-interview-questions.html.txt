
div => [ 
 ]
h1 => [ Ruby Interview Questions ]
p => [  A list of frequently asked  Ruby or Ruby On Rails interview questions  and answers are given below. ]
h3 => [ 1) What is Ruby programming language? ]
p => [ Ruby is a dynamic, reflective, general purpose, open source programming language that focuses on simplicity and productivity. Ruby has a mixed features of Perl, small talk, Eiffel, Ada and Lisp. Ruby was designed to create a new language which makes a balance with the functionality of Imperative languages.  ]
p => [  For more information:  Click here ]
h3 => [ 2) Who is the developer of Ruby? ]
p => [ Ruby is designed and developed by Yukihiro "martz" Matsumoto in mid 1990 in Japan. ]
p => [  For more information:  Click here ]
h3 => [ 3) Why Ruby is known as a language of flexibility? ]
p => [ Ruby is known as a language of flexibility because it facilitates its author to alter the programming elements. Some specific parts of the language can be removed or redefined. Ruby does not restrict the user. For example, to add two numbers, Ruby allows to use + sign or the word 'plus'. This alteration can be done with Ruby's built-in class Numeric. ]
h3 => [ 4) List some features of Ruby? ]
p => [ Ruby has many features. Some of them are listed below. ]
li => [ Object-oriented ]
li => [ Flexible ]
li => [ Dynamic typing and Duck typing ]
li => [ Garbage collector ]
li => [ Keyword arguments ]
p => [  For more information:  Click here ]
h3 => [ 5) Explain some differences between Ruby and Python. ]
p => [ Similarities: ]
li => [ High level language ]
li => [ Support multiple platforms ]
li => [ Use interactive prompt called irb ]
li => [ Server side scripting language ]
p => [ Differences: ]
li => [ Ruby is fully object oriented while Python is not. ]
li => [ Ruby supports EclipseIDE while Python supports multiple IDEs. ]
li => [ Ruby use Mixins while Python doesn't. ]
li => [ Ruby supports blocks, procs and lambdas while Python doesn't.  ]
p => [  For more information:  Click here ]
h3 => [ 6) Write the command to get installed Ruby version in your system. ]
p => [ ruby -v ]
p => [  For more information:  Click here ]
h3 => [ 7) What are class libraries in Ruby? ]
p => [ Ruby class libraries contain variety of domain such as thread programming, data types, various domains. Following is a list of domains which has relevant class libraries: ]
li => [ Text processing  ]
li => [ CGI Programming  ]
li => [ Network programming  ]
li => [ GUI programming  ]
li => [ XML programming  ]
h3 => [ 8) Name some operators used in Ruby. ]
p => [ Operators are a symbol which is used to perform different operations. ]
li => [ Unary operator ]
li => [ Airthmetic operator ]
li => [ Bitwise operator ]
li => [ Logical operator ]
li => [ Ternary operator ]
p => [  For more information:  Click here ]
h3 => [ 9) What is RubyGems in Ruby programming language? ]
p => [ RubyGems provides a standard format for distributing ruby programs and libraries. It works as a package manager for the Ruby programming language. ]
p => [ RubyGems is now a part of the standard library from Ruby version 1.9. ]
h3 => [ 10) What are Ruby variables. ]
p => [ Ruby variables hold data which can be used later in a program. Each variable act as a memory and shas a different name.  ]
p => [ There are four types of variables in Ruby: ]
li => [ Local variable ]
li => [ Class variable ]
li => [ Instance variable ]
li => [ Global variable ]
p => [  For more information:  Click here ]
h3 => [ 11) What is the difference between nil and false in Ruby? ]
th => [ nil ]
th => [ false ]
td => [ nil cannot be a value. ]
td => [ false can be a value. ]
td => [ nil is returned where there is no predicate. ]
td => [ in case of a predicate, true or false is returned by a method. ]
td => [ nil is not a boolean data type. ]
td => [ false is a boolean data type. ]
td => [ nil is an object of nilclass. ]
td => [ false is an object of falseclass. ]
h3 => [ 12) Explain Ruby data types. ]
p => [ Ruby data types represent type of data such as text, string, numbers, etc. ]
p => [ There are different data types in Ruby: ]
li => [ Numbers ]
li => [ Strings ]
li => [ Symbols ]
li => [ Hashes ]
li => [ Arrays ]
li => [ Booleans ]
p => [  For more information:  Click here ]
h3 => [ 13) What is the use of load and require in Ruby? ]
p => [ In Ruby, load and require both are used for loading the available code into the current code. In cases where loading the code required every time when changed or every times someone hits the URL, it is suggested to use 'load'. ]
p => [ It case of autoload, it is suggested to use 'require'. ]
h3 => [ 14) Explain Ruby if-else statement. ]
p => [ The Ruby if-else statement is used to test condition. There are various types of statement in Ruby. ]
li => [ if statement ]
li => [ if-else statement ]
li => [ if-else-if (elsif) statement ]
li => [ ternary statement ]
p => [  For more information:  Click here ]
h3 => [ 15) Explain case statement in Ruby. ]
p => [ In Ruby, we use 'case' instead of 'switch' and 'when' instead of 'case'. The case statement matches one statement with multiple conditions just like a switch statement in other languages. ]
p => [  For more information:  Click here ]
h3 => [ 16) Explain for loop in Ruby. ]
p => [ Ruby for loop iterates over a specific range of numbers. Hence, for loop is used if a program has fixed number of itrerations. ]
p => [ Ruby for loop will execute once for each element in expression.  ]
p => [  For more information:  Click here ]
h3 => [ 17) Explain while loop in Ruby. ]
p => [ Ruby while loop is used to iterate a program several times. If the number of iterations is not fixed  ]
p => [ for a program, while loop is used. ]
p => [  For more information:  Click here ]
h3 => [ 18) Explain do while loop in Ruby. ]
p => [ Ruby do while loop iterates a part of program several times. In this, loop will execute at least once because do while condition is written at the end. ]
p => [  For more information:  Click here ]
h3 => [ 19) Explain until loop in Ruby. ]
p => [ Ruby until loop runs until the given condition evaluates to true. It exits the loop when condition becomes true. It is opposite of the while loop. ]
p => [  For more information:  Click here ]
h3 => [ 20) Explain break statement in Ruby. ]
p => [ Ruby break statement is used to terminate a loop. It is mostly used in while loop where value is printed till the condition is true. ]
p => [  For more information:  Click here ]
h3 => [ 21) Explain next statement in Ruby. ]
p => [ Ruby next statement is used to skip loop's next iteration. Once the next statement is executed, no further iteration will be performed. ]
p => [  For more information:  Click here ]
h3 => [ 22) Explain redo statement in Ruby. ]
p => [ Ruby redo statement is used to repeat the current iteration of the loop. The redo statement is executed without evaluating loop's condition. ]
p => [  For more information:  Click here ]
h3 => [ 23) Explain retry statement in Ruby. ]
p => [ Ruby retry statement is used to repeat the whole loop iteration from the start. ]
p => [  For more information:  Click here ]
h3 => [ 24) How will you comment in Ruby. ]
p => [ Ruby comments are non-executable lines in a program. They do not take part in the execution of a program. ]
p => [ Single line comment syntax: ]
p => [ Multi line comment syntax: ]
p => [  For more information:  Click here ]
h3 => [ 25) Explain Ruby object. ]
p => [ Object is the default root of all Ruby objects. Ruby objects inherit from BasicObject which allows creating alternate object hierarchies. ]
p => [  For more information:  Click here ]
h3 => [ 26) How to create Ruby object? ]
p => [  Objects in Ruby are created by calling  new  method of the class. It is a unique type of method and predefined in Ruby library. ]
strong => [ Syntax: ]
p => [  For more information:  Click here ]
h3 => [ 27) Explain Ruby class. ]
p => [ Each Ruby class is an instance of Ruby class. Classes in Ruby are first class objects. It always starts with a keyword class followed by the class name. ]
strong => [ Syntax: ]
p => [  For more information:  Click here ]
h3 => [ 28) Define Ruby methods. ]
p => [ Ruby method prevent us from writing the same code in a program again and again. Ruby methods are similar to functions in other languages. ]
p => [  For more information:  Click here ]
h3 => [ 29) How to use Ruby methods. ]
p => [  To use a Ruby method, we need to first define it. It is defined with  def  and  end  keyword. ]
p => [ Method name should always start with a lowercase letter. ]
strong => [ Syntax: ]
p => [  For more information:  Click here ]
h3 => [ 30) What are Ruby blocks. ]
p => [  Ruby code blocks are called closures in other programming languages. It consist of a group of codes which is always enclosed with braces or written between  do...end.  ]
p => [  For more information:  Click here ]
h3 => [ 31) In how many ways a block is written in Ruby. ]
p => [ A block is written in two ways: ]
li => [ Multi-line between do and end ]
li => [ Inline between braces {} ]
p => [ Both are same and have the same functionality. ]
p => [  For more information:  Click here ]
strong => [ syntax: ]
p => [  For more information:  Click here ]
h3 => [ 32) What is yield statement in Ruby. ]
p => [ The yield statement is used to call a block within a method with a value. ]
p => [  For more information:  Click here ]
h3 => [ 33) Explain ampersand parameter (&amp;block) in Ruby. ]
p => [ The &amp;block is a way to pass a reference (instead of a local variable) to the block to a method. ]
p => [  Here, block word after the  &amp;  is just a name for the reference, any other name can be used instead of this.  ]
p => [  For more information:  Click here ]
h3 => [ 34) Explain Ruby module. ]
p => [ Ruby module is a collection of methods and constants. A module method may be instance method or module method. They are similar to classes as they hold a collection of methods, class definitions, constants and other modules. They are defined like classes. Objects or subclasses can not be created using modules. There is no module hierarchy of inheritance. ]
p => [ Modules basically serve two purposes: ]
li => [ They act as namespace. They prevent the name clashes.  ]
li => [ They allow the mixin facility to share functionality between classes.  ]
strong => [ Syntax: ]
p => [ Module name should start with a capital letter. ]
p => [  For more information:  Click here ]
h3 => [ 35) Explain module mixins in Ruby. ]
p => [ Ruby doesn't support multiple inheritance. Modules eliminate the need of multiple inheritance using mixin in Ruby. ]
p => [ A module doesn't have instances because it is not a class. However, a module can be included within a class.  ]
p => [ When you include a module within a class, the class will have access to the methods of the module. ]
p => [  For more information:  Click here ]
h3 => [ 36) Explain Ruby strings. ]
p => [  Ruby string object holds and manipulates an arbitary sequence of bytes, typically representing characters. They are created using  String::new  or as literals. ]
p => [  For more information:  Click here ]
h3 => [ 37) How to access Ruby strings elements in an application. ]
p => [ You can access Ruby string elements in different parts with the help of square brackets []. Within square brackets write the index or string. ]
p => [  For more information:  Click here ]
h3 => [ 38) How to write multiline string in Ruby. ]
p => [ Writing multiline string is very simple in Ruby language. We will show three ways to print multiline string. ]
li => [ String can be written within double quotes.  ]
li => [ The % character is used and string is enclosed within / character.  ]
li => [ In heredoc syntax, we use &lt;&lt; and string is enclosed within word STRING.  ]
p => [  For more information:  Click here ]
h3 => [ 39) What is the use of global variable $ in Ruby? ]
p => [ The global variable is declared in Ruby that you can access it anywhere within the application because it has full scope in the application. The global variables are used in Ruby with $ prepend. ]
h3 => [ 40) What is concatenating string in Ruby. In how many ways you can create a concatenating string. ]
p => [ Ruby concatenating string implies creating one string from multiple strings. You can join more than one string to form a single string by concatenating them. ]
p => [ There are four ways to concatenate Ruby strings into single string: ]
li => [ Using plus sign in between strings. ]
li => [ Using a single space in between strings.  ]
li => [ Using &lt;&lt; sign in between strings.  ]
li => [ Using concat method in between strings. ]
p => [  For more information:  Click here ]
h3 => [ 41) What are freezing string in Ruby. ]
p => [ In most programming languages strings are immutable. It means that an existing string can't be modified, only a new string can be created out of them.  ]
p => [ In Ruby, by default strings are not immutable. To make them immutable, freeze method can be used. ]
p => [  For more information:  Click here ]
h3 => [ 42) In how many ways you can compare Ruby string? ]
p => [ Ruby strings can be compared with three operators: ]
li => [ With == operator : Returns true or false  ]
li => [ With eql? Operator : Returns true or false ]
li => [ With casecmp method : Returns 0 if matched or 1 if not matched ]
p => [  For more information:  Click here ]
h3 => [ 43) What are class libraries in Ruby? ]
p => [ Ruby class libraries contain variety of domain such as thread programming, data types, various domains. Following is a list of domains which has relevant class libraries: ]
li => [ Text processing  ]
li => [ CGI Programming  ]
li => [ Network programming  ]
li => [ GUI programming  ]
li => [ XML programming  ]
h3 => [ 44) What are Ruby arrays and how they can be created? ]
p => [ Ruby arrays are ordered collections of objects. They can hold objects like integer, number, hash, string, symbol or any other array.  ]
p => [ Its indexing starts with 0. The negative index starts with -1 from the end of the array. For example, -1 indicates last element of the array and 0 indicates first element of the array. ]
p => [ A Ruby array is created in many ways. ]
li => [ Using literal constructor [] ]
li => [ Using new class method  ]
p => [  For more information:  Click here ]
h3 => [ 45) How to access Ruby array elements? How many methods are used to access Ruby elements.? ]
p => [  Ruby array elements can be accessed using  #[]  method. You can pass one or more than one arguments or even a range of arguments.  ]
strong => [ Syntax: ]
p => [ Methods used to access Ruby elements: ]
li => [ at method ]
li => [ slice method ]
li => [ fetch method ]
li => [ first and last method ]
li => [ take method ]
li => [ drop method ]
p => [  For more information:  Click here ]
h3 => [ 46) In how many ways items can be added in an array in Ruby? ]
p => [ Ruby array elements can be added in different ways. ]
li => [ push or &lt;&lt; ]
li => [ unshift  ]
li => [ insert  ]
p => [  For more information:  Click here ]
h3 => [ 47) In how many ways items can be removed from array in Ruby? ]
p => [ Ruby array elements can be removed in different ways. ]
li => [ pop  ]
li => [ shift ]
li => [ delete  ]
li => [ uniq  ]
p => [  For more information:  Click here ]
h3 => [ 48) Explain Ruby hashes. ]
p => [ A Ruby hash is a collection of unique keys and their values. They are similar to arrays but array use integer as an index and hash use any object type. They are also called associative arrays, dictionaries or maps. ]
p => [ If a hash is accessed with a key that does not exist, the method will return nil. ]
p => [  For more information:  Click here ]
h3 => [ 49) How to create a new time instance in Ruby? ]
p => [  A new Time instance can be created with  ::new . This will use your current system's time. Parts of time like year, month, day, hour, minute, etc can also be passed. ]
p => [ While creating a new time instance, you need to pass at least a year. If only year is passed, then time will default to January 1 of that year at 00:00:00 with current system time zone.  ]
p => [  For more information:  Click here ]
h3 => [ 50) Explain Ruby ranges. What are the ways to define ranges? ]
p => [  Ruby range represents a set of values with a beginning and an end. They can be constructed using  s..e  and  s...e  literals or with  ::new . ]
p => [ The ranges which has .. in them, run from beginning to end inclusively. The ranges which has ... in them, run exclusively the end value. ]
p => [ Ruby has a variety of ways to define ranges. ]
li => [ Ranges as sequences ]
li => [ Ranges as conditions ]
li => [ Ranges as intervals ]
p => [  For more information:  Click here ]
h3 => [ 51) What are Ruby iterators? ]
p => [ Iterator is a concept used in object-oriented language. Iteration means doing one thing many times like a loop.  ]
p => [ The loop method is the simplest iterator. They return all the elements from a collection, one after the other. Arrays and hashes come in the category of collection. ]
p => [  For more information:  Click here ]
h3 => [ 52) How many iterators are there in Ruby? ]
p => [ Following iterators are there in Ruby: ]
li => [ each iterator ]
li => [ times iterator ]
li => [ upto and downto iterator ]
li => [ step iterator ]
li => [ each_line iterator ]
p => [  For more information:  Click here ]
h3 => [ 53) Name different methods for IO console in Ruby? ]
p => [ The IO console provides different methods to interact with console. The class IO provides following basic methods: ]
li => [ IO::console ]
li => [ IO#raw#raw! ]
li => [ IO#cooked  ]
li => [ IO#cooked!  ]
li => [ IO#getch ]
p => [  For more information:  Click here ]
h3 => [ 54) How to open a file in Ruby? ]
p => [ A Ruby file can be created using different methods for reading, writing or both.  ]
p => [ There are two methods to open a file in Ruby. ]
strong => [ File.new method : ]
strong => [ File.open method : ]
p => [ Difference between both the methods is that File.open method can be associated with a block while File.new method can't. ]
strong => [ Syntax: ]
p => [ Or, ]
p => [  For more information:  Click here ]
h3 => [ 55) How to read a file in Ruby? ]
p => [ There are three different methods to read a file. ]
p => [ To return a single line, following syntax is used. ]
strong => [ Syntax: ]
p => [ To return the whole file after the current position, following syntax is used. ]
strong => [ Syntax: ]
p => [ To return file as an array of lines, following syntax is used. ]
strong => [ Syntax: ]
h3 => [ 56) Explain class libraries in Ruby. ]
p => [ Ruby class libraries contain a variety of domains like thread programming, data types, and various domains. It has additional libraries evolving day by day. The following are the domains which has relevant class libraries. ]
strong => [ Text processing: ]
strong => [ CGI Programming: ]
strong => [ Network programming: ]
strong => [ GUI programming: ]
strong => [ XML programming: ]
h3 => [ 57) What is sysread method in Ruby? ]
p => [ The sysread method is also used to read the content of a file. With the help of this method you can open a file in any mode. ]
p => [  For more information:  Click here ]
h3 => [ 58) How will you rename and delete a file in Ruby? ]
p => [ Ruby files are renamed using rename method and deleted using delete mehtod. ]
p => [  To  rename  a file, following syntax is used. ]
strong => [ Syntax: ]
p => [  To  delete  a file, following syntax is used. ]
strong => [ Syntax: ]
p => [  For more information:  Click here ]
h3 => [ 59) How to check whether a directory exist or not in Ruby? ]
p => [ To check whether a directory exists or not exists? Method is used. ]
strong => [ Syntax: ]
p => [  For more information:  Click here ]
h3 => [ 60) Explain Ruby exceptions. ]
p => [ Ruby exception is an object, an instance of the class Exception or descendent of that class. When something goes wrong, Ruby program throws an exceptional behavior. By default Ruby program terminates on throwing an exception. ]
p => [  For more information:  Click here ]
h3 => [ 61) What are some built-in Ruby class exceptions. ]
p => [ Built-in subclasses of exception are as follows: ]
li => [ NoMemoryError  ]
li => [ ScriptError  ]
li => [ SecurityError  ]
li => [ SignalException ]
p => [  For more information:  Click here ]
h3 => [ 62) How an exception is handled in Ruby? ]
p => [  To handle exception, the code that raises exception is enclosed within  begin-end  block. Using rescue clauses we can state type of exceptions we want to handle. ]
p => [  For more information:  Click here ]
h3 => [ 63) Explain the use of retry statement in Ruby? ]
p => [ Usaually in a rescue clause, the exception is captured and code resumes after begin block. Using retry statement, the rescue block code can be resumed from begin after capturing an exception. ]
strong => [ Syntax: ]
p => [  For more information:  Click here ]
h3 => [ 64) Explain raise statement in Ruby? ]
p => [ The raise statement is used to raise an exception. ]
strong => [ Syntax: ]
p => [ Or, ]
p => [ Or, ]
p => [ Or, ]
p => [  For more information:  Click here ]
h3 => [ 65) Explain the use of ensure statement in Ruby? ]
p => [  There is an  ensure  clause which guarantees some processing at the end of code. The ensure block always run whether an exception is raised or not. It is placed after last rescue clause and will always executed as the block terminates.  ]
p => [ The ensure block will run at any case whether an exception arises, exception is rescued or code is terminated by uncaught exception. ]
strong => [ Syntax: ]
p => [  For more information:  Click here ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ jQuery Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
