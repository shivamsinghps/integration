
div => [ 
 ]
h1 => [ CouchDB Interview Questions ]
h3 => [ 1) What is CouchDB? ]
p => [ CouchDB is documented database server accessible through a RESTful JSON API. It is distributed, robust, incremental replication with bi-direction. It is schema-free with flat address space. ]
p => [ CouchDB is an open source NoSQL database which focuses on ease of use. It was developed by Apache. It is fully compatible with the web. CouchDB uses JSON to store data, JavaScript as its query language to transform the documents, using MapReduce, and HTTP for an API. ]
p => [ CouchDB features are as follows: ]
li => [ CouchDB can be replicated across multiple server instances. ]
li => [ CouchDB has various libraries for the language of your choice. ]
li => [ It has fast indexing and retrieval ]
li => [ It has a REST-like interface for document insertion, updates, recovery, and deletion. ]
li => [ CouchDB supports JSON-based document format, i.e., easily translatable across different languages.  ]
p => [ Latest release: Version 2.2.0 on Aug 8, 2018 ]
h3 => [ 2) In which language CouchDB is written? ]
p => [ CouchDB is written in Erlang. It is a concurrent, functional programming language mainly focuses on fault tolerance (Erlang programming language also used for build massively scalable soft real-time system with requirements on high availability). ]
p => [ Some of its parts are written in C language too. As we know that CouchDB supports view server and the views (form map or reduce) are written in JavaScript per default (but can also be written in Erlang). Therefore CouchDB requires the JavaScript engine SpiderMonkey (which is written in C language). ]
h3 => [ 3) In which language CouchDB's early work was started? ]
p => [ CouchDB early work was started in C++. But later, it was replaced by Erlang OTP platform. ]
p => [ Erlang has proven as an excellent match for this project. ]
h3 => [ 4) How CouchDB is different from other SQL databases? ]
p => [ CouchDB is not a relational database. Some people think that it is a replacement for a relational database, but it is completely different from SQL databases. It is fast, efficient and faults tolerant. ]
th => [ Couch database ]
th => [ SQL Databases ]
td => [ It is a NoSQL database and likes manual transmission. ]
td => [ It is a SQL database and likes automatic transmission. ]
td => [ Implemented in Erlang programming language ]
td => [ Implemented in C, C++ programming languages. ]
strong => [ Structure of NoSQL database: ]
h3 => [ 5) Is CouchDB used in the Software industry? ]
p => [ CouchDB is very popular now a day, and many companies are using CouchDB. ]
p => [ These are the essential features of CouchDB: ]
li => [ CouchDB can be replicated across multiple server instances. ]
li => [ CouchDB has various libraries for the language of your choice. ]
li => [ It has fast indexing and retrieval ]
li => [ It has a REST-like interface for document insertion, updates, recovery, and deletion. ]
li => [ CouchDB supports JSON-based document format, i.e., easily translatable across different languages. ]
p => [ That's why the software companies use CouchDB. ]
strong => [ Here we have a list of Top companies which uses CouchDB: ]
th => [ Company ]
th => [ Website ]
th => [ Revenue ]
th => [ Company size ]
th => [ Country ]
td => [ GrubHub Inc. ]
td => [ grubhub.com ]
td => [ 200M-1000M ]
td => [ 1000-5000 ]
td => [ United States ]
td => [ Hothead Games, Inc. ]
td => [ hotheadgames.com ]
td => [ 10M-15M ]
td => [ 50-200 ]
td => [ Canada ]
td => [ Ultimate software group Inc. ]
td => [ Ultimatesoftware.com ]
td => [ 200M-1000M ]
td => [ 1000-5000 ]
td => [ United States ]
td => [ SLALOM,LLC ]
td => [ Slalom.com ]
td => [ 200M-1000M ]
td => [ 5000-10000 ]
td => [ United States ]
td => [ GenCorp technologies ]
td => [ Credera.com ]
td => [ 10M-50M	 ]
td => [ 200-500 ]
td => [ United States ]
h3 => [ 6) What is the difference between CouchDB and MongoDB? ]
p => [ These are the following differences: ]
th => [ Criteria ]
th => [ CouchDB ]
th => [ MongoDB ]
td => [ Interface ]
td => [ REST/HTTP ]
td => [ TCP/IP Custom Protocol ]
td => [ Object Storage ]
td => [ Record is stored in documents in the database. ]
td => [ Record is stored in collections in the database. ]
td => [ Replication ]
td => [ It follows Master-Master replication. ]
td => [ It follows Master-Slave replication. ]
td => [ Query Method ]
td => [ CouchDB follows Map/Reduce query method. (JavaScript+others) ]
td => [ MongoDB follows Map/Reduce (JavaScript) creating collection + object-based query language. ]
td => [ Data Model ]
td => [ It follows the document-oriented model and data is presented in JSON format. ]
td => [ Document-Oriented (BSON) ]
td => [ Concurrency ]
td => [ MVVC (Multi-version concurrency control). ]
td => [ Update-in-place ]
td => [ Preference ]
td => [ CouchDB favors availability ]
td => [ MongoDB favors Consistency ]
td => [ Performance consistency ]
td => [ In CouchDB, data is safer than MongoDB ]
td => [ In MongoDB, the database contains collections and collection contains documents.It is faster than CouchDB. ]
td => [ Written in ]
td => [ It is written in Erlang. ]
td => [ It is written in C++. ]
p => [ MongoDB is faster than CouchDB, and scalability is also better of the MongoDB. ]
p => [ CouchDB runs on different operating system like Android, iOS platform but MongoDB doesn't support mobile OS. Mongo DB is better as compare to CouchDB for rapid growth when the structure is not clearly defined from the beginning. ]
h3 => [ 7) What is the similarity between MongoDB and CouchDB? ]
p => [ The similarity between MongoDB and CouchDB are: ]
li => [ MongoDB and CouchDB both are the document-oriented databases. ]
li => [ MongoDB and CouchDB both are the best examples of an open-source NoSQL database. i.e., both are Schema-free.
 ]
li => [ MongoDB and CouchDB both support JavaScript, can be used in queries, support aggregation functions such as MapReduce and sent the database to execute it. ]
li => [ MongoDB and CouchDB both support common programming languages C, C#, Erlang, Java, JavaScript, Ruby, Python, Haskell, PHP, Perl, Smalltalk, etc. ]
p => [ These are some common functionality of CouchDB and MongoDB. ]
h3 => [ 8) What are the main features of CouchDB? ]
strong => [ JSON Documents ]
strong => [ RESTful Interface ]
strong => [ N-Master Replication ]
strong => [ Built for Offline ]
strong => [ Replication Filters ]
strong => [ ACID semantics ]
strong => [ Document storage ]
strong => [ Eventually consistency ]
strong => [ Authentication and Session Support ]
strong => [ Security ]
strong => [ Validation ]
strong => [ Map/Reduce List and Show ]
h3 => [ 9) Why Does CouchDB not use Mnesia? ]
p => [ There are many reasons behind CouchDB not using Mnesia: ]
li => [ It provides a storage limitation of 2 gigs per file. ]
li => [ It requires validation and fixup cycle after a crash or power failure, so even if the size limitation is lifted, the fixup time on large files is prohibitive. ]
li => [ Mnesia has some useful features, but features of Mnesia aren't really useful for CouchDB. ]
li => [ Mnesia is not a general-purpose, large-scale database. It works best as a configuration type database. ]
li => [ Mnesia works best as a configuration type database. It is necessary for the normal operations. The type where the data is not central to the function of the application, but necessary for normal operation of it. ]
li => [ Things that need to update, configure and often reconfigure like a network router, HTTP proxies, etc. whose configuration data is rarely huge. ]
h3 => [ 10) How would you use transactions with CouchDB? ]
p => [ CouchDB uses an "Optimistic concurrency" model. In this model, if you send a document version along with your update, CouchDB rejects the change if the current document version doesn't match to your sent update. ]
p => [ So, you have to re-frame many normal transaction based scenarios for CouchDB. It's helpful to approach problems from a higher level, rather than attempting to mold Couch to a SQL based world.  ]
p => [ If you have a document describing the item, and it includes a field for "Quantity available", you can handle concurrency issues: ]
p => [ First of all recover document, note down property that sent by CouchDB along with database, after that, Decrement the quantity field, if it's greater than zero. After that, send the updated document back using the _rev property. Check, If the _rev matches the currently stored number, be done else if there is a conflict when _rev is not matched then recover the newest document version. ]
strong => [ For example: ]
p => [ I would like to take a ("master product") document that contains all the data information like name, picture description, price, etc.  ]
p => [ Here we have to create to a field (product-key and, Claimed-by) by adding a new document inventory-ticket, if you are spelling a model of a hammer and have 20 items to sell, you might have documents with keys like hammer-1, hammer-2 to represent each one individually. ]
h4 => [ Now, I would like to create a view that gives a list of available hammer ]
p => [ This gives me list of available tickets with their product_key, I could grab a group of these when someone wants to buy hammer then iterate through the sending updates until I successfully claim one. ]
strong => [ Reduce ]
strong => [ This gives me a list of total unclaimed inventory_ticket items. ]
p => [  This example represents that  transaction with CouchDB is possible that it substantially reduces conflicting updates, and cut down on the needs to respond to a conflict with the new updates. In this model, you won't have multiple users attempting to change data in primary product entry. When you have multiple users for a single ticket, then you have to identify those users who want to retake it by your view, ignore those, and you move to the next ticket and try again. ]
h3 => [ 11) As CouchDB is written in Erlang and Erlang is known as slow to adopt Unicode. So, if it creates a problem for CouchDB? ]
p => [ CouchDB uses Erlang binary internally. So, data come to CouchDB is always UTF-8 encoded. There is no problem occurred. ]
h3 => [ 12) What is the usage of CouchDB? ]
p => [ CouchDB facilitates developers to write a client-side application which interacts directly to the Couch without the need of server-side middle layer. It reduces the time of development and handling replication. Its database is stored locally so the application can run almost no latency. The main objective of CouchDB is to run on the internet applications and the connected devices through which we access the internet. ]
li => [ CouchDB has an HTTP-based REST API, which makes communication with the database very easy. ]
li => [ CouchDB has the simple structure of HTTP resources and methods (GET, PUT, and DELETE) that are easy to understand and use. ]
li => [ In CouchDB, data is stored in the flexible document-based structure so, there is no need to worry about the structure of the data. ]
li => [ CouchDB facilitates users with powerful data mapping, which allows querying, combining, and filtering the information. ]
li => [ CouchDB provides easy-to-use replication, using which you can copy, share, and synchronize the data between databases and machines. ]
h3 => [ 13) What do you know about couchdbKit? ]
p => [ The couchdbKit provides a framework for your Python application to access and manage Python applications. It offers features to easily access and manage CouchDB by a client, allow to manage databases, Couch database server, doc management, and view access.  ]
p => [ Objects mostly reflect python object for service. Server and data objects could be used for example. ]
strong => [ Steps to install couchdbkit: ]
li => [ Couchdbkit requires python 2.x superior to 2.6 ]
a => [  http://python-distribute.org/distribute_setup.py ]
strong => [ $ ]
strong => [ $ ]
strong => [ To install or upgrade to a latest released version of couchdbkit ]
p => [ $ pip install couchdbkit ]
h3 => [ 14) Can Views update documents or databases? ]
p => [ No. Views are always read-only for databases and their documents. ]
p => [ Views are used for the following purpose: ]
li => [ It filters the document from the database to find relevant data for a particular process. ]
li => [ Extracting data from documents and present it in a specific order. ]
li => [ Building indexes to find the document by any value or structure that resides in them and use these indexes to represent the relationship between documents. ]
li => [ Finally, with views, you can make all sorts of calculations on the data in your documents ]
strong => [ For example: ]
p => [ If documents represent your company's financial transactions, a view can answer the question of what the spending was in the last week, month, or year. ]
h3 => [ 15) What platforms are supported in CouchDB? ]
p => [ Most POSIX systems are supported like GNU/Linux and OS X. Window is not officially supported but it should work. ]
h3 => [ 16) What is the use of sequences? How do you do sequences? ]
p => [ Sequences are often used to ensure unique identifiers for each row in a database table. Sequences are hard to realize with replication. CouchDB generates unique ids from its own, and you can specify your own as well, so you don't need a sequence here. If you use a sequence for something else, you might find a way to express in CouchDB in another way.  ]
h3 => [ 17) How can you do replication? ]
p => [ Replication: Replication synchronizes two copies of the same database; these databases live on the same server or can be live on two different servers. If you change one copy of the database, replication will send the details to another copy. ]
p => [ For replication, first you have to send request of HTTP to CouchDB with a source, and a target database and CouchDB will send the changes from source to target. ]
p => [ Let's see, how replication looks like: ]
p => [ Here $source_database and $target_database can be the names of local database or full URIs of remote databases. Both databases need to be created before they can be replicated from or to. ]
h3 => [ 18) Is it possible to communicate to CouchDB without going through HTTP/ API? ]
p => [ CouchDB's data model and internal API map the REST/HTTP model in a very simple way that any other API would inherit some features of HTTP. However, there is a plan to refractor CouchDB's internals to provide a documented Erlang API. ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ jQuery Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
