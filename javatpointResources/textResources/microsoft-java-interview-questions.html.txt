
div => [ 
 ]
h1 => [ Microsoft Java Interview Questions ]
p => [  For Java interviews,  Microsoft  asks questions about the data structures, algorithms, oops concepts, etc. The interviewer never asks questions related to Java only. Interviewer can also ask questions from  Array, LinkedList, Stack, Queue, String, Patterns , and  Binary tree  etc. The interview can also ask questions from software designing and testing. ]
p => [ For the Java Microsoft interview, we should also have proper knowledge of the project on which we worked before. You should have knowledge of the flow of the code, how the database is connected with the project, table structure, primary key, foreign key, etc. The top 30 Microsoft Java interview questions are given below: ]
h3 => [ 1) How can we check whether the Binary Tree is BST or not? ]
p => [ In order to check whether the Binary Tree is BST or not, we simply check whether the left child node is smaller than the current node or not. We also check whether the right child node is greater than the current node or not. For a BST Binary tree, the left child should have smaller, and the right child should have greater value from its parent note.  ]
h3 => [ 2) How to find an element in a sorted array of infinite size? ]
p => [ In order to find an element from an infinite sorted array, we set the index at position 100. If the element which we need to found is less from the index, perform the binary search for the last 100 items. Else we set the index at position 200. We set the index by 100 until the item is greater.  ]
h3 => [ 3) Write a program to find the longest substring without repeating characters. ]
strong => [ LongestSubString.java ]
strong => [ Output: ]
h3 => [ 4) How can we reverse a linked list of size n? ]
p => [ Each element of a linked list stores the address of its next element or node. In order to reverse a linked list, we need to store the address of the previous node in each node of the linked list. We can reverse the linked list by using recursion or by using iteration. We use the following steps to reverse a linked list: ]
li => [ We first store the head.next in a temporary pointer ptr. ]
strong => [ the reverseLL(head.next) ]
strong => [ the reverseLL(head.next) ]
strong => [ temp ]
strong => [ next = head ]
strong => [ ptr ]
strong => [ temp ]
strong => [ temp ]
h3 => [ 5) How can we remove duplicates from a string? ]
p => [  There are various ways through which we can remove duplicates from a string. We can do it by simply adding only distinct characters in the character array, by using  BST , by using  sorting , by using  hashing , by using  the unordered_map STL  method, or using  indexOf()  method. Below is a simple example of removing duplicates from a string. ]
strong => [ RemoveDuplicates.java ]
strong => [ Output: ]
h3 => [ 6) How can we merge two unsorted arrays? ]
p => [ There are two ways through which we can merge two unsorted arrays in a sorted manner. In the first way, we simply concatenate both the arrays and then sort them by using any sorting technique. In a second way, we sort both the arrays and then we merge them. Let's understand the first way of merging two unsorted arrays: ]
strong => [ MergeUnsortedArrays.java ]
strong => [ Output: ]
h3 => [ 7) We have two linked lists, which basically represent two big numbers. Write a function that finds the sum of both the numbers and store it into the third list. ]
h3 => [ 8) Write an algorithm to build a tree from given Inorder and Preorder traversals. ]
strong => [ Preorder ]
li => [ From the picked element, we create a new tree node N. ]
strong => [ Inorder ]
li => [ We call the constructTree() method for all the elements that are available before pos and create a tree as a left subtree of node N. ]
li => [ We call the constructTree() method for all the elements that are available after pos and create a tree as a right subtree of node N. ]
li => [ At last, we return node N. ]
h3 => [ 9) Write logic for finding the length of the longest string from a string that comprises consecutive characters. ]
strong => [ FinalConsSubString.java ]
strong => [ Output: ]
h3 => [ 10) There is an array having a duplicate for each element in the array except for two elements. Write logic find these two elements. ]
p => [  We can easily find these two elements from the array by iterating it using for loop and checking whether element  E  is presented in the remaining elements of the array or not. If the element is not found, we simply store it in another array and display it on the screen. ]
p => [ Let's implement the logic for the above theory. ]
strong => [ FindUniqueElements.java ]
strong => [ Output: ]
h3 => [ 11) Write logic to find common elements from three arrays. ]
strong => [ FindCommonElements.java ]
strong => [ Output: ]
h3 => [ 12) Like data types, can we typecast an object? Explain. ]
p => [  Yes, we can typecast and object in Java. There are basically two ways to typecast an object, i.e.,  Upcasting  and  Downcasting. ]
p => [  Upcasting  is a type of object typecasting in which  a child class object  is typecast into a parent class object. It is also known as  Generalization  or  Widening . ]
strong => [ Syntax: ]
p => [  Downcasting  is another type of object typecasting in which a  parent class reference object  is assigned to the child class object. In Java, Downcasting is possible for limited scenarios. ]
strong => [ Syntax: ]
p => [  To learn more about object typecasting,  click here . ]
h3 => [ 13) How can we determine whether a linked list contains a loop or cycle or not? ]
p => [  We use two pointers, i.e.,  fast  and  slow  at the time of iterating over the linked list. The slow and fast pointers move two and one nodes in each iteration, respectively. If the linked list contains a cycle, both pointers will meet at the same point during iteration. ]
p => [ If both the pointers point to null, the linked list doesn't contain any loop or cycle in it. ]
h3 => [ 14) What is double-checked locking in Singleton? ]
p => [  Double-checked locking of Singleton  is a way to ensure that only a single instance of a Singleton class is created through an application life cycle. The double-checked locking means that the code checks for an existing instance of Singleton class twice with and without locking to double ensure that no more than one instance of Singleton gets created. ]
h3 => [ 15) What are the scenarios in which we use the transient variable in Java? ]
p => [  A transient variable is a special type of variable in Java that is initialized during de-serialization with its default value. At the time of  Serialization , the value of the transient variable is not serialized. ]
p => [  In order to prevent any object from being serialized, we use the  transient variable . We can easily create a transient variable by using the  transient  keyword. ]
h3 => [ 16) Explain volatile in Java.  ]
p => [  In Java,  volatile  is a keyword that is intended to address variable visibility problems. It is another way of making a class thread-safe. The thread-safe means that multiple threads can use a method or a class instance without any problem. ]
h3 => [ 17) Can we override the private method in Java? ]
p => [ We cannot override the private methods because we cannot access the private methods in the same way as non-private methods. The method overriding is possible in the child class only, and we cannot access the private methods in the child class. ]
h3 => [ 18) Explain the difference between HashTable and HashMap in Java. ]
th => [ S.No. ]
th => [ HashTable ]
th => [ HashMap ]
td => [ 1. ]
td => [ It is not synchronized. ]
td => [ It is synchronized. ]
td => [ 2. ]
td => [ It is thread-safe. ]
td => [ It is not thread-safe. ]
td => [ 3. ]
td => [ It doesn't contain any null key or value. ]
td => [ It contains a single null key and multiple null values. ]
td => [ 4. ]
td => [ It is slow. ]
td => [ It is very fast in comparison to Hashtable. ]
td => [ 5. ]
td => [ It inherits Dictionary class. ]
td => [ It inherits AbstractMap class. ]
h3 => [ 19) Give the name of any two methods which we can override for an Object to be used as the key in HashMap. ]
p => [ The equals() and the hashcode() are two methods that we can override for an object to be used as the key in HashMap. ]
h3 => [ 20) Differentiate LinkedList and ArrayList in Java. ]
th => [ S.No. ]
th => [ LinkedList ]
th => [ ArrayList ]
td => [ 1. ]
td => [ LinkedList internally uses doubly linked list for storing elements. ]
td => [ ArrayList internally uses a dynamic array for storing the elements. ]
td => [ 2. ]
td => [ Manipulation with LinkedList is faster because of using doubly linked list. ]
td => [ Manipulation with ArrayList is slow because of using array internally. ]
td => [ 3. ]
td => [ It is faster in comparison to the ArrayList. ]
td => [ It implements the List interface only, so it acts as a list. ]
td => [ 4. ]
td => [ It is good for manipulation of data. ]
td => [ It is efficient to store and access data. ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
