
div => [ 
 ]
h1 => [ 300 Java interview questions | Set 2 ]
a => [ 1 ]
a => [ 2 ]
a => [ 3 ]
a => [ 4 ]
a => [ 5 ]
h2 => [ Core Java - OOPs: Polymorphism Interview Questions ]
h3 => [ 101) What is the difference between compile-time polymorphism and runtime polymorphism? ]
p => [ There are the following differences between compile-time polymorphism and runtime polymorphism. ]
th => [ SN ]
th => [ compile-time polymorphism ]
th => [ Runtime polymorphism ]
td => [ 1 ]
td => [ In compile-time polymorphism, call to a method is resolved at compile-time. ]
td => [ In runtime polymorphism, call to an overridden method is resolved at runtime. ]
td => [ 2 ]
td => [ It is also known as static binding, early binding, or overloading. ]
td => [ It is also known as dynamic binding, late binding, overriding, or dynamic method dispatch. ]
td => [ 3 ]
td => [ Overloading is a way to achieve compile-time polymorphism in which, we can define multiple methods or constructors with different signatures. ]
td => [ Overriding is a way to achieve runtime polymorphism in which, we can redefine some particular method or variable in the derived class. By using overriding, we can give some specific implementation to the base class properties in the derived class. ]
td => [ 4 ]
td => [ It provides fast execution because the type of an object is determined at compile-time. ]
td => [ It provides slower execution as compare to compile-time because the type of an object is determined at run-time. ]
td => [ 5 ]
td => [ Compile-time polymorphism provides less flexibility because all the things are resolved at compile-time. ]
td => [ Run-time polymorphism provides more flexibility because all the things are resolved at runtime. ]
h3 => [ 102) What is Runtime Polymorphism? ]
p => [ Runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time. In this process, an overridden method is called through the reference variable of a superclass. The determination of the method to be called is based on the object being referred to by the reference variable. ]
a => [ Test it Now ]
p => [ Output: ]
p => [ In this process, an overridden method is called through the reference variable of a superclass. The determination of the method to be called is based on the object being referred to by the reference variable. ]
a => [ More details. ]
h3 => [ 103) Can you achieve Runtime Polymorphism by data members? ]
p => [ No, because method overriding is used to achieve runtime polymorphism and data members cannot be overridden. We can override the member functions but not the data members. Consider the example given below.
 ]
a => [ Test it Now ]
p => [ Output: ]
a => [ More details. ]
h3 => [ 104) What is the difference between static binding and dynamic binding? ]
p => [ In case of the static binding, the type of the object is determined at compile-time whereas, in the dynamic binding, the type of the object is determined at runtime. ]
strong => [ Static Binding ]
strong => [ Dynamic Binding ]
a => [ More details. ]
h3 => [ 105) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [ It is an example of Dynamic method dispatch. The type of reference variable b is determined at runtime. At compile-time, it is checked whether that method is present in the Base class. In this case, it is overridden in the child class, therefore, at runtime the derived class method is called. ]
h3 => [ 106) What is Java instanceOf operator? ]
p => [ The instanceof in Java is also known as type comparison operator because it compares the instance with type. It returns either true or false. If we apply the instanceof operator with any variable that has a null value, it returns false. Consider the following example. ]
a => [ Test it Now ]
strong => [ Output ]
p => [ An object of subclass type is also a type of parent class. For example, if Dog extends Animal then object of Dog can be referred by either Dog or Animal class. ]
h2 => [ Core Java - OOPs Concepts: Abstraction Interview Questions ]
h3 => [ 107) What is the abstraction? ]
p => [ Abstraction is a process of hiding the implementation details and showing only functionality to the user. It displays just the essential things to the user and hides the internal information, for example, sending SMS where you type the text and send the message. You don't know the internal processing about the message delivery. Abstraction enables you to focus on what the object does instead of how it does it. Abstraction lets you focus on what the object does instead of how it does it. ]
p => [ In Java, there are two ways to achieve the abstraction. ]
li => [ Abstract Class ]
li => [ Interface ]
a => [ More details. ]
h3 => [ 108) What is the difference between abstraction and encapsulation? ]
p => [ Abstraction hides the implementation details whereas encapsulation wraps code and data into a single unit. ]
a => [ More details. ]
h3 => [ 109) What is the abstract class? ]
p => [ A class that is declared as abstract is known as an abstract class. It needs to be extended and its method implemented. It cannot be instantiated. It can have abstract methods, non-abstract methods, constructors, and static methods. It can also have the final methods which will force the subclass not to change the body of the method. Consider the following example. ]
a => [ Test it Now ]
strong => [ Output ]
a => [ More details. ]
h3 => [ 110) Can there be an abstract method without an abstract class? ]
p => [ No, if there is an abstract method in a class, that class must be abstract. ]
h3 => [ 111) Is the following program written correctly? If yes then what will be the output of the program? ]
p => [ Yes, the program is written correctly. The Main class provides the definition of abstract method multiply declared in abstract class Calculation. The output of the program will be: ]
strong => [ Output ]
h3 => [ 112) Can you use abstract and final both with a method? ]
p => [ No, because we need to override the abstract method to provide its implementation, whereas we can't override the final method. ]
h3 => [ 113) Is it possible to instantiate the abstract class? ]
p => [ No, the abstract class can never be instantiated even if it contains a constructor and all of its methods are implemented. ]
h3 => [ 114) What is the interface? ]
p => [ The interface is a blueprint for a class that has static constants and abstract methods. It can be used to achieve full abstraction and multiple inheritance. It is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.
In other words, you can say that interfaces can have abstract methods and variables. Java Interface also represents the IS-A relationship. It cannot be instantiated just like the abstract class. However, we need to implement it to define its methods. Since Java 8, we can have the default, static, and private methods in an interface. ]
a => [ More details. ]
h3 => [ 115) Can you declare an interface method static? ]
p => [ No, because methods of an interface are abstract by default, and we can not use static and abstract together.
 ]
h3 => [ 116) Can the Interface be final? ]
p => [ No, because an interface needs to be implemented by the other class and if it is final, it can't be implemented by any class. ]
h3 => [ 117) What is a marker interface? ]
p => [ A Marker interface can be defined as the interface which has no data member and member functions. For example, Serializable, Cloneable are marker interfaces. The marker interface can be declared as follows. ]
h3 => [ 118) What are the differences between abstract class and interface? ]
th => [ Abstract class ]
th => [ Interface ]
td => [ An abstract class can have a method body (non-abstract methods). ]
td => [  The interface has only abstract methods. ]
td => [ An abstract class can have instance variables. ]
td => [ An interface cannot have instance variables. ]
td => [ An abstract class can have the constructor. ]
td => [ The interface cannot have the constructor. ]
td => [ An abstract class can have static methods. ]
td => [ The interface cannot have static methods. ]
td => [ You can extend one abstract class. ]
td => [ You can implement multiple interfaces. ]
strong => [ can provide the implementation of the interface ]
strong => [ can't provide the implementation of the abstract class ]
strong => [ abstract keyword ]
strong => [ interface keyword ]
strong => [ abstract class ]
strong => [ interface ]
strong => [ abstract class ]
strong => [ extends ]
strong => [ interface class ]
strong => [ implements ]
strong => [ abstract class ]
td => [ Members of a Java interface are public by default.  ]
strong => [ Example: ]
strong => [ Example: ]
h3 => [ 119) Can we define private and protected modifiers for the members in interfaces? ]
p => [ No, they are implicitly public. ]
h3 => [ 120) When can an object reference be cast to an interface reference?  ]
p => [ An object reference can be cast to an interface reference when the object implements the referenced interface. ]
h3 => [ 121) How to make a read-only class in Java?  ]
p => [ A class can be made read-only by making all of the fields private. The read-only class will have only getter methods which return the private property of the class to the main method. We cannot modify this property because there is no setter method available in the class. Consider the following example. ]
h3 => [ 122) How to make a write-only class in Java?  ]
p => [ A class can be made write-only by making all of the fields private. The write-only class will have only setter methods which set the value passed from the main method to the private fields. We cannot read the properties of the class because there is no getter method in this class. Consider the following example. ]
h3 => [ 123) What are the advantages of Encapsulation in Java? ]
p => [ There are the following advantages of Encapsulation in Java? ]
li => [ By providing only the setter or getter method, you can make the class read-only or write-only. In other words, you can skip the getter or setter methods. ]
li => [ It provides you the control over the data. Suppose you want to set the value of id which should be greater than 100 only, you can write the logic inside the setter method. You can write the logic not to store the negative numbers in the setter methods. ]
li => [ It is a way to achieve data hiding in Java because other class will not be able to access the data through the private data members. ]
li => [ The encapsulate class is easy to test. So, it is better for unit testing. ]
li => [ The standard IDE's are providing the facility to generate the getters and setters. So, it is easy and fast to create an encapsulated class in Java. ]
h2 => [ Core Java - OOPs Concepts: Package Interview Questions ]
h3 => [ 124) What is the package? ]
p => [ A package is a group of similar type of classes, interfaces, and sub-packages. It provides access protection and removes naming collision. The packages in Java can be categorized into two forms, inbuilt package, and user-defined package. There are many built-in packages such as Java, lang, awt, javax, swing, net, io, util, sql, etc. Consider the following example to create a package in Java.
 ]
a => [ More details. ]
h3 => [ 125) What are the advantages of defining packages in Java? ]
p => [ By defining packages, we can avoid the name conflicts between the same class names defined in different packages. Packages also enable the developer to organize the similar classes more effectively. For example, one can clearly understand that the classes present in java.io package are used to perform io related operations. ]
h3 => [ 126) How to create packages in Java? ]
p => [  If you are using the programming IDEs like Eclipse, NetBeans, MyEclipse, etc. click on  file-&gt;new-&gt;project  and eclipse will ask you to enter the name of the package. It will create the project package containing various directories such as src, etc.
If you are using an editor like notepad for java programming, use the following steps to create the package.
 ]
strong => [ package_name ]
strong => [ class_name ]
strong => [ your_class_name.java ]
li => [ Now compile the file by running the following command on the terminal. ]
p => [  The above command creates the package with the name  package_name  in the present working directory. ]
li => [ Now, run the class file by using the absolute class file name, like following. ]
h3 => [ 127) How can we access some class in another class in Java? ]
p => [ There are two ways to access a class in another class. ]
strong => [ By using the fully qualified name: ]
strong => [ By using the relative path ]
h3 => [ 128) Do I need to import java.lang package any time? Why? ]
p => [ No. It is by default loaded internally by the JVM. ]
h3 => [ 129) Can I import same package/class twice? Will the JVM load the package twice at runtime? ]
p => [ One can import the same package or the same class multiple times. Neither compiler nor JVM complains about it. However, the JVM will internally load the class only once no matter how many times you import the same class. ]
h3 => [ 130) What is the static import? ]
p => [ By static import, we can access the static members of a class directly, and there is no to qualify it with the class name. ]
a => [ More details. ]
h2 => [ Java: Exception Handling Interview Questions ]
p => [ There is given a list of exception handling interview questions with answers. If you know any exception handling interview question, kindly post it in the comment section. ]
h3 => [ 131) How many types of exception can occur in a Java program? ]
p => [ There are mainly two types of exceptions: checked and unchecked. Here, an error is considered as the unchecked exception. According to Oracle, there are three types of exceptions: ]
strong => [ Checked Exception: ]
strong => [ Unchecked Exception: ]
strong => [ Error: ]
h3 => [ 132) What is Exception Handling? ]
p => [ Exception Handling is a mechanism that is used to handle runtime errors. It is used primarily to handle checked exceptions. Exception handling maintains the normal flow of the program. There are mainly two types of exceptions: checked and unchecked. Here, the error is considered as the unchecked exception.
 ]
a => [ More details. ]
h3 => [ 133) Explain the hierarchy of Java Exception classes?  ]
p => [ The java.lang.Throwable class is the root class of Java Exception hierarchy which is inherited by two subclasses: Exception and Error. A hierarchy of Java Exception classes are given below: ]
h3 => [ 134) What is the difference between Checked Exception and Unchecked Exception? ]
h3 => [ 1) Checked Exception ]
p => [ 
The classes that extend Throwable class except RuntimeException and Error are known as checked exceptions, e.g., IOException, SQLException, etc. Checked exceptions are checked at compile-time.
 ]
h3 => [ 2) Unchecked Exception ]
p => [ 
The classes that extend RuntimeException are known as unchecked exceptions, e.g., ArithmeticException, NullPointerException, etc. Unchecked exceptions are not checked at compile-time.
 ]
a => [ More details. ]
h3 => [ 135) What is the base class for Error and Exception?  ]
p => [ The Throwable class is the base class for Error and Exception. ]
h3 => [ 136) Is it necessary that each try block must be followed by a catch block? ]
p => [ It is not necessary that each try block must be followed by a catch block. It should be followed by either a catch block OR a finally block. So whatever exceptions are likely to be thrown should be declared in the throws clause of the method. Consider the following example. ]
strong => [ Output: ]
h3 => [ 137) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [ ArithmaticException is the subclass of Exception. Therefore, it can not be used after Exception. Since Exception is the base class for all the exceptions, therefore, it must be used at last to handle the exception. No class can be used after this. ]
h3 => [ 138) What is finally block? ]
p => [ The "finally" block is used to execute the important code of the program. It is executed whether an exception is handled or not. In other words, we can say that finally block is the block which is always executed. Finally block follows try or catch block. If you don't handle the exception, before terminating the program, JVM runs finally block, (if any). The finally block is mainly used to place the cleanup code such as closing a file or closing a connection. Here, we must know that for each try block there can be zero or more catch blocks, but only one finally block. The finally block will not be executed if program exits(either by calling System.exit() or by causing a fatal error that causes the process to abort). ]
a => [  More details. ]
h3 => [ 139) Can finally block be used without a catch? ]
p => [  Yes, According to the definition of finally block, it must be followed by a try or catch block, therefore, we can use try block instead of catch.  More details. 
 ]
h3 => [ 140) Is there any case when finally will not be executed? ]
p => [  Finally block will not be executed if program exits(either by calling System.exit() or by causing a fatal error that causes the process to abort). More details. ]
h3 => [ 141) What is the difference between throw and throws? ]
th => [ throw keyword ]
th => [ throws keyword ]
strong => [ throw ]
strong => [ throws ]
td => [ 2) The checked exceptions cannot be propagated with throw only. ]
td => [ The checked exception can be propagated with throws ]
strong => [ throw ]
strong => [ throws ]
strong => [ throw ]
strong => [ throws ]
td => [ 5) You cannot throw multiple exceptions. ]
td => [ You can declare multiple exceptions, e.g., public void method()throws IOException, SQLException. ]
a => [ More details. ]
h3 => [ 142) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [ In Java, the throwable objects can only be thrown. If we try to throw an integer object, The compiler will show an error since we can not throw basic data type from a block of code. ]
h3 => [ 143) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [ 
The object of Calculation is thrown from the try block which is caught in the catch block. The add() of Calculation class is called with the integer values 10 and 20 by using the object of this class. Therefore there sum 30 is printed. The object of the Main class can only be thrown in the case when the type of the object is throwable. To do so, we need to extend the throwable class.
 ]
h3 => [ 144) Can an exception be rethrown? ]
p => [ Yes. ]
h3 => [ 145) Can subclass overriding method declare an exception if parent class method doesn't throw an exception? ]
p => [ Yes but only unchecked exception not checked. ]
a => [ More details. ]
h3 => [ 146) What is exception propagation? ]
p => [ An exception is first thrown from the top of the stack and if it is not caught, it drops down the call stack to the previous method, If not caught there, the exception again drops down to the previous method, and so on until they are caught or until they reach the very bottom of the call stack. This procedure is called exception propagation. By default, checked exceptions are not propagated. ]
a => [ Test it Now ]
strong => [ Output: ]
a => [ More details. ]
h3 => [ 147) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [  In the main method, a() of Main is called which prints a message and call b(). The method b() prints some message and then call c(). The method c() throws an exception which is handled by the catch block of method b. However, It propagates this exception by using  throw Exception()  to be handled by the method a(). As we know, finally block is always executed therefore the finally block in the method b() is executed first and prints a message. At last, the exception is handled by the catch block of the method a(). ]
h3 => [ 148) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [  The instance variable a of class Calculation is initialized to 10 using the class constructor which is called while instantiating the class. The add method is called which returns an integer value result. In add() method, a is incremented by 10 to be 20. Then, in the first try block, 10 is again incremented by 10 to be 30. In the second try block, a is multiplied by 10 to be 300. The second try block throws the exception which is caught by the catch block associated with this try block. The catch block again alters the value of a by decrementing it by 10 to make it 290. Thus the add() method returns 290 which is assigned to result. However, the catch block associated with the outermost try block will never be executed since there is no exception which can be handled by this catch block. ]
h2 => [ Java: String Handling Interview Questions ]
p => [ There is given a list of string handling interview questions with short and pointed answers. If you know any string handling interview question, kindly post it in the comment section. ]
h3 => [ 149) What is String Pool? ]
p => [ String pool is the space reserved in the heap memory that can be used to store the strings. The main advantage of using the String pool is whenever we create a string literal; the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. Therefore, it saves the memory by avoiding the duplicacy. ]
h3 => [ 150) What is the meaning of immutable regarding String? ]
p => [ 
The simple meaning of immutable is unmodifiable or unchangeable. In Java, String is immutable, i.e., once string object has been created, its value can't be changed. Consider the following example for better understanding. ]
a => [ Test it Now ]
strong => [ Output: ]
a => [ More details. ]
h3 => [ 151) Why are the objects immutable in java? ]
p => [ 
Because Java uses the concept of the string literal. Suppose there are five reference variables, all refer to one object "sachin". If one reference variable changes the value of the object, it will be affected by all the reference variables. That is why string objects are immutable in java. ]
a => [ More details. ]
h3 => [ 152) How many ways can we create the string object? ]
h3 => [ 1) String Literal ]
p => [ Java String literal is created by using double quotes. For Example: ]
p => [  
Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. String objects are stored in a special memory area known as the  string constant pool  For example:
 ]
h3 => [ 2) By new keyword ]
p => [ 
In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the constant string pool. The variable s will refer to the object in a heap (non-pool).
 ]
h3 => [ 153) How many objects will be created in the following code? ]
p => [ Only one object will be created using the above code because strings in Java are immutable. ]
a => [ More details. ]
h3 => [ 154) Why java uses the concept of the string literal? ]
p => [ 
To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool).
 ]
a => [ More details. ]
h3 => [ 155) How many objects will be created in the following code? ]
p => [ 
Two objects, one in string constant pool and other in non-pool(heap).
 ]
a => [ More details. ]
h3 => [ 156) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [  The operator  ==  also check whether the references of the two string objects are equal or not. Although both of the strings contain the same content, their references are not equal because both are created by different ways(Constructor and String literal) therefore,  a == b  is unequal. On the other hand, the equal() method always check for the content. Since their content is equal hence,  a equals b  is printed. ]
h3 => [ 157) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [  The intern method returns the String object reference from the string pool. In this case, s1 is created by using string literal whereas, s2 is created by using the String pool. However, s2 is changed to the reference of s1, and the operator  ==  returns true. ]
h3 => [ 158) What are the differences between String and StringBuffer? ]
p => [  The differences between the String and StringBuffer is given in the table below. ]
th => [ No. ]
th => [ String ]
th => [ StringBuffer ]
td => [ 1) ]
td => [ The String class is immutable. ]
td => [ The StringBuffer class is mutable. ]
td => [ 2) ]
td => [ The String is slow and consumes more memory when you concat too many strings because every time it creates a new instance. ]
td => [ The StringBuffer is fast and consumes less memory when you cancat strings. ]
td => [ 3) ]
td => [ The String class overrides the equals() method of Object class. So you can compare the contents of two strings by equals() method. ]
td => [ The StringBuffer class doesn't override the equals() method of Object class. ]
h3 => [ 159) What are the differences between StringBuffer and StringBuilder? ]
p => [ The differences between the StringBuffer and StringBuilder is given below. ]
th => [ No. ]
th => [ StringBuffer ]
th => [ StringBuilder ]
td => [ 1) ]
em => [ synchronized ]
em => [ non-synchronized ]
td => [ 2) ]
em => [ less efficient ]
em => [ more efficient ]
h3 => [ 160) How can we create an immutable class in Java? ]
p => [ We can create an immutable class by defining a final class having all of its members as final. Consider the following example. ]
a => [ More details. ]
h3 => [ 161) What is the purpose of toString() method in Java? ]
p => [ The toString() method returns the string representation of an object. If you print any object, java compiler internally invokes the toString() method on the object. So overriding the toString() method, returns the desired output, it can be the state of an object, etc. depending upon your implementation. By overriding the toString() method of the Object class, we can return the values of the object, so we don't need to write much code. Consider the following example. ]
strong => [ Output: ]
a => [ More details. ]
h3 => [ 162) Why CharArray() is preferred over String to store the password? ]
p => [ String stays in the string pool until the garbage is collected. If we store the password into a string, it stays in the memory for a longer period, and anyone having the memory-dump can extract the password as clear text. On the other hand, Using CharArray allows us to set it to blank whenever we are done with the password. It avoids the security threat with the string by enabling us to control the memory.
 ]
h3 => [ 163) Write a Java program to count the number of words present in a string? ]
strong => [ Program: ]
strong => [ Output ]
strong => [ java.util.regex ]
p => [ There are the following classes and interfaces present in java.util.regex package. ]
li => [ MatchResult Interface ]
li => [ Matcher class ]
li => [ Pattern class ]
li => [ PatternSyntaxException class ]
h3 => [ 165) How the metacharacters are different from the ordinary characters? ]
p => [ Metacharacters have the special meaning to the regular expression engine. The metacharacters are ^, $, ., *, +, etc. The regular expression engine does not consider them as the regular characters. To enable the regular expression engine treating the metacharacters as ordinary characters, we need to escape the metacharacters with the backslash. ]
h3 => [ 166) Write a regular expression to validate a password. A password must start with an alphabet and followed by alphanumeric characters; Its length must be in between 8 to 20. ]
p => [  The regular expression for the above criteria will be:  ^[a-zA-Z][a-zA-Z0-9]{8,19}  where ^ represents the start of the regex, [a-zA-Z] represents that the first character must be an alphabet, [a-zA-Z0-9] represents the alphanumeric character, {8,19} represents that the length of the password must be in between 8 and 20. ]
h3 => [ 167) What is the output of the following Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [ line 4 prints true since the second character of string is s, line 5 prints false since the second character is not s, line 6 prints false since there are more than 3 characters in the string, line 7 prints false since there are more than 2 characters in the string, and it contains more than 2 characters as well, line 8 prints true since the third character of the string is s. ]
h2 => [ Core Java: Nested classes and Interfaces Interview Questions ]
h3 => [ 168) What are the advantages of Java inner classes?  ]
p => [ There are two types of advantages of Java inner classes. ]
li => [ Nested classes represent a special type of relationship that is it can access all the members (data members and methods) of the outer class including private. ]
li => [ Nested classes are used to develop a more readable and maintainable code because it logically groups classes and interfaces in one place only. ]
strong => [ Code Optimization: ]
h3 => [ 169) What is a nested class?  ]
p => [ The nested class can be defined as the class which is defined inside another class or interface. We use the nested class to logically group classes and interfaces in one place so that it can be more readable and maintainable. A nested class can access all the data members of the outer class including private data members and methods. The syntax of the nested class is defined below. ]
p => [ There are two types of nested classes, static nested class, and non-static nested class. The non-static nested class can also be called as inner-class ]
a => [ More details. ]
h3 => [ 170) What are the disadvantages of using inner classes? ]
p => [ There are the following main disadvantages of using inner classes. ]
li => [ Inner classes increase the total number of classes used by the developer and therefore increases the workload of JVM since it has to perform some routine operations for those extra classes which result in slower performance. ]
li => [ IDEs provide less support to the inner classes as compare to the top level classes and therefore it annoys the developers while working with inner classes. ]
h3 => [ 171) What are the types of inner classes (non-static nested class) used in Java?  ]
p => [ There are mainly three types of inner classes used in Java. ]
th => [ Type ]
th => [ Description ]
a => [ Member Inner Class ]
td => [ A class created within class and outside method. ]
a => [ Anonymous Inner Class ]
td => [ A class created for implementing an interface or extending class. Its name is decided by the java compiler. ]
a => [ Local Inner Class ]
td => [ A class created within the method. ]
h3 => [ 172) Is there any difference between nested classes and inner classes?  ]
p => [ Yes, inner classes are non-static nested classes. In other words, we can say that inner classes are the part of nested classes. ]
a => [ More details. ]
h3 => [ 173) Can we access the non-final local variable, inside the local inner class?  ]
p => [ No, the local variable must be constant if you want to access it in the local inner class. ]
a => [ More details. ]
h3 => [ 174) How many class files are created on compiling the OuterClass in the following program?  ]
p => [ 3 class-files will be created named as Person.class, Person$BusinessMen.class, and Person$Employee.class. ]
h3 => [ 175) What are anonymous inner classes? ]
p => [ Anonymous inner classes are the classes that are automatically declared and instantiated within an expression. We cannot apply different access modifiers to them. Anonymous class cannot be static, and cannot define any static fields, method, or class. In other words, we can say that it a class without the name and can have only one object that is created by its definition. Consider the following example. ]
a => [ Test it Now ]
p => [ Output: ]
p => [ Consider the following example for the working of the anonymous class using interface. ]
a => [ Test it Now ]
p => [ Output: ]
h3 => [ 176) What is the nested interface?  ]
p => [ An Interface that is declared inside the interface or class is known as the nested interface. It is static by default. The nested interfaces are used to group related interfaces so that they can be easy to maintain. The external interface or class must refer to the nested interface. It can't be accessed directly. The nested interface must be public if it is declared inside the interface but it can have any access modifier if declared within the class. The syntax of the nested interface is given as follows. ]
a => [ More details. ]
h3 => [ 177) Can a class have an interface?  ]
p => [ Yes, an interface can be defined within the class. It is called a nested interface. ]
a => [ More details. ]
h3 => [ 178) Can an Interface have a class?  ]
p => [ Yes, they are static implicitly.  ]
a => [ More details. ]
h2 => [ Garbage Collection Interview Questions ]
h3 => [ 179) What is Garbage Collection? ]
p => [ 
Garbage collection is a process of reclaiming the unused runtime objects. It is performed for memory management. In other words, we can say that It is the process of removing unused objects from the memory to free up space and make this space available for Java Virtual Machine. Due to garbage collection java gives 0 as output to a variable whose value is not set, i.e., the variable has been defined but not initialized. For this purpose, we were using free() function in the C language and delete() in C++. In Java, it is performed automatically. So, java provides better memory management. ]
a => [ More details. ]
h3 => [ 180) What is gc()? ]
p => [ The gc() method is used to invoke the garbage collector for cleanup processing. This method is found in System and Runtime classes. This function explicitly makes the Java Virtual Machine free up the space occupied by the unused objects so that it can be utilized or reused. Consider the following example for the better understanding of how the gc() method invoke the garbage collector. ]
a => [ Test it Now ]
h3 => [ 181) How is garbage collection controlled? ]
p => [ Garbage collection is managed by JVM. It is performed when there is not enough space in the memory and memory is running low. We can externally call the System.gc() for the garbage collection. However, it depends upon the JVM whether to perform it or not. ]
h3 => [ 182) How can an object be unreferenced? ]
p => [ There are many ways:  ]
li => [ By nulling the reference ]
li => [ By assigning a reference to another ]
li => [ By anonymous object etc. ]
h3 => [ 1) By nulling a reference: ]
h3 => [ 2) By assigning a reference to another: ]
h3 => [ 3) By anonymous object: ]
h3 => [ 183) What is the purpose of the finalize() method? ]
p => [ The finalize() method is invoked just before the object is garbage collected. It is used to perform cleanup processing. The Garbage collector of JVM collects only those objects that are created by new keyword. So if you have created an object without new, you can use the finalize method to perform cleanup processing (destroying remaining objects). The cleanup processing is the process to free up all the resources, network which was previously used and no longer needed. It is essential to remember that it is not a reserved keyword, finalize method is present in the object class hence it is available in every class as object class is the superclass of every class in java. Here, we must note that neither finalization nor garbage collection is guaranteed. Consider the following example. ]
h3 => [ 184) Can an unreferenced object be referenced again? ]
p => [ Yes,  ]
h3 => [ 185) What kind of thread is the Garbage collector thread?  ]
p => [ Daemon thread. ]
h3 => [ 186) What is the difference between final, finally and finalize? ]
th => [ No. ]
th => [ final ]
th => [ finally ]
th => [ finalize ]
td => [ 1) ]
td => [ Final is used to apply restrictions on class, method, and variable. The final class can't be inherited, final method can't be overridden, and final variable value can't be changed. ]
td => [ Finally is used to place important code, it will be executed whether an exception is handled or not. ]
td => [ Finalize is used to perform clean up processing just before an object is garbage collected.  ]
td => [ 2) ]
td => [ Final is a keyword. ]
td => [ Finally is a block. ]
td => [ Finalize is a method. ]
h3 => [ 187) What is the purpose of the Runtime class?  ]
p => [ Java Runtime class is used to interact with a java runtime environment. Java Runtime class provides methods to execute a process, invoke GC, get total and free memory, etc. There is only one instance of java.lang.Runtime class is available for one java application. The Runtime.getRuntime() method returns the singleton instance of Runtime class.  ]
h3 => [ 188) How will you invoke any external process in Java?  ]
p => [ By Runtime.getRuntime().exec(?) method. Consider the following example. ]
h2 => [ I/O Interview Questions ]
h3 => [ 189) Give the hierarchy of InputStream and OutputStream classes. ]
strong => [ OutputStream Hierarchy ]
strong => [ InputStream Hierarchy ]
h3 => [ 190) What do you understand by an IO stream? ]
p => [ The stream is a sequence of data that flows from source to destination. It is composed of bytes. In Java, three streams are created for us automatically. ]
li => [ System.out: standard output stream ]
li => [ System.in: standard input stream ]
li => [ System.err: standard error stream ]
h3 => [ 191) What is the difference between the Reader/Writer class hierarchy and the InputStream/OutputStream class hierarchy?  ]
p => [ The Reader/Writer class hierarchy is character-oriented, and the InputStream/OutputStream class hierarchy is byte-oriented. The ByteStream classes are used to perform input-output of 8-bit bytes whereas the CharacterStream classes are used to perform the input/output for the 16-bit Unicode system. There are many classes in the ByteStream class hierarchy, but the most frequently used classes are FileInputStream and FileOutputStream. The most frequently used classes CharacterStream class hierarchy is FileReader and FileWriter. ]
h3 => [ 192) What are the super most classes for all the streams? ]
p => [ All the stream classes can be divided into two types of classes that are ByteStream classes and CharacterStream Classes. The ByteStream classes are further divided into InputStream classes and OutputStream classes. CharacterStream classes are also divided into Reader classes and Writer classes. The SuperMost classes for all the InputStream classes is java.io.InputStream and for all the output stream classes is java.io.OutPutStream. Similarly, for all the reader classes, the super-most class is java.io.Reader, and for all the writer classes, it is java.io.Writer. ]
h3 => [ 193) What are the FileInputStream and FileOutputStream? ]
p => [  Java FileOutputStream  is an output stream used for writing data to a file. If you have some primitive values to write into a file, use FileOutputStream class. You can write byte-oriented as well as character-oriented data through the FileOutputStream class. However, for character-oriented data, it is preferred to use FileWriter than FileOutputStream. Consider the following example of writing a byte into a file. ]
p => [  Java FileInputStream class  obtains input bytes from a file. It is used for reading byte-oriented data (streams of raw bytes) such as image data, audio, video, etc. You can also read character-stream data. However, for reading streams of characters, it is recommended to use FileReader class. Consider the following example for reading bytes from a file.
 ]
h3 => [ 194) What is the purpose of using BufferedInputStream and BufferedOutputStream classes? ]
p => [ Java BufferedOutputStream class is used for buffering an output stream. It internally uses a buffer to store data. It adds more efficiency than to write data directly into a stream. So, it makes the performance fast. Whereas, Java BufferedInputStream class is used to read information from the stream. It internally uses the buffer mechanism to make the performance fast. ]
h3 => [ 195) How to set the Permissions to a file in Java? ]
p => [ In Java, FilePermission class is used to alter the permissions set on a file. Java FilePermission class contains the permission related to a directory or file. All the permissions are related to the path. The path can be of two types: ]
li => [ D:\\IO\\-: It indicates that the permission is associated with all subdirectories and files recursively. ]
li => [ D:\\IO\\*: It indicates that the permission is associated with all directory and files within this directory excluding subdirectories. ]
p => [ Let's see the simple example in which permission of a directory path is granted with read permission and a file of this directory is granted for write permission.  ]
p => [ Output ]
h3 => [ 196) What are FilterStreams?  ]
p => [  FilterStream classes  are used to add additional functionalities to the other stream classes. FilterStream classes act like an interface which read the data from a stream, filters it, and pass the filtered data to the caller. The FilterStream classes provide extra functionalities like adding line numbers to the destination file, etc. ]
h3 => [ 197) What is an I/O filter?  ]
p => [ An I/O filter is an object that reads from one stream and writes to another, usually altering the data in some way as it is passed from one stream to another. Many Filter classes that allow a user to make a chain using multiple input streams. It generates a combined effect on several filters. ]
h3 => [ 198) In Java, How many ways you can take input from the console? ]
p => [ In Java, there are three ways by using which, we can take input from the console. ]
strong => [ Using BufferedReader class: ]
strong => [ Using Scanner class: ]
strong => [ Using Console class: ]
h2 => [ Serialization Interview Questions ]
h3 => [ 199) What is serialization? ]
p => [ Serialization in Java is a mechanism of writing the state of an object into a byte stream. It is used primarily in Hibernate, RMI, JPA, EJB and JMS technologies. It is mainly used to travel object's state on the network (which is known as marshaling). Serializable interface is used to perform serialization. It is helpful when you require to save the state of a program to storage such as the file. At a later point of time, the content of this file can be restored using deserialization. It is also required to implement RMI(Remote Method Invocation). With the help of RMI, it is possible to invoke the method of a Java object on one machine to another machine. ]
a => [ More details. ]
h3 => [ 200) How can you make a class serializable in Java? ]
p => [ A class can become serializable by implementing the Serializable interface. ]
h3 => [ 201) How can you avoid serialization in child class if the base class is implementing the Serializable interface? ]
p => [  It is very tricky to prevent serialization of child class if the base class is intended to implement the Serializable interface. However, we cannot do it directly, but the serialization can be avoided by implementing the writeObject() or readObject() methods in the subclass and throw NotSerializableException from these methods. Consider the following example. ]
h3 => [ 202) Can a Serialized object be transferred via network? ]
p => [ Yes, we can transfer a serialized object via network because the serialized object is stored in the memory in the form of bytes and can be transmitted over the network. We can also write the serialized object to the disk or the database. ]
h3 => [ 203) What is Deserialization? ]
p => [ Deserialization is the process of reconstructing the object from the serialized state. It is the reverse operation of serialization. An ObjectInputStream deserializes objects and primitive data written using an ObjectOutputStream. ]
h3 => [ 204) What is the transient keyword? ]
p => [  If you define any data member as transient, it will not be serialized. By determining transient keyword, the value of variable need not persist when it is restored.  More details. ]
h3 => [ 205) What is Externalizable? ]
p => [ The Externalizable interface is used to write the state of an object into a byte stream in a compressed format. It is not a marker interface. ]
h3 => [ 206) What is the difference between Serializable and Externalizable interface?  ]
th => [ No. ]
th => [ Serializable ]
th => [ Externalizable ]
td => [ 1) ]
td => [ The Serializable interface does not have any method, i.e., it is a marker interface. ]
td => [ The Externalizable interface contains is not a marker interface, It contains two methods, i.e., writeExternal() and readExternal(). ]
td => [ 2) ]
td => [  It is used to "mark" Java classes so that objects of these classes may get the certain capability.  ]
td => [ The Externalizable interface provides control of the serialization logic to the programmer. ]
td => [ 3) ]
td => [ It is easy to implement but has the higher performance cost. ]
td => [ It is used to perform the serialization and often result in better performance. ]
td => [ 4) ]
td => [ No class constructor is called in serialization. ]
td => [ We must call a public default constructor while using this interface. ]
h2 => [ Networking Interview Questions ]
h3 => [ 207) Give a brief description of Java socket programming?  ]
p => [ Java Socket programming is used for communication between the applications running on different JRE. Java Socket programming can be connection-oriented or connectionless. Socket and ServerSocket classes are used for connection-oriented socket programming and DatagramSocket, and DatagramPacket classes are used for connectionless socket programming. The client in socket programming must know two information:  ]
li => [ IP address of the server ]
li => [ port number ]
h3 => [ 208) What is Socket?  ]
p => [ A socket is simply an endpoint for communications between the machines. It provides the connection mechanism to connect the two computers using TCP. The Socket class can be used to create a socket. ]
h3 => [ 209) What are the steps that are followed when two computers connect through TCP?  ]
p => [ There are the following steps that are performed when two computers connect through TCP. ]
li => [ The ServerSocket object is instantiated by the server which denotes the port number to which, the connection will be made. ]
li => [ After instantiating the ServerSocket object, the server invokes accept() method of ServerSocket class which makes server wait until the client attempts to connect to the server on the given port. ]
li => [ Meanwhile, the server is waiting, a socket is created by the client by instantiating Socket class. The socket class constructor accepts the server port number and server name. ]
li => [ The Socket class constructor attempts to connect with the server on the specified name. If the connection is established, the client will have a socket object that can communicate with the server. ]
li => [ The accept() method invoked by the server returns a reference to the new socket on the server that is connected with the server. ]
h3 => [ 210) Write a program in Java to establish a connection between client and server? ]
p => [ Consider the following program where the connection between the client and server is established. ]
p => [ File: MyServer.java ]
p => [ File: MyClient.java ]
h3 => [ 211) How do I convert a numeric IP address like 192.18.97.39 into a hostname like java.sun.com?  ]
p => [ By InetAddress.getByName("192.18.97.39").getHostName() where 192.18.97.39 is the IP address. Consider the following example. ]
h2 => [ Reflection Interview Questions ]
h3 => [ 212) What is the reflection? ]
p => [ Reflection is the process of examining or modifying the runtime behavior of a class at runtime. The java.lang.Class class provides various methods that can be used to get metadata, examine and change the runtime behavior of a class. The java.lang and java.lang.reflect packages provide classes for java reflection. It is used in: ]
li => [ IDE (Integrated Development Environment), e.g., Eclipse, MyEclipse, NetBeans. ]
li => [ Debugger ]
li => [ Test Tools, etc. ]
h3 => [ 213) What is the purpose of using java.lang.Class class? ]
p => [ The java.lang.Class class performs mainly two tasks: ]
li => [ Provides methods to get the metadata of a class at runtime. ]
li => [ Provides methods to examine and change the runtime behavior of a class. ]
h3 => [ 214) What are the ways to instantiate the Class class? ]
p => [ There are three ways to instantiate the Class class. ]
strong => [ forName() method of Class class: ]
strong => [ getClass() method of Object class: ]
strong => [ the .class syntax: ]
h3 => [ 215) What is the output of the following Java program? ]
p => [  Output 
 ]
strong => [ Explanation ]
p => [ The newInstance() method of the Class class is used to invoke the constructor at runtime. In this program, the instance of the Simple class is created. ]
h3 => [ 216) What is the purpose of using javap? ]
p => [ The javap command disassembles a class file. The javap command displays information about the fields, constructors and methods present in a class file. ]
strong => [ Syntax ]
p => [ javap fully_class_name ]
h3 => [ 217) Can you access the private method from outside the class? ]
p => [ Yes, by changing the runtime behavior of a class if the class is not secured. ]
a => [ More details. ]
h2 => [ Miscellaneous Interview Questions ]
h3 => [ 218)What are wrapper classes?  ]
p => [  Wrapper classes are classes that allow primitive types to be accessed as objects. In other words, we can say that wrapper classes are built-in java classes which allow the conversion of objects to primitives and primitives to objects. The process of converting primitives to objects is called autoboxing, and the process of converting objects to primitives is called unboxing. There are eight wrapper classes present in  java.lang  package is given below. ]
th => [ Primitive Type ]
th => [ Wrapper class ]
td => [ boolean ]
td => [ Boolean ]
td => [ char ]
td => [ Character ]
td => [ byte ]
td => [ Byte ]
td => [ short ]
td => [ Short ]
td => [ int ]
td => [ Integer ]
td => [ long ]
td => [ Long ]
td => [ float ]
td => [ Float ]
td => [ double ]
td => [ Double ]
h3 => [ 219)What are autoboxing and unboxing? When does it occur? ]
p => [ The autoboxing is the process of converting primitive data type to the corresponding wrapper class object, eg., int to Integer. The unboxing is the process of converting wrapper class object to primitive data type. For eg., integer to int. Unboxing and autoboxing occur automatically in Java. However, we can externally convert one into another by using the methods like valueOf() or xxxValue(). ]
p => [ It can occur whenever a wrapper class object is expected, and primitive data type is provided or vice versa. ]
li => [ Adding primitive types into Collection like ArrayList in Java. ]
li => [ Creating an instance of parameterized classes ,e.g., ThreadLocal which expect Type. ]
li => [ Java automatically converts primitive to object whenever one is required and another is provided in the method calling. ]
li => [ When a primitive type is assigned to an object type.  ]
h3 => [ 220) What is the output of the below Java program? ]
strong => [ Output ]
strong => [ Explanation ]
p => [  The Integer class caches integer values from -127 to 127. Therefore, the Integer objects can only be created in the range -128 to 127. The operator  ==  will not work for the value greater than 127; thus  bye  is printed. ]
h3 => [ 221) What is object cloning?  ]
p => [ The object cloning is a way to create an exact copy of an object. The clone() method of the Object class is used to clone an object. The java.lang.Cloneable interface must be implemented by the class whose object clone we want to create. If we don't implement Cloneable interface, clone() method generates CloneNotSupportedException. The clone() method is defined in the Object class. The syntax of the clone() method is as follows: ]
strong => [ protected Object clone() throws CloneNotSupportedException ]
h3 => [ 222) What are the advantages and disadvantages of object cloning?  ]
strong => [ Advantage of Object Cloning ]
li => [ You don't need to write lengthy and repetitive codes. Just use an abstract class with a 4- or 5-line long clone() method. ]
li => [ It is the easiest and most efficient way of copying objects, especially if we are applying it to an already developed or an old project. Just define a parent class, implement Cloneable in it, provide the definition of the clone() method and the task will be done.  ]
li => [ Clone() is the fastest way to copy the array. ]
strong => [ Disadvantage of Object Cloning ]
li => [ To use the Object.clone() method, we have to change many syntaxes to our code, like implementing a Cloneable interface, defining the clone() method and handling CloneNotSupportedException, and finally, calling Object.clone(), etc. ]
li => [ We have to implement the Cloneable interface while it does not have any methods in it. We have to use it to tell the JVM that we can perform a clone() on our object. ]
li => [ Object.clone() is protected, so we have to provide our own clone() and indirectly call Object.clone() from it. ]
li => [ Object.clone() does not invoke any constructor, so we do not have any control over object construction. ]
li => [ If you want to write a clone method in a child class, then all of its superclasses should define the clone() method in them or inherit it from another parent class. Otherwise, the super.clone() chain will fail. ]
li => [ Object.clone() supports only shallow copying, but we will need to override it if we need deep cloning. ]
h3 => [ 223) What is a native method?  ]
p => [ A native method is a method that is implemented in a language other than Java. Natives methods are sometimes also referred to as foreign methods. ]
h3 => [ 224) What is the purpose of the strictfp keyword?  ]
p => [ Java strictfp keyword ensures that you will get the same result on every platform if you perform operations in the floating-point variable. The precision may differ from platform to platform that is why java programming language has provided the strictfp keyword so that you get the same result on every platform. So, now you have better control over the floating-point arithmetic. ]
h3 => [ 225) What is the purpose of the System class?  ]
p => [ The purpose of the System class is to provide access to system resources such as standard input and output. It cannot be instantiated. Facilities provided by System class are given below. ]
li => [ Standard input ]
li => [ Error output streams ]
li => [ Standard output ]
li => [ utility method to copy the portion of an array ]
li => [ utilities to load files and libraries ]
p => [ There are the three fields of Java System class, i.e., static printstream err, static inputstream in, and standard output stream. ]
h3 => [ 226) What comes to mind when someone mentions a shallow copy in Java? ]
p => [ Object cloning. ]
h3 => [ 227) What is a singleton class?  ]
p => [ Singleton class is the class which can not be instantiated more than once. To make a class singleton, we either make its constructor private or use the static getInstance method. Consider the following example. ]
h3 => [ 228) Write a Java program that prints all the values given at command-line. ]
strong => [ Program ]
strong => [ Output ]
h3 => [ 229) Which containers use a border layout as their default layout?  ]
p => [ The Window, Frame and Dialog classes use a border layout as their default layout. ]
h3 => [ 230) Which containers use a FlowLayout as their default layout?  ]
p => [ The Panel and Applet classes use the FlowLayout as their default layout. ]
h3 => [ 231) What are peerless components?  ]
p => [ The lightweight component of Swing is called peerless components. Spring has its libraries, so it does not use resources from the Operating System, and hence it has lightweight components.
 ]
h3 => [ 232) is there is any difference between a Scrollbar and a ScrollPane?  ]
p => [ The Scrollbar is a Component whereas the ScrollPane is a Container. A ScrollPane handles its events and performs its scrolling. ]
h3 => [ 233) What is a lightweight component? ]
p => [ Lightweight components are the one which does not go with the native call to obtain the graphical units. They share their parent component graphical units to render them. For example, Swing components, and JavaFX Components. ]
h3 => [ 234) What is a heavyweight component? ]
p => [ The portable elements provided by the operating system are called heavyweight components. AWT is limited to the graphical classes provided by the operating system and therefore, It implements only the minimal subset of screen elements supported by all platforms. The Operating system dependent UI discovery tools are called heavyweight components. ]
h3 => [ 235) What is an applet? ]
p => [ An applet is a small java program that runs inside the browser and generates dynamic content. It is embedded in the webpage and runs on the client side. It is secured and takes less response time. It can be executed by browsers running under many platforms, including Linux, Windows, Mac Os, etc. However, the plugins are required at the client browser to execute the applet. The following image shows the architecture of Applet. ]
p => [ When an applet is created, the following methods are invoked in order. ]
li => [ init() ]
li => [ start() ]
li => [ paint() ]
p => [ When an applet is destroyed, the following functions are invoked in order. ]
li => [ stop() ]
li => [ destroy() ]
h3 => [ 236) Can you write a Java class that could be used both as an applet as well as an application? ]
p => [ Yes. Add a main() method to the applet. ]
h2 => [ Internationalization Interview Questions ]
h3 => [ 237) What is Locale?  ]
p => [ A Locale object represents a specific geographical, political, or cultural region. This object can be used to get the locale-specific information such as country name, language, variant, etc.  ]
strong => [ Output: ]
h3 => [ 238)How will you load a specific locale?  ]
p => [ By ResourceBundle.getBundle(?) method. ]
h2 => [ Java Bean Interview Questions ]
h3 => [ 239) What is a JavaBean? ]
p => [ JavaBean is a reusable software component written in the Java programming language, designed to be manipulated visually by a software development environment, like JBuilder or VisualAge for Java. t. A JavaBean encapsulates many objects into one object so that we can access this object from multiple places. Moreover, it provides the easy maintenance. Consider the following example to create a JavaBean class. ]
h3 => [ 240) What is the purpose of using the Java bean? ]
p => [ According to Java white paper, it is a reusable software component. A bean encapsulates many objects into one object so that we can access this object from multiple places. Moreover, it provides the easy maintenance. ]
h3 => [ 241) What do you understand by the bean persistent property? ]
p => [ The persistence property of Java bean comes into the act when the properties, fields, and state information are saved to or retrieve from the storage.  ]
h2 => [ RMI Interview Questions ]
h3 => [ 242) What is RMI? ]
p => [ The RMI (Remote Method Invocation) is an API that provides a mechanism to create the distributed application in java. The RMI allows an object to invoke methods on an object running in another JVM. The RMI provides remote communication between the applications using two objects stub and skeleton. ]
h3 => [ 243) What is the purpose of stub and skeleton? ]
strong => [ Stub ]
p => [ The stub is an object, acts as a gateway for the client side. All the outgoing requests are routed through it. It resides at the client side and represents the remote object. When the caller invokes the method on the stub object, it does the following tasks: ]
li => [ It initiates a connection with remote Virtual Machine (JVM). ]
li => [ It writes and transmits (marshals) the parameters to the remote Virtual Machine (JVM). ]
li => [ It waits for the result. ]
li => [ It reads (unmarshals) the return value or exception. ]
li => [ It finally, returns the value to the caller. ]
p => [  Skeleton 
 ]
p => [ The skeleton is an object, acts as a gateway for the server side object. All the incoming requests are routed through it. When the skeleton receives the incoming request, it does the following tasks: ]
li => [ It reads the parameter for the remote method. ]
li => [ It invokes the method on the actual remote object. ]
li => [ It writes and transmits (marshals) the result to the caller. ]
h3 => [ 244) What are the steps involved to write RMI based programs? ]
p => [ There are 6 steps which are performed to write RMI based programs. ]
li => [ Create the remote interface. ]
li => [ Provide the implementation of the remote interface. ]
li => [ Compile the implementation class and create the stub and skeleton objects using the rmic tool. ]
li => [ Start the registry service by the rmiregistry tool. ]
li => [ Create and start the remote application. ]
li => [ Create and start the client application. ]
h3 => [ 245) What is the use of HTTP-tunneling in RMI? ]
p => [ HTTP tunneling can be defined as the method which doesn't need any setup to work within the firewall environment. It handles the HTTP connections through the proxy servers. However, it does not allow outbound TCP connections. ]
h3 => [ 246) What is JRMP? ]
p => [ JRMP (Java Remote Method Protocol) can be defined as the Java-specific, stream-based protocol which looks up and refers to the remote objects. It requires both client and server to use Java objects. It is wire level protocol which runs under RMI and over TCP/IP. ]
h3 => [ 247) Can RMI and CORBA based applications interact? ]
p => [ Yes, they can. RMI is available with IIOP as the transport protocol instead of JRMP. ]
h2 => [ Core Java: Data Structure interview questions ]
h3 => [ 248) How to perform Bubble Sort in Java? ]
p => [ Consider the following program to perform Bubble sort in Java. ]
strong => [ Output: ]
h3 => [ 249) How to perform Binary Search in Java? ]
p => [ Consider the following program to perform the binary search in Java. ]
strong => [ Output: ]
h3 => [ 250) How to perform Selection Sort in Java? ]
p => [ Consider the following program to perform selection sort in Java. ]
strong => [ Output: ]
h3 => [ 251) How to perform Linear Search in Java? ]
p => [ Consider the following program to perform Linear search in Java. ]
strong => [ Output: ]
h3 => [ 252) How to perform merge sort in Java? ]
p => [ Consider the following program to perform merge sort in Java. ]
strong => [ Output: ]
h3 => [ 253) How to perform quicksort in Java? ]
p => [ Consider the following program to perform quicksort in Java. ]
strong => [ Output: ]
h3 => [ 254) Write a program in Java to create a doubly linked list containing n nodes. ]
p => [ Consider the following program to create a doubly linked list containing n nodes. ]
strong => [ Output: ]
h3 => [ 255) Write a program in Java to find the maximum and minimum value node from a circular linked list. ]
p => [ Consider the following program. ]
strong => [ Output: ]
h3 => [ 256) Write a program in Java to calculate the difference between the sum of the odd level and even level nodes of a Binary Tree. ]
p => [ Consider the following program. ]
strong => [ Output: ]
span => [ Next Topic ]
a => [ Java Multithreading interview Questions ]
a => [ ← prev ]
a => [ next → ]
a => [ 1 ]
a => [ 2 ]
a => [ 3 ]
a => [ 4 ]
a => [ 5 ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Java Multithreading Interview Questions ]
a => [ Java String &amp; Exception Interview Questions ]
a => [ Java Collection Interview Questions ]
a => [ JDBC Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
