
div => [ 
 ]
h1 => [ JPA Interview Questions ]
p => [ A list of top frequently asked JPA interview questions and answers are given below: ]
h2 => [ 1) What is the Java Persistence API? ]
p => [ The Java Persistence API (JPA) is the specification of Java that is used to persist data between Java object and relational database. JPA acts as a bridge between object-oriented domain models and relational database systems. As JPA is just a specification, it doesn't perform any operation by itself. It requires an implementation. Therefore, ORM tools like Hibernate, TopLink, and iBatis implements JPA specifications for data persistence. The first version of the Java Persistence API, JPA 1.0 was released in 2006 as a part of EJB 3.0 specification. ]
h2 => [ 2) Does JPA performs the actual task like access, persist and manage data? ]
p => [ No, JPA is only a specification. The ORM tools like Hibernate, iBatis, and TopLink implements the JPA specification and perform these type of tasks. ]
h2 => [ 3) What is the object-relational mapping? ]
p => [ The object-relational mapping is a mechanism which is used to develop and maintain a relationship between an object and the relational database by mapping an object state into the database column. It converts attributes of programming code into columns of the table. It is capable of handling various database operations easily such as insertion, updation, deletion, etc. ]
h2 => [ 4) What are the advantages of JPA? ]
p => [ The advantages of JPA are given below. ]
li => [ The burden of interacting with the database reduces significantly by using JPA. ]
li => [ The user programming becomes easy by concealing the O/R mapping and database access processing. ]
li => [  The cost of creating the definition file is reduced by using annotations. ]
li => [  We can merge the applications used with other JPA providers ]
li => [  Using different implementations can add the features to the standard Implementation which can later be the part of JPA specification. ]
h2 => [ 5) What are the embeddable classes?  ]
p => [ Embeddable classes represent the state of an entity but do not have a persistent identity of their own. The objects of such classes share the identity of the entity classes that owns it. An Entity may have single-valued or multivalued embeddable class attributes. ]
h2 => [ 6) List some ORM frameworks.  ]
p => [ Following are the various frameworks that function on ORM mechanism: - ]
li => [ Hibernate ]
li => [ TopLink ]
li => [ ORMLite ]
li => [ iBATIS ]
li => [ JPOX ]
h2 => [ 7) What is the JPQL?  ]
p => [ JPQL is the Java Persistence query language defined in JPA specification. It is used to construct the queries.
 ]
h2 => [ 8) What are the steps to persist an entity object? ]
p => [ The following steps are performed to persist an entity object. ]
strong => [ EntityManagerFactory ]
strong => [  java.persistence ]
li => [ Obtain an entity manager from the factory. ]
li => [ Initialize an entity manager. ]
li => [ Persist the data into the relational database. ]
li => [ Closing the transaction ]
li => [ Release the factory resources. ]
h2 => [ 9) What are the steps to insert an entity?  ]
p => [ We can easily insert the data into the database through the entity. The EntityManager provides persist() method to add records. The following steps are used to insert the record into the database. ]
strong => [ Student.java ]
strong => [ Persistence.xml ]
li => [ Create a persistence class named as PersistStudent.java under com.javatpoint.jpa.persist package to persist the entity object with data ]
h2 => [ 10) What are the steps to find an entity?  ]
p => [ To find an entity, EntityManger interface provides find() method that searches an element by the primary key. The following steps are used to find an entity in the record. ]
strong => [ StudentEntity.java ]
strong => [ Persistence.xml  ]
strong => [ FindStudent.java ]
h2 => [ 11) What are the steps to update an entity?  ]
p => [ JPA allows us to change the records in the database by updating an entity. The following steps are to be performed to update the entity. ]
li => [ Create an entity class named as StudentEntity.java under com.javatpoint.jpa.student package, that contains attribute s_id and s_name. ]
strong => [ StudentEntity.java ]
li => [ Now, map the entity class and other databases configuration in Persistence.xml file. ]
strong => [ Persistence.xml ]
li => [ Create a persistence class named as UpdateStudent.java under com.javatpoint.jpa.update package to persist the entity object with data. ]
strong => [ UpdateStudent.java ]
h2 => [ 12) What are the steps to delete an entity? ]
p => [ To delete a record from the database, EntityManager interface provides remove() method. The remove() method uses the primary key to delete the particular record. The following examples are to be performed to delete an entity. ]
strong => [ StudentEntity.java ]
li => [ Now, map the entity class and other databases configuration in Persistence.xml file. ]
strong => [ Persistence.xml ]
strong => [ Deletion.java ]
h2 => [ 13) Insert a record mechanism using JPA?  ]
h2 => [ 14) What are the different directions of entity mapping? ]
p => [ The direction of a mapping can be either unidirectional or bidirectional. In unidirectional mapping, only one entity can be mapped to another entity, whereas in bidirectional mapping each entity can be mapped or referred to another entity. ]
h2 => [ 15) What are the different types of entity mapping? ]
p => [ Following are the types of object-relational mapping: - ]
strong => [ One-to-one mapping: ]
strong => [ One-To-Many mapping: ]
strong => [ Many-to-one mapping ]
strong => [ Many-to-many mapping ]
h2 => [ 16) What is an orphan removal in mappings? ]
p => [ If a target entity in one-to-one or one-to-many mapping is removed from the mapping, then remove operation can be cascaded to the target entity. Such target entities are known as orphans, and the orphanRemoval attribute can be used to specify that orphaned entities should be removed. ]
h2 => [ 17) Explain persistence life cycle of an object? ]
p => [ In persistence life cycle, the object lies in the following states: - ]
li => [ Transient - The object is called to be in the transient state when it is just declared by using the new keyword. When an object remains in the transient state, it doesn't contain any identifier(primary key) in the database.  ]
li => [ Persistence - In this state, an object is associated with the session and either saved to a database or retrieved from the database. When an object remains in the persistence state, It contains a row of the database and consists of an identifier value. We can make an object persistent by associating it with the hibernate session. ]
li => [ Detached - The object enters into a detached state when the hibernate session is closed. The changes made to the detached objects are not saved to the database.  ]
h2 => [ 18) What are the different types of identifier generation? ]
p => [ Following are the types of id generation strategy required to specify with @GeneratedValue annotation: - ]
li => [ Automatic Id generation - In this case, the application doesn't care about the kind of id generation and hand over this task to the provider. If any value is not specified explicitly, the generation type defaults to auto. ]
li => [ Id generation using a table - The identifiers can also be generated using a database table.  ]
li => [ Id generation using a database sequence - Databases support an internal mechanism for id generation called sequences. To customize the database sequence name, we can use the JPA @SequenceGenerator annotation.  ]
li => [ Id generation using a database identity - In this approach, whenever a row is inserted into the table, a unique identifier is assigned to the identity column that can be used to generate the identifiers for the objects. ]
h2 => [ 19) What is an entity? ]
p => [ The entity is a group of states associated together in a single unit. An entity behaves as an object and becomes a major constituent of the object-oriented paradigm. In other words, we can say that an entity is an application-defined object in the Java Persistence Library. Each entity is associated with the metadata which represents its information in the form of XML or annotation. ]
h2 => [ 20) What are the properties of an entity? ]
p => [ Following are the properties of an entity that an object must have: - ]
strong => [ Persistability: ]
strong => [ Persistent Identity: ]
strong => [ Transactionality: ]
strong => [ Granularity: ]
h2 => [ 21) What is the role of Entity Manager in JPA? ]
p => [ An entity manager is responsible for the following operations. ]
li => [ The entity manager implements the API and encapsulates all of them within a single interface. ]
li => [ The entity manager is used to read, delete and write an entity. ]
li => [ An object referenced by an entity is managed by entity manager. ]
h2 => [ 22) What are the constraints on an entity class? ]
p => [ An entity class must fulfill the following requirements: ]
li => [ The class must have a no-argument constructor. ]
li => [ The class can't be final. ]
li => [ The class must be annotated with @Entity annotation. ]
li => [ The class must implement a Serializable interface if value passes an empty instance as a detached object. ]
h2 => [ 23) What is the purpose of Java collections in JPA? ]
p => [ In JPA, Java collections are used to persist the object of wrapper classes and String. ]
h2 => [ 24) What type of objects can be stored in the JPA collections mapping? ]
p => [ Following are the type of objects that JPA allows to store: - ]
li => [ Basic Types ]
li => [ Entities ]
li => [ Embeddable ]
h2 => [ 25) What type of collections can be used in JPA? ]
p => [ To store multivalued entity associations and a collection of objects, following types of Java collections is used: - ]
li => [ List ]
li => [ Set ]
li => [ Map ]
h2 => [ 26) What is the purpose of cascading operations in JPA? ]
p => [ If we apply any task to one entity then using cascading operations, we make it applicable to its related entities also.  ]
h2 => [ 27) What are the types of cascade supported by JPA? ]
p => [ Following is the list of cascade type: - ]
strong => [ PERSIST: ]
strong => [ MERGE: ]
strong => [ DETACH: ]
strong => [ REFRESH: ]
strong => [ REMOVE: ]
strong => [ ALL ]
h2 => [ 28) What is JPQL? ]
p => [ The Java Persistence Query language (JPQL) is a part of JPA specification that defines searches against persistence entities. It is an object-oriented query language which is used to perform database operations on persistent entities. Instead of the database table, JPQL uses entity object model to operate the SQL queries. Here, the role of JPA is to transform JPQL into SQL. Thus, it provides an easy platform for developers to handle SQL tasks. JPQL is an extension of Entity JavaBeans Query Language (EJBQL). ]
p => [ 
 ]
h2 => [ 29) What are the features of JPQL? ]
p => [ Some of the essential features of JPQL are: - ]
li => [ It is simple and robust. ]
li => [ It is a platform-independent query language. ]
li => [ JPQL queries can be declared statically into metadata or can also be dynamically built in code.  ]
li => [ It can be used with any database such as MySQL, Oracle. ]
h2 => [ 30) What is the Criteria API? ]
p => [ The Criteria API is a specification that provides type-safe and portable criteria queries written using Java programming language APIs. It is one of the most common ways of constructing queries for entities and their persistent state. It is just an alternative method for defining JPA queries. Criteria API defines a platform-independent criteria queries, written in Java programming language. It was introduced in JPA 2.0. The main purpose behind this is to provide a type-safe way to express a query. ]
span => [ SEO Interview Questions ]
span => [ HTML Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
