
div => [ 
 ]
h1 => [ SASS Interview Questions ]
p => [ A list of frequently asked SASS interview questions and answers are given below. ]
h3 => [ 1) Define SASS? ]
p => [ SASS means Syntactically Awesome Style sheets. It is a CSS preprocessor which is used to reduce repetition with CSS and save time. It adds power and elegance to the basic language and facilitates you to add variables, nested rules, mixins, inline imports, inheritance and more, all with fully CSS-compatible syntax. ]
h3 => [ 2) Who is the inventor of SASS? ]
p => [ SASS was developed by Natalie Weizenbaum and was designed by Hampton Catlin. So, Hampton Catlin is credited as the designer of SASS, and he is also known as the father of SASS. ]
h3 => [ 3) What are the reasons behind using SASS? ]
p => [ Following are some important reasons behind the popularity of SASS. ]
li => [ You can write codes easily and efficiently, and they are easy to maintain. ]
li => [ It is a pre-processing language which provides its syntax for CSS. ]
li => [ It is a superset of CSS which contains all the features of CSS and is an open source pre-processor, coded in Ruby. ]
li => [ It is more stable and powerful CSS extension and style documents more clearly and structurally. ]
li => [ It facilitates reusability methods, logic statements and some of the built-in functions like color manipulation, mathematics, and parameter lists item. ]
h3 => [ 4) How many ways can we use SASS? ]
p => [ We can use SASS in three different ways: ]
li => [ As a command line tool. ]
li => [ As a standalone Ruby module. ]
li => [ As a plug-in for any Rack-enabled framework. ]
h3 => [ 5) What are the most attractive features of SASS? ]
li => [ It is more stable, powerful and fully compatible to CSS3. ]
li => [ It is time-saving because it facilitates you to write CSS in less code. ]
li => [ It uses its syntax. ]
li => [ It is based on the JavaScript and superset of CSS. ]
li => [ It is an Open source pre-processor that interprets into CSS. ]
li => [ It contains various functions for manipulating colors and other values. ]
li => [ It has advanced control directives for libraries. ]
li => [ It provides well formatted, customizable output. ]
h3 => [ 6) Which data types does the Sass Script supports? ]
p => [ Following data types are supported by the Sass Script: ]
li => [ Boolean (true or false) ]
li => [ Number (1, 5, 13, 10px) ]
li => [ Nulls ]
li => [ Colors (red, #FF0000) ]
li => [ Text String, without quote ("foo", "bar") ]
li => [ List of values that are separated by commas or space (2.0em, Verdana, Arial, Helvetica) ]
li => [ Maps from one value to another value (key 1: value 1, key 2: value 2) ]
li => [ Function reference. ]
p => [ SASS always supports all other types of CSS property value such as Unicode range, special character, and unquoted string. ]
h3 => [ 7) How can you define a variable in SASS? ]
p => [ The variables in SASS start with a ($) sign, and variable assignment is done with a colon(:). ]
h3 => [ 8) What are the main differences between SCSS and SASS? ]
p => [ Following is the list of main differences between SCSS and SASS: ]
li => [ SASS is like a CSS preprocessor. It has the extension of CSS3. SASS is derived from another preprocessor known as Haml (HTML abstraction markup language). ]
li => [ SASS contains two types of syntax: "SCSS" is the first syntax, and it uses the extension of .scss. Indented syntax or "SASS" is the other syntax, and it uses the extension of .sass ]
li => [ You can covert the valid CSS document into SASS by simply change the extension from .CSS to .SCSS. ]
li => [ SCSS is fully CSS compatible. It provides CSS-friendly syntax to closing the gap between SASS and CSS. SCSS is called Sassy CSS. ]
h3 => [ 9) Explain the use of Sass @import function? ]
li => [ It facilitates you to extend the CSS import rule. To do this you need to enable import of Sass and SCSS files. ]
li => [ It can merge the all the imported files into a single outputted CSS file. ]
li => [ It is used to virtually match and mix any file. ]
li => [ It needs a filename to import function. ]
li => [ It provides document style presentation better than flat CSS. ]
li => [ It facilitates you to keep your responsive design project more organized. ]
h3 => [ 10) What are the main advantages of SASS?  ]
p => [ Following is a list of main advantages of SASS: ]
li => [ It is more stable, powerful, and elegant because it is an extension of CSS. So, it is easy for designers and developers to work efficiently and quickly. ]
li => [ It contains fewer codes, so it is time-efficient and saves time. ]
li => [ It facilitates writing clean CSS in a programming construct. ]
li => [ It is compatible with all versions of CSS. ]
li => [ It is the superset of CSS that helps designers and developers work more efficiently and quickly. ]
li => [ SASS is compatible with all versions of CSS. So, it facilitates us to use any available CSS libraries. ]
li => [ It facilitates us to use nested syntax and useful functions such as color manipulation, mathematics, and other values. ]
h3 => [ 11) What are the main disadvantages of SASS? ]
p => [ Following is a list of main disadvantages of SASS: ]
li => [ SASS introduces some new features, which may take time for developers to learn these new features present in this preprocessor. ]
li => [ There may be chances of losing the benefits of the browser's built-in element inspector while using SASS. ]
li => [ If a team working on the same site, then they will use the same preprocessor. If some people of the team use the SASS and some people use the CSS to edit the files directly, it will become difficult to work with the site. ]
li => [ In SASS, the code has to be compiled. ]
li => [ The troubleshooting is difficult in SASS. ]
h3 => [ 12) How can you refer a parent selector in the SASS? ]
p => [ We can easily select the parent selector by using the &amp; character. It specifies where we should insert the parent selector. ]
h3 => [ 13) What is the use of list operations in SASS? ]
p => [ In SASS, the list operations are used to represent series of values that are separated using commas or space.  ]
h3 => [ 14) What is the use of Selector Nesting in SASS? ]
p => [ In SASS, Selector Nesting is a process that offers a way for style sheet authors to compute long selectors by nesting shorter selectors within each other. ]
h3 => [ 15) Does SASS support inline comments? ]
p => [ In SASS, the single-line comments // are removed by the .scss preprocessor and don't appear in the .css file, while the comment */is valid CSS and will be preserved between the translation from .scss to your .css file.  ]
h3 => [ 16) What is the use of the @mixin directive? ]
p => [ The @mixin directive is used to define the mixins that include the variables and argument optionally after the name of the mixin. ]
h3 => [ 17) How can you use interpolation in SASS? ]
p => [ In SASS, we can easily define an element in a variable and interpolate it inside the SASS code. It is useful when we keep our modules in separate files. ]
h3 => [ 18) What do you understand by compressed CSS style? ]
p => [ As the name suggests, the compressed CSS style takes the least amount of space compared to all other CSS styles. It provides whitespaces only to separate selectors and newlines at the end of the file. ]
h3 => [ 19) Can you nest variables within variables in SASS?  ]
p => [ In SASS, the interpolation of variables is currently not possible. However, we can use interpolation of placeholders. ]
h3 => [ 20) What do you understand by LESS? ]
p => [ LESS is a dynamic style sheet producing language. It is a CSS preprocessor that extends CSS with dynamic behavior. It allows for variables, mixins, operations, and functions and runs on the server-side and client-side both.  ]
h3 => [ 21) What is the procedure to create a LESS file and store it and compile it? ]
p => [ The procedure to create and store a LESS file is similar to creating/storing a CSS file. You can create a new LESS file with a .less extension or rename the existing .css file to a .less file. You can write LESS code with existing CSS code. You should follow the best practice of creating it inside ~/content/ or ~/Styles/ folder. ]
h3 => [ 22) What is the shortcut for writing @mixin and @include directives? ]
p => [ As a shortcut for writing @mixin and @include directives, we can use = for @mixin directive and + for @include directive. It requires less typing, makes our code simpler and easier to read, and saves our time.  ]
h3 => [ 23) What is the best way to represent variables in LESS? ]
p => [ LESS allows variables to be defined. The best way to represent variables in LESS is to represent them as @sing. While the variable assignment is done with a: (colon) sign. The values of the variables are inserted into the CSS output file as well as minified file.  ]
h3 => [ 24) How can you set code in a watch mode while running LESS.js in an HTML5 browser? ]
p => [ When you run the LESS.js in an HTML5 browser, it uses local storage to cache the generated CSS. However, the developers cannot see the changes they made instantly. In order to see the changes you made instantly, you can load program in development and watch mode by using following JavaScript:  ]
h3 => [ 25) What are the different color channel functions used in LESS? ]
p => [ Following are some different color channel functions used in LESS: ]
li => [ hue ]
li => [ saturation ]
li => [ hsvhue ]
li => [ saturation ]
li => [ hswalue ]
li => [ red ]
li => [ green ]
li => [ blue ]
li => [ alpha ]
li => [ luma ]
li => [ luminance ]
h3 => [ 26) What are nested rules in Sass? ]
p => [ Nesting is a method of combining multiple logic structures within one another. In Sass, various CSS rules are connected to one another.  ]
p => [ For example, if you are using multiple selectors then you can use one selector inside another to create compound selectors. ]
h3 => [ 27) Which one is better, Sass or Less? ]
p => [ Due to the following reasons, Sass is better than less: ]
li => [ Sass provides the facilities to use logical statements like loops, conditions and also facilitates you to write reusable methods. ]
li => [ The user of Sass can access the library of the company. Sass users can also use some awesome features like cross-browser support, legacy browser hacks, and dynamic sprite map generation. ]
li => [ Compass also provides the facilities to add an external framework like Bootstrap on top, Blueprint. ]
li => [ Sass provides you the facility to write your handy functions ]
h3 => [ 28) What is the way to write a placeholder selector in Sass? ]
p => [ In Sass, the placeholder selectors can be used with class or id selector. In standard CSS, these are specified with "#" or ".", but in SASS they are replaced with "%". It uses @extend directive to display the result in CSS. For example: ]
h3 => [ 29) What is the use of number operations in SASS? ]
p => [ In SASS, the number operations are used to allow mathematical operations such as addition, subtraction, multiplication, and division. ]
h3 => [ 30) What is the use of color operations in SASS? ]
p => [ In SASS, the color operations allow using color components along with arithmetic operations. ]
h3 => [ 31) What is the use of Boolean operations in SASS? ]
p => [ In SASS, the Boolean operations allow using "AND", "OR" and "NOT" operators.  ]
h3 => [ 32) What are parentheses in Sass? ]
p => [ Parentheses are used to provide a symbolic logic that affects the order of the operation. It is a pair of signs which are usually marked off by round () brackets or square [] brackets. ]
h3 => [ 33) Define the use of Sass Mixin function? ]
p => [ The Mixin function is used to define styles. Functions and Mixins are very similar. You can re-use this style throughout the style sheet. To re-use it you do not need to resort the non-semantic classes like .float-left. The Mixin can store multiple values or parameters and call a function to avoid writing repetitive codes. It names can use underscores and hyphens interchangeably. ]
h3 => [ 34) What is the use of DRY-ing out a Mixin function in Sass? ]
p => [ DDRY-ing out a Mixin function splits into two parts: the static part and dynamic parts. ]
p => [ The static Mixin contains the pieces of information that would otherwise get duplicated and the dynamic Mixin is the function that the user going to call. ]
h3 => [ 35) Describe the difference between Sass comment and regular CSS comment? ]
p => [ Comments in regular CSS starts with /* */ and Sass contains two commands. The single line comment with // and multiple CSS comments with /* */. ]
h3 => [ 36) Which directive is used to detect the errors in SASS? ]
p => [ Sass @debug directive is used to detect the errors and display the Sass Script expressions values to the standard error output stream. For example: ]
h3 => [ 37) What are the requirements of SASS system? ]
p => [ These are the requirements for Sass system:-
 ]
h3 => [ 38) What is the use of @extend directive in SASS? ]
p => [ The SASS @extend directive is used to share a set of CSS properties from one selector to another. It is a very important and useful feature of Sass. It allows classes to share a set of properties with one another. It makes your code less and facilitates you to rewrite it repeatedly. For example: ]
h3 => [ 39) What is the role of @media directive in SASS? ]
p => [ The Sass @media directive is used to set style rules to different media types. It supports and extends the @media rules. This directive can be nested inside the selector SASS but the main impact is displayed to the top level of the style sheet. For example:- ]
h3 => [ 40) What is the use of at-root directive in SASS? ]
p => [ The Sass @at-root directive is a collection of nested rules that are used to style block at the root of the document. For example:- ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
