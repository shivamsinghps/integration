
div => [ 
 ]
h1 => [ Quality Assurance Interview Questions ]
p => [  A list of top frequently asked  QA Interview Questions  or  Quality Assurance Interview Questions  and answers are given below.  ]
h3 => [ 1) What is Quality Assurance? ]
p => [ QA stands Quality Assurance. QA is a set of activities designed to ensure that the developed software meets all the specifications or requirements mentioned in the SRS document. ]
p => [ QA follows the PDCA cycles: ]
strong => [ Plan ]
p => [ The plan is a phase in Quality Assurance in which the organization determines the processes which are required to build a high-quality software product. ]
strong => [ Do ]
p => [ Do is a phase of development and testing the processes.  ]
strong => [ Check ]
p => [ This phase is used for monitoring the processes and verifies whether these processes meet the user requirements or not. ]
strong => [ Act ]
p => [ The Act is a phase for implementing the actions required to improve the processes. ]
h3 => [ 2) What is the difference between Quality Assurance and Software testing? ]
strong => [ The following is the list of differences between Quality Assurance and Software testing: ]
th => [ Quality Assurance ]
th => [ Software testing ]
strong => [ Activities ]
td => [ Quality Assurance is a set of activities used to ensure that the developed software meets all the user requirements. ]
td => [ Software testing is an activity performed after the development phase to check whether the actual results match the expected results to ensure that the software is bug-free. In short, we can say that software testing is verification of application under test. ]
strong => [ Activities ]
td => [ It involves activities that include the implementation of processes, procedures, and standards. ]
td => [ It involves activities that include verification of testing. ]
strong => [ Orientation ]
td => [ It is a process-oriented, i.e., it checks the processes to ensure that quality software is delivered to the client. ]
td => [ It is a product-oriented, i.e., checking the functionality of a software. ]
strong => [ Activity type ]
td => [ Preventive ]
td => [ Corrective ]
strong => [ Objective ]
td => [ The main objective of Quality Assurance is to deliver quality software. ]
td => [ The main objective of software testing is to find the bugs in the developed software. ]
h3 => [ 3) How the build and release differ from one another, write down the difference between build and release? ]
p => [  Build  is defined as when the software is given to the testing team by the development team. ]
p => [  Release  It is defined as when the software is handed over to the users by the tester and developer. ]
h3 => [ 4) Define bug leakage and bug release? ]
p => [  Bug leakage  is defined as the bug not found by the testing team but found by the end users. Bug release it is defined when the software is released by the tester in the market knowing that bug is present in the release. These types of bugs have low priority and severity. This type of situation arises when customers want the software on time than the delay in getting the software and the cost involved in correcting the bugs. ]
h3 => [ 5) What are the solutions for the software development problem? ]
p => [ There are five different solutions for the software development problem. ]
li => [ The requirements for software development should be clear, complete, and agreed by all, setting up the requirements criteria. ]
li => [ Next thing is the realistic schedule like time for planning, designing, testing, fixing bugs, and re-testing. ]
li => [ It requires sufficient testing, starts the testing immediately after one or more module development. ]
li => [ Use of group communication tools. ]
li => [ Use rapid prototype during the design phase so that it can be easy for the customer to find what to expect. ]
h3 => [ 6) Explain the types of documents in Software Quality Assurance? ]
strong => [ The following are the types of documents in Software Quality Assurance: ]
strong => [ Requirement Document ]
p => [ All the functionalities are to be added in the application are documented in terms of Requirements, and the document is known as Requirement document. This Requirement document is made by the collaboration of various people in the project team like developers, testers, Business Analysts, etc. ]
strong => [ Test Metrics ]
p => [ Test Metrics is a quantitative measure that determines the quality and effectiveness of the testing process. ]
strong => [ Test plan ]
p => [ It defines the strategy which will be applied to test an application, the resources that will be used, the test environment in which testing will be performed, and scheduling of test activities will be done. ]
strong => [ Test cases ]
p => [ A test case is a set of steps, and conditions used at the time of testing. This activity is performed to verify whether all the functionalities of software are working properly or not. There can be various types of test cases such as logical, functional, error, negative test cases, physical test cases, UI test cases, etc. ]
strong => [ Traceability matrix ]
p => [ Traceability matrix is a table that traces and maps the user requirements with test cases. The main aim of Requirement Traceability Matrix is to see that all test cases are covered so that no functionality miss during the software testing. ]
strong => [ Test scenario ]
p => [ A test scenario is a collection set of test cases which helps the testing team to determine the positive and negative aspects of a project. ]
h3 => [ 7) What is the rule of a "Test Driven Development"? ]
p => [ In Test Driven Development, test cases are prepared before writing the actual code. It means you have to write the test case before the real development of the application. ]
strong => [ Test Driven Development cycle: ]
li => [ Write the test cases ]
li => [ Execute the test cases ]
li => [ If the test case fails, then changes are made to make it correct ]
li => [ Repeat the process ]
h3 => [ 8) What is traceability matrix? ]
p => [ Traceability matrix is a document that maps and traces user requirements with test cases. The main aim of Requirement Traceability Matrix is to see that all test cases are covered so that no functionality miss during the software testing. ]
h3 => [ 9) Write down the differences between the responsibilities of QA and programmers? ]
strong => [ Differences in responsibilities are as: ]
th => [ Sr. No. ]
th => [ QA Responsibility ]
th => [ Programmer Responsibility ]
strong => [ 1. ]
td => [ QA team is concerned for process Quality ]
td => [ Programmers are concerned for product quality ]
strong => [ 2. ]
td => [ QA ensures that the processes used for developing the product of high quality ]
td => [ Programmers used these processes so that the end product is of good quality ]
p => [ Any issue found during the execution of the process by the programmers is communicated to the QA so that they can improve the process. ]
h3 => [ 10) What is the difference between Verification and Validation? ]
th => [ Verification ]
th => [ Validation ]
td => [ Verification is the process of evaluating the steps during the development phase to determine whether they meet the user requirements or not. ]
td => [ Validation is the process of evaluating the product after the development process to determine whether it meets the specified requirement. ]
td => [ Verification is static testing. ]
td => [ Validation is dynamic testing. ]
td => [ Verification testing is performed before validation. ]
td => [ Validation is performed after verification. ]
td => [ It does not involve in executing the code. ]
td => [ It involves in executing the code. ]
td => [ It involves activities such as reviews, walkthroughs, inspections, and desk checking, etc. ]
td => [ It involves methods such as black box testing, white box testing and non-functional testing. ]
td => [ It finds the bugs before the development cycle. ]
td => [ It finds the bugs after the development cycle. ]
td => [ It conforms to the requirements specified in the SRS document. ]
td => [ It checks whether it meets the specified requirements or not. ]
td => [ QA team performs verification in which they verify that the software is according to the requirements specified in the SRS document. ]
td => [ Software tester performs testing of a product. ]
h3 => [ 11) Define the key challenges faced during software testing? ]
p => [ The application should be stable for testing. ]
li => [ Testing should be under a time constraint. ]
li => [ Which tests should execute first? ]
li => [ Testing the complete application. ]
li => [ Regression Testing ]
li => [ Lack of skilled testers. ]
li => [ Changing requirements. ]
li => [ Lack of resources, training, and tools. ]
h3 => [ 12) What is the difference between Retesting and Regression testing? ]
td => [ Regression ]
td => [ Retesting ]
td => [ Regression is a type of testing used to verify whether the new changes in the code have affected the unchanged features or not. ]
td => [ Retesting is the testing of modules that have been failed in the last execution. ]
td => [ The main aim of Regression testing is that any changes made in the code should not affect the existing functionalities. ]
td => [ Retesting is the testing which is performed on the defects that have been fixed. ]
td => [ It is generic testing as it can be performed at any time whenever the changes made in the code. ]
td => [ It is planned testing. ]
td => [ It is performed on the test cases that have been passed. ]
td => [ It is performed on the test cases that have been failed. ]
td => [ Automation can be done for regression testing, while manual testing will be expensive and time consuming. ]
td => [ To perform the Retesting, we cannot automate the test cases. ]
td => [ Defect verification does not come under the Regression testing. ]
td => [ Defect verification comes under the Retesting. ]
td => [ Based on the availability of resources, regression testing is performed in parallel with the retesting. ]
td => [ The priority of retesting is more than the regression testing, so it always performed before the regression testing. ]
h3 => [ 13) Define the role of QA in Software Development? ]
p => [ QA stands for Quality Assurance. QA team persuades the quality by monitoring the whole development process. QA tracks the outcome and adjusting processes to meet the expectation. ]
strong => [ Role of Quality Assurance are: ]
li => [ QA team is responsible for monitoring the process to be carried out for development. ]
li => [ Responsibilities of the QA team are planning, testing, execution process. ]
li => [ QA Lead creates the time table and agrees on a Quality Assurance plan for the product. ]
li => [ QA team communicated the QA process to the team members. ]
li => [ QA team ensures traceability of test cases to requirements. ]
h3 => [ 14) Describe the dimensions of the risk in QA? ]
strong => [ The dimensions of the risk are: ]
strong => [ Schedule: ]
strong => [ Client: ]
strong => [ Human Resource: ]
strong => [ System Resources: ]
strong => [ Quality: ]
h3 => [ 15) What is the test ware? ]
p => [ Test ware is a term used to describe all the materials used to perform the test. Test ware includes test plans, test cases, test data, and any other items needed to perform and design a test. ]
h3 => [ 16) What is Monkey testing? ]
li => [ Monkey testing is a type of black box testing used to test the application by providing random inputs to check the system behavior such as to check the system, whether it is crashing or not. ]
li => [ This type of testing is performed automatically whenever the user provides the random inputs to check the system behavior ]
li => [ There is no need to create test cases to perform monkey testing. ]
li => [ It can also be automated, i.e., we can write the programs or scripts to generate random inputs to check the system behavior. ]
li => [ This technique is useful when we are performing stress or load testing. ]
strong => [ There are two types of monkeys: ]
strong => [ Smart monkeys ]
strong => [ Dumb monkeys ]
p => [  Smart Monkeys 
 ]
li => [ Smart monkeys are those which have a brief idea about the application. ]
li => [ They know that where the pages of an application will redirect to which page. ]
li => [ They also know that the inputs that they are providing are valid or invalid. ]
li => [ If they find any error, then they are smart enough to file a bug. ]
li => [ They also know that what are the menus and buttons. ]
p => [  Dumb Monkeys 
 ]
li => [ Dumb Monkeys are those which have no idea about the application. ]
li => [ They do not know about the pages of an application will redirect to. ]
li => [ They provide random inputs, and they do not know about the starting and ending point of the application.  ]
li => [ They do not know much about the application, but still, they find bugs such as environmental failure or hardware failure. ]
li => [ They also do not know much about the functionality and UI of an application. ]
h3 => [ 17) Write the differences between Preventive and Reactive approaches? ]
p => [  Preventive Approach:  It is also known as the Verification process. Preventive is the approach to prevent defects. In this approach, tests are designed in its early stages of Software Development Lifecycle before the software has developed. In this approach, testers try to prevent defects in the early stages; it comes under Quality Analysis. ]
p => [  Reactive Approach:  It is also known as Validation Process. This approach is to identify defects. In this approach, tests are designed to execute after the software's development. In this approach, we try to find out the defects. It comes under Quality Control.  ]
h3 => [ 18) What is the Quality Audit? ]
p => [  An Audit  is defined as on-site verification activity, such as inspection or examination, of a processor quality system. Quality Audit is the process of systematic analysis of a quality system carried out by an internal or external quality auditor, or an audit team. Quality Audits are performed at predefined time intervals and ensure that the institution has clearly defined internal system monitoring procedures linked to effective action. Audits are an essential management tool to be used for verifying objective evidence of processes. ]
h3 => [ 19) What is a test plan? ]
p => [  The Test Plan  document is a document which contains the plan for all the testing activities to deliver a quality product. The test Plan document is derived from many activities such as product description, SRS, or Use Case documents for all future events of the project. The Test Lead usually prepares it, or Test manager and the focus of the document is to describe what to test, how to test when to test, who will do what test. ]
p => [ 
 ]
h3 => [ 20) How do you decide when you have tested enough? ]
p => [ This is one of the most crucial questions. As a project manager or project lead, sometimes we might face a situation to call off the testing to release the product early. In those cases, we have to decide whether the testers have tested the product enough or not. ]
strong => [ There are many factors involved in real-time projects to decide when to stop testing: ]
li => [ If we reach Testing deadlines or release deadlines ]
li => [ By entering the decided pass percentage of test cases. ]
li => [ In the real-time project, if the risk in the project is under the acceptable limit. ]
li => [ If all the high priority bugs and blockers have been fixed. ]
li => [ If we meet the acceptance criteria. ]
h3 => [ 21) How to design test cases? ]
strong => [ There are mainly two techniques to design the test cases: ]
strong => [ Black box testing ]
li => [ It is a specification-based technique where the testers view the software as a black box with inputs and outputs. ]
li => [ In black box testing, the testers do not know about how the software is structured inside the box, they know only what the software does but do not know how the software does. ]
li => [ This type of technique is valid for all the levels of testing where the specification exists. ]
strong => [ White box testing ]
li => [ White box testing is a testing technique that evaluates the internal logic and structure of the code. ]
li => [ In order to impement the white box testing, the testers should have the knowledge of coding so that they can deal with the internal code. They look into the internal code and finds out the unit which is malfunctioning. ]
h3 => [ 22) What is adhoc testing? ]
p => [ Adhoc testing is an informal way of testing the software. It does not follow the formal process like requirement documents, test plan, test cases, etc. ]
strong => [ Characteristics of adhoc testing are: ]
li => [ Adhoc testing is performed after the completion of formal testing on an application. ]
li => [ The main aim of adhoc testing is to break the application without following any process. ]
li => [ The testers who are executing the adhoc testing should have a deep knowledge of a product. ]
h3 => [ 23) How is monkey testing different from adhoc testing? ]
p => [ Both monkey testing and adhoc testing follows the informal approach, but in monkey testing, we do not need to have deep knowledge of the software. However, to perform adhoc testing, testers should have a deep knowledge of the software. ]
h3 => [ 24) How is adhoc testing different from exploratory testing? ]
p => [ The following is the list of differences between adhoc testing and exploratory testing: ]
td => [ Adhoc testing ]
td => [ Exploratory testing ]
td => [ Adhoc testing is the testing of software without any documentation or requirements specification. ]
td => [ knowledge about the software while exploring the application. ]
td => [ Documentation is not required. ]
td => [ Documentation is mandatory in exploratory testing. ]
td => [ The main aim of adhoc testing is to achieve perfection in testing. ]
td => [ The main aim of exploratory testing is to learn the application. ]
td => [ It is an informal approach. ]
td => [ It is a formal approach. ]
td => [ Adhoc testing does not require an expert testing engineer. ]
td => [ Exploratory testing does not require an expert testing engineer. ]
h3 => [ 25) What are the different levels in software testing? ]
strong => [ There are four different levels in software testing: ]
li => [ Unit/Component testing ]
li => [ Integration testing ]
li => [ System testing ]
li => [ Acceptance testing ]
strong => [ Unit testing ]
li => [ It is the lowest level in most of the models.  ]
li => [ Units are the programs or modules in the software. ]
li => [ Unit testing is performed by the programmer that tests the modules, and if any bug is found, then it is fixed instantaneously. ]
strong => [ Integration testing ]
li => [ Integration means the combination of all the modules, and all these modules are tested as a group. ]
li => [ Integration testing performs the testing on the data that flows from one module to another module. ]
li => [ It basically checks the communication between two or more modules but not the functionality of individual modules. ]
strong => [ System testing ]
li => [ System testing is used to test the complete or integrated system. ]
li => [ It tests the software to ensure that it conforms the specified requirements specified in the SRS document. ]
li => [ It is the final test and performs both functional and non-functional testing. ]
strong => [ Acceptance testing ]
p => [ Acceptance testing is performed by the users or customers to check whether it meets their requirements or not. ]
h3 => [ 26) What is a bug life cycle? ]
p => [ The bug life cycle is also known as the defect life cycle. Bug life cycle is a specific set of states that a bug goes through. The number of states that a defect goes through varies from project to project. ]
strong => [ New ]
p => [ When a new defect is logged and posted for the first time, then the status is assigned as New. ]
strong => [ Assigned ]
p => [ Once the bug is posted by the tester, the lead of the tester approves the bug and assigns the bug to the developing team. ]
strong => [ Open ]
p => [ The developer starts analyzing and works on the defect fix. ]
strong => [ Fixed ]
p => [ When a developer makes a necessary code changes and verifies the change, then he/she can make the bug status as fixed. ]
strong => [ Retest ]
p => [ Tester does the retesting of the code at this stage to check whether the defect is fixed by the developer or not and change the status to retest. ]
strong => [ Reopen ]
p => [ If the bug persists even after the developer has fixed the bug, then tester changes the status to Reopen and once again bug goes through the bug life cycle. ]
strong => [ Verified ]
p => [ The tester retests the bug after it got fixed by the developer if no bug found then it changes the status to Verified. ]
strong => [ Closed ]
p => [ If the bug is no longer exists, then it changes the status to Closed. ]
strong => [ Duplicate ]
p => [ If the defect is repeated twice or the defect corresponds to the same concept of the previous bug, then it changes the status to Duplicate. ]
strong => [ Rejected ]
p => [ If the developer feels that the defect is not a genuine defect, then it changes the status to Rejected. ]
strong => [ Deferred ]
p => [ If the bug is not of higher priority and can be solved in the next release, then the status changes to Deferred. ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ jQuery Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
