
div => [ 
 ]
h1 => [ Most Asked Interview Questions of Kubernetes ]
p => [ Following is the list of most asked interview questions of Kubernetes with their best possible answers: ]
h3 => [ 1) What is Kubernetes? / What do you understand by Kubernetes? ]
p => [ Kubernetes is an open-source container-orchestration tool or system used to automate tasks such as the management, monitoring, scaling, and deploying containerized applications.  ]
h3 => [ 2) What is the use of Kubernetes? ]
p => [ Kubernetes is mainly used to easily manage several containers (since it can handle the grouping of containers), which provides logical units that can be discovered and managed. ]
h3 => [ 3) Who was the inventor of Kubernetes?  ]
p => [ Kubernetes was initially designed and developed by Google and is now maintained by the Cloud Native Computing Foundation. ]
h3 => [ 4) What are K8s?  ]
p => [ K8s is nothing but just another term for Kubernetes. ]
h3 => [ 5) What was the main motive behind the development of Kubernetes?  ]
p => [ The main motive behind the development of Kubernetes is to provide a "platform for automating deployment, scaling, and operations of application containers across clusters of hosts." ]
h3 => [ 6) What do you understand by the term orchestration when it comes to software and DevOps?  ]
p => [ The term orchestration specifies integrating multiple services that allow them to automate processes or synchronize information in a specific time sequence. ]
p => [ For example, suppose we have six or seven microservices for an application to run, then if you place them in separate containers, this would inevitably create obstacles for communication. Using orchestration, we can do it quickly to enable all services in individual containers to work seamlessly to accomplish a single goal. ]
h3 => [ 7) What is the relation between Docker and Kubernetes?  ]
p => [ Docker is an open-source platform used to handle software development. It is mainly used to package the settings and dependencies that the software/application needs to run into a container, which allows for portability and several other advantages. On the other hand, Kubernetes is used to allow the manual linking and orchestration of several containers, running on multiple hosts that have been created using Docker.  ]
h3 => [ 8) What are the key differences between the Docker Swarm and Kubernetes?  ]
p => [ Docker Swarm is an open-source container orchestration platform used to cluster and schedule Docker containers. It is a native of Docker. Following is the list of key differences between the Docker Swarm and Kubernetes:  ]
th => [ Docker Swarm ]
th => [ Kubernetes ]
td => [ Docker Swarm is easy and convenient to set up, but it doesn't have a robust cluster. ]
td => [ Kubernetes is more complicated than Docker Swarm to set up, but it assures a robust cluster. ]
td => [ Docker Swarm can't do auto-scaling as the Kubernetes can do, but Docker's scaling is five times faster than Kubernetes. ]
td => [ Kubernetes can do auto-scaling, but scaling is slower than Docker Swarm. ]
td => [ Docker Swarm doesn't provide a GUI. ]
td => [ Kubernetes provides a GUI in the form of a dashboard. ]
td => [ Docker Swarm provides an automatic load balancing feature of traffic between containers in a cluster. ]
td => [ It requires manual intervention in Kubernetes for load balancing such traffic. ]
td => [ Docker requires third-party tools such as the ELK stack for logging and monitoring. ]
td => [ Kubernetes provides such integrated tools for logging and monitoring purposes. ]
td => [ In Docker Swarm, we can easily share storage volumes with any container. ]
td => [ In Kubernetes, we can only share storage volumes with containers in the same pod. ]
td => [ We can deploy rolling updates in Docker Swarm but can't deploy automatic rollbacks. ]
td => [ In Kubernetes, we can deploy rolling updates as well as automatic rollbacks. ]
h3 => [ 9) What do you understand by a node in Kubernetes?  ]
p => [ In Kubernetes, a node is the smallest unit of hardware. It is used to define a single machine in a cluster that can act as a virtual machine from a cloud provider or physical machine in the data center. Every machine of the Kubernetes cluster can act as a substitute for other machines.  ]
h3 => [ 10) What is the use of a Kubernetes Kube-scheduler? ]
p => [ A Kube-scheduler is the default scheduler for Kubernetes. It is used to assign nodes to newly created pods.  ]
h3 => [ 11) What do you understand by daemon sets in Kubernetes?  ]
p => [ Daemon sets are sets of pods that run on a host and are used for host layers attributes like monitoring network or simple network.  ]
h3 => [ 12) What is Heapster in Kubernetes?  ]
p => [ A Heapster is a metrics collection and performance monitoring system for data collected by the Kublet.  ]
h3 => [ 13) What are the main reasons behind using Kubernetes? ]
p => [ Kubernetes is mainly used because of the following reasons: ]
li => [ We can use Kubernetes easily on on-premises bare metal, OpenStack, public clouds Google, Azure, AWS, etc. ]
li => [ Using Kubernetes, we can avoid vendor lock issues as it can use any vendor-specific APIs or services except where Kubernetes provides an abstraction, e.g., load balancer and storage. ]
li => [ It enables applications that need to be released and updated without any downtime. ]
h3 => [ 14) What does the node status contain in Kubernetes?  ]
p => [ In Kubernetes, the main components of a node status are Address, Condition, Capacity, and Info. ]
h3 => [ 15) What is the Kubernetes Network Policy? ]
p => [ In Kubernetes, the Network Policy specifies how the same namespace's pods would communicate with each other and the network endpoint.  ]
h3 => [ 16) What process is used to run on the Kubernetes Master Node? ]
p => [ The Kube-api server process runs on the Kubernetes Master Node. It is used to scale the deployment of more instances.  ]
h3 => [ 17) Which types of systems use Kubernetes?  ]
p => [ Kubernetes is the Linux kernel that is used for distributed systems. It provides a consistent interface for applications that use the shared pool of resources.  ]
h3 => [ 18) What do you understand by Kubernetes controller manager?  ]
p => [ The Kubernetes controller manager is a daemon used for garbage collection, core control loops, and namespace creation. It also enables the running of more than one process on the master node.  ]
h3 => [ 19) What is the use of a namespace in Kubernetes?  ]
p => [ In Kubernetes, Namespaces are used for dividing cluster resources between users. It is also helpful for more than one user to spread projects or teams and provide a scope of resources. ]
h3 => [ 20) What is a pod in Kubernetes? ]
p => [ In Kubernetes, containers are not run directly so, pods are high-level structures used to wrap one or more containers to make them able to run. Containers in the same pod share a local network and the same resources. That's why they can easily communicate with other containers in the same pod. In this way, they were on the same machine while maintaining a degree of isolation. ]
h3 => [ 21) What is the role of the Kube-scheduler in Kubernetes? ]
p => [ In Kubernetes, the Kube-scheduler are used to assign nodes to newly created pods.  ]
h3 => [ 22) What do you understand by a cluster of containers in Kubernetes? ]
p => [ A cluster of containers is nothing but a set of machine elements or nodes. Clusters specify specific routes so that the containers running on the nodes can communicate with each other. In Kubernetes, the container engine also provides hosting for the API server.  ]
h3 => [ 23) What are the different types of controller managers?  ]
p => [ Following is the list of different types of controller managers: ]
li => [ Endpoints controller ]
li => [ Service accounts controller ]
li => [ Namespace controller ]
li => [ Node controller ]
li => [ Replication controller ]
li => [ Token controller ]
h3 => [ 24) What is the Google Container Engine? What is its use?  ]
p => [ The Google Container Engine is an open-source management platform tailor-made for Docker containers and clusters. It is used to provide support for the clusters that run in Google public cloud services. ]
h3 => [ 25) What is the biggest disadvantage of Kubernetes? ]
p => [ The biggest disadvantages of Kubernetes are listed below: ]
li => [ Security is the biggest issue with Kubernetes. It is not very secure. ]
li => [ Kubernetes dashboard is not very user-friendly. ]
li => [ Kubernetes is very complex to use. That's why it can reduce productivity. ]
li => [ Kubernetes is costlier than its alternatives. ]
h3 => [ 26) What is kubelet in Kubernetes? ]
p => [ In Kubernetes, the kubelet is a service agent used to control and maintain a group of pods by checking pod specifications. The kubelet runs on each node and makes them able to communicate between a master node and a slave node.  ]
h3 => [ 27) What do you understand by the node port service? ]
p => [ The node port service is a way to attain external traffic to your service. It is used to open a particular port on all nodes and forward the network traffic to this port. ]
h3 => [ 28) What is Cluster IP in Kubernetes?  ]
p => [ In Kubernetes, the cluster IP is a service inside the cluster that enables other apps to be accessed within the cluster.  ]
h3 => [ 29) What are the various services available in Kubernetes? ]
p => [ Following is the list of various services available in Kubernetes: ]
li => [ Cluster IP service ]
li => [ Load Balancer service ]
li => [ Node Port service ]
li => [ External Name Creation service etc. ]
h3 => [ 30) What do you understand by Ingress Network? ]
p => [ Ingress network is a set of rules which allow permission for connections into the Kubernetes cluster.  ]
h3 => [ 31) Explain the architecture of Kubernetes with a diagram? ]
strong => [ Architectural Diagram: ]
p => [  Explanation of the critical components used in the diagram:   ]
p => [  Master Node:  The master node is the first and most crucial component of the Kubernetes' architecture. It is used to manage the Kubernetes cluster. It is the entry point for all kinds of administrative tasks. ]
p => [ There may be more than one master node in the cluster to check for fault tolerance. ]
p => [  API Server:  The API server is an entry point for all the REST commands. It is used to control the cluster. ]
p => [  Scheduler:  The scheduler is used to schedule the tasks to the slave node and distribute the workload. It also stores the resource usage information for every slave node. ]
p => [  Etcd:  The etcd component is used to store configuration detail and good values. It communicates with the most component and receives commands and work. It is also responsible for managing network rules and port forwarding activity. ]
p => [  Worker/Slave nodes:  Worker nodes or Slave nodes are another essential components that contain all the required services to manage the networking between the containers, communicate with the master node, which allows you to assign resources to the scheduled boxes. ]
p => [  Kubelet:  It gets the Pod's configuration from the API server and ensures that the described containers are up and running. ]
p => [  Docker Container:  The Docker container runs on each of the worker nodes, which runs the configured pods. ]
p => [  Pods:  A pod is specified as a combination of single or multiple containers that logically run together on nodes. ]
h3 => [ 32) What do you understand by Kube-proxy in Kubernetes? ]
p => [ In Kubernetes, Kube-proxy is an implementation of both a network proxy and a load balancer. It is used to support service abstraction with other networking operations and responsible for directing traffic to the container depending on IP and the port number.  ]
h3 => [ 33) What do you understand by Kubectl in Kubernetes? What is it used for?  ]
p => [ In Kubernetes, Kubectl is software that is used to control Kubernetes clusters. The ctl in "Kubectl" stands for control, a command-line interface to pass the command to the cluster and manage the Kubernetes component.  ]
h3 => [ 34) What is the full form of GKE, and what is its use?  ]
p => [ The full form of GKE is Google Container Engine. It is a management platform that supports clusters and Docker containers that run within the public cloud services of Google.  ]
h3 => [ 35) What is the difference between a daemon set, a deployment, and a replication controller? ]
p => [ Following is the difference between a daemon set, a deployment, and a replication controller: ]
p => [  Daemon set:  A daemon set is used to ensure that all nodes you have selected are running precisely one copy of a pod. ]
p => [  Deployment:  A deployment is a resource object in Kubernetes. It is used to provide declarative updates to applications. It also manages the scheduling and lifecycle of pods. It offers many key features for managing pods, such as pod health checks, rolling updates of pods, the ability to roll back and quickly scale pods horizontally. ]
p => [  Replication Controller:  The replication controller is used to specify how many exact copies of a pod should be running in a cluster. It differs from a deployment in that it does not offer pod health checks, and the rolling update process is not as robust. ]
h3 => [ 36) What is the use of load balancer in Kubernetes?  ]
p => [ A load balancer is used in Kubernetes to provide a standard way to distribute network traffic among different services, which runs in the backend.  ]
h3 => [ 37) How can we run Kubernetes locally?  ]
p => [ We can use the Minikube tool to run Kubernetes locally. It runs a single-node cluster in a VM (virtual machine) on the computer. So, it is best for users who have just started learning Kubernetes.  ]
h3 => [ 38) What is a sidecar container, and what is its use? ]
p => [ A sidecar container is a utility container used to support the main container in a Pod. We can pair a sidecar container with one or more main containers and enhance those primary containers' functionality. It is mainly used for monitoring or when the system logs.  ]
h3 => [ 39) What do you understand by a headless service? ]
p => [ A headless service is a specific type of service which uses an IP address, but instead of load balancing, it returns associated pods. ]
h3 => [ 40) What are the main objects used in Kubernetes? ]
p => [ Following is the list of objects used in Kubernetes: ]
li => [ Pods ]
li => [ Replication sets and controllers ]
li => [ Jobs and cron jobs ]
li => [ Daemon sets ]
li => [ Distinctive identities ]
li => [ Deployments ]
li => [ Stateful sets. ]
h3 => [ 41) What are the different types of pods in Kubernetes? ]
p => [ There are mainly two types of pods in Kubernetes: ]
strong => [ Single Container Pods: ]
strong => [ multi-container pods: ]
h3 => [ 42) What do you understand by Prometheus in Kubernetes? ]
p => [ Prometheus is an application that is used for the monitoring and alerting process. We can call out Prometheus to your systems, grab real-time metrics, compress it, and stores them properly in a database.  ]
h3 => [ 43) What is the difference between a replica set and a replication controller? ]
p => [ A Replica set and a Replication Controller both are used to do almost the same thing. Both of them ensure that a specified number of pod replicas are running at any given time. ]
p => [ The usage of selectors can distinguish the difference between them to replicate pods. The Replica Set uses Set-Based selectors while replication controllers use Equity-Based selectors. ]
h3 => [ 44) What is the difference between the Equity-Based Selectors and the Selector-Based Selectors?  ]
p => [ See the differences between the Equity-Based Selectors and the Selector-Based Selectors: ]
p => [  Equity-Based Selectors:  Equity-Based Selectors are the type of selector that allows filtering by label key and values. This selector will only look for the pods, which will have the same phrase as that of the label. For example, if your label key says app=nginx, then, with this selector, you can only look for those pods with label app equal to Nginx. ]
p => [  Selector-Based Selectors:  The Selector-Based Selectors are used to allow filtering keys according to a set of values. You can say that these selectors look for pods whose label has been mentioned in the set. For example, if your label key says app in (Nginx, NPS, Apache). With this selector, if your app is equal to any of Nginx, NPS, or Apache, then the selector will take it as a true result. ]
h3 => [ 45) What are some examples of recommended security measures for Kubernetes?  ]
p => [ Following are some examples of recommended security measures for Kubernetes: ]
li => [ Defining resource quota ]
li => [ Support for auditing ]
li => [ Restriction of etcd access ]
li => [ Regular security updates to the environment ]
li => [ Network segmentation ]
li => [ Definition of strict resource policies ]
li => [ Continuous scanning for security vulnerabilities ]
li => [ Using images from authorized repositories etc. ]
h3 => [ 46) How can we get a static IP for a Kubernetes load balancer? ]
p => [ We can achieve a static IP for the Kubernetes load balancer by changing DNS records because the Kubernetes Master can assign a new static IP address.  ]
h3 => [ 47) What is the role of kube-apiserver and kube-scheduler?  ]
p => [ The kube - apiserver is the master node control panel's front-end and follows the scale-out architecture. This is used to expose all the APIs of the Kubernetes Master node components. It is responsible for establishing communication between Kubernetes Node and the Kubernetes master components. ]
p => [ The kube-scheduler is used to distribute and manage the workload on the worker nodes. It chooses the most suitable node to run the unscheduled pod based on resource requirement and keeps track of resource utilization. It makes sure that the workload is not scheduled on nodes that are already full. ]
h3 => [ 48) What do you understand by minikube in Kubernetes?  ]
p => [ Minikube is software that facilitates users to run Kubernetes. It runs on the single nodes within the VM on your computer. This tool is also used by programmers who are developing an application using Kubernetes. ]
h3 => [ 49) Which are the most important Kubectl commands?  ]
p => [ Following is the list of some important Kubectl commands: ]
li => [ kubectl annotate ]
li => [ kubectl cluster-info ]
li => [ kubectl attach ]
li => [ kubectl apply ]
li => [ kubectl config ]
li => [ kubectl autoscale ]
li => [ kubectl config current-context ]
li => [ kubectl config set etc. ]
h3 => [ 50) What do you understand by the labels in Kubernetes?  ]
p => [ Labels are a set of keys that contain some values. The key values are connected to pods, replication controllers, and associated services. Generally, labels are added to some object during its creation time. We can easily modify them at the run time. ]
h3 => [ 51) What are the main objectives of the replication controller? ]
p => [ Following are the main objectives of the replication controller: ]
li => [ A replication controller is mainly responsible for controlling and administering the pod lifecycle. ]
li => [ It is used to monitor and verify whether the allowed numbers of replicas are running or not. ]
li => [ It also helps the users to check the pod status. ]
li => [ It enables to alter a pod. The user can drag its position the way interested in it. ]
h3 => [ 52) What do you understand by Sematext Docker Agent? ]
p => [ The Sematext Docker agent is a log collection agent with events and metrics, which runs as a small container in each Docker host. These agents are responsible for gathering metrics, events, and logs for all cluster nodes and containers.  ]
h3 => [ 53) What do you understand by persistent volume in Kubernetes? ]
p => [ In Kubernetes, a persistent volume is a storage unit that the administrator controls. It is used to manage an individual pod in a cluster. ]
h3 => [ 54) Do all of the nodes occupy the same size in the cluster?  ]
p => [ No, all the nodes don't occupy the same size in the cluster. The Kubernetes components, such as kubelet, take up resources on your nodes, and you still need more capacity for the node to do any task. In the larger cluster, it is always preferred to create a mix of different instance sizes. So, the Kubernetes can easily schedule the pods that require a lot of memory with intensive compute workloads on large nodes, and smaller nodes can handle smaller pods.  ]
h3 => [ 55) What is the ContainerCreating pod in Kubernetes? ]
p => [ A ContainerCreating pod is a specific type of pod scheduled on a node but can't start up properly. ]
h3 => [ 56) What are the different types of Kubernetes Volume?  ]
p => [ Following are the different types of Kubernetes Volume: ]
li => [ EmptyDir ]
li => [ GCE persistent disk ]
li => [ Flocker ]
li => [ HostPath ]
li => [ NFS ]
li => [ ISCSI ]
li => [ rbd ]
li => [ PersistentVolumeClaim ]
li => [ downwardAPI ]
h3 => [ 57) What are the Secrets in Kubernetes? ]
p => [ Secrets are the objects in Kubernetes that stores sensitive information like username and password after performing encryption. ]
h3 => [ 58) What do you understand by OpenShift in Kubernetes? ]
p => [ OpenShift is a public cloud application development and hosting platform developed by Red Hat. It is used to provide automation for management so that developers can easily write codes.  ]
h3 => [ 59) What do you understand by K8s in Kubernetes? ]
p => [ K8s (K-eight characters-S) is a term used for Kubernetes. It is an open-source orchestration framework used for the containerized applications. ]
h3 => [ 60) What do you understand by federated clusters? ]
p => [ Federated clusters are a set of multiple clusters that are managed as a single cluster. ]
h3 => [ 61) What is the difference between Kubernetes Volumes and Docker volumes? ]
p => [ The main differences between Kubernetes Volumes and Docker volumes are:  ]
th => [ Kubernetes Volumes ]
th => [ Docker Volumes ]
td => [ The Kubernetes volumes are not limited to any container. ]
td => [ The Docker volumes are limited to a pod in the container. ]
td => [ Kubernetes volumes support all containers deployed in a pod of Kubernetes. ]
td => [ Docker volumes do not support all containers deployed in Docker. ]
h3 => [ 62) What are the ways to provide API-Security on Kubernetes?  ]
p => [ There are the following ways to provide API-Security on Kubernetes: ]
li => [ Using correct auth mode with API server authentication mode. ]
li => [ Making kubeless that protects its API via authorization-mode. ]
li => [ Ensuring the kube-dashboard uses a restrictive RBAC (Role-Based Access Control) policy. ]
h3 => [ 63) What do you understand by PVC? What is its full form?  ]
p => [ The full form of PVC is Persistent Volume Claim. It is storage requested by Kubernetes for pods. In PVC, it doesn't require knowing the underlying provisioning. You can create the claim in the same namespace where the pod is created. ]
h3 => [ 64) What do you understand by container resource monitoring? ]
p => [ The users need to understand the application's performance and resource utilization at all the different abstraction layers. Kubernetes create abstraction at different levels like containers, pods, services, and whole cluster to monitor them well. This process is called container resource monitoring. ]
strong => [ Following is a list of some container resource monitoring tools: ]
strong => [ Heapster: ]
strong => [ InfluxDB: ]
strong => [ Grafana: ]
strong => [ CAdvisor: ]
strong => [ Prometheus: ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ Company Interview Questions &amp; Procedure ]
a => [ JavaScript Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
a => [ jQuery Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
