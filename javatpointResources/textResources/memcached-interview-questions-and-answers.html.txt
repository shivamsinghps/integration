
div => [ 
 ]
h1 => [ Memcached Interview Questions ]
p => [  A list of top frequently asked  Memcached interview questions  and answers are given below.  ]
h3 => [ 1) What is Memcached? ]
p => [ Memcached is a general-purpose free and open source, high performance, distributed memory object caching system. It is used to speed up database-driven websites by caching data and objects in RAM. ]
p => [ In simple words, you can say that Memcached is a component which stores data temporally for 1hour/ 6 hour/ 12 hours/ 1 day, etc. and you can integrate this component with your applications to increase their performance. ]
h3 => [ 2) In which language Memcached is written and who is the author? ]
p => [  Memcached is written in "C language". It was developed by Brad Fitzpatrick in 2003. Initially, it is developed for LiveJournal, but now it is used by Wikipedia, Twitter, Facebook, Flickr, Netlog, YouTube, etc. ]
h3 => [ 3) How Memcached works? ]
p => [ See the following steps to understand how Memcached works: ]
li => [ Memcached first tries to get the detail of the user, and the browser sends the request to the application. ]
li => [ An application calls the Memcached for a particular user. ]
li => [ If Result found in Memcached, Return the result from Memcached. ]
li => [ If Result Not found in Memcached, Application sends the request to the database and save the result in Memcached. ]
li => [ Each Memcached have one unique key. ]
li => [ Get/Set the data work on behalf of the key. ]
li => [ You can also delete one or more keys. ]
li => [ You can also assign tags to one/more keys. ]
h3 => [ 4) When was the first version of Memcached launched? ]
p => [ The first version of Memcached was launched on May 22, 2003. ]
h3 => [ 5) What is the usage of Memcached? In which types of websites, it is generally used? ]
p => [ Memcached is used to increase the speed of dynamic database driven websites. It caches data and objects in RAM to reduce the execution time.  ]
p => [ It is generally used: ]
li => [ In social networking sites for profile caching. ]
li => [ For content aggregation i.e. HTML/Page caching. ]
li => [ In E-commerce websites for Session and HTML caching. ]
li => [ In location-based services for database query scaling. ]
li => [ In gaming and entertainment services for session caching. ]
li => [ It can also be used to track cookie/ profile for ad targeting. ]
h3 => [ 6) What is the best usage of Memcached? ]
p => [  Best usage of Memcached: ]
li => [ It is easy to install in Windows as well as in the UNIX operating system. ]
li => [ It provides API integration for all the major languages like Java, PHP, C/C++, Python, Ruby, Perl, etc. ]
li => [ It enhances the performance of web application by caching. ]
li => [ It reduces the burden of the database server. ]
li => [ It facilitates you to delete one or more values. ]
li => [ It facilitates you to update the values of keys. ]
h3 => [ 7) What are the drawbacks/ limitations of Memcached? ]
p => [ A list of the limitations or drawbacks of Memcached: ]
li => [ Memcached cannot store data persistently and permanently. ]
li => [ Memcached is not a database. It stores only temporary data. ]
li => [ Memcached cannot cache large objects. ]
li => [ Memcached is not application specific. ]
li => [ Memcached is not fault-tolerant or highly available. ]
h3 => [ 8) In which conditions cache cannot retain the stored information? ]
p => [ The cache cannot retain the stored information in following conditions: ]
li => [ When the allocated memory for the cache is exhausted. ]
li => [ When an item from the cache is deleted. ]
li => [ When an individual item in the cache is expired. ]
h3 => [ 9) What is the difference between Memcache and Memcached? ]
p => [ Difference between Memcache and Memcached: ]
strong => [ Table: ]
th => [ Memcache ]
th => [ Memcached ]
td => [ Memcache module provides handy procedural and object-oriented interface to Memcached. ]
td => [ Memcached is a high-performance, distributed memory object caching system. ]
td => [ Memcache is an extension that allows you to work through handy object-oriented (OOP's) and procedural interfaces. ]
td => [ Memcached is an extension that uses the libMemcached library to provide API for communicating with Memcached servers. ]
td => [ The Memcache module provides a session handler (Memcache). ]
td => [ The Memcached provides a session handler (Memcached). ]
td => [ It is designed to reduce database load in dynamic web applications. ]
td => [ It is used to increase the dynamic web applications by reducing database load. It is the latest API. ]
h3 => [ 10) Can we share a single instance of Memcache between multiple projects? ]
p => [ Yes, we can share a single instance of Memcache between multiple projects because being a memory storage space, Memcache can be run on one or more servers. In Memcache, you can also configure your client to speak to a particular set of instances. ]
p => [ We can also run two different Memcache processes on the same host being completely independent and without any interference. If you partition your data, it is important to know from which instance to get the data from or to put into. ]
h3 => [ 11) Explain the differences between SAP HANA and Memcached? ]
p => [ SAP HANA is an in-memory RDBMS and mostly used for accelerating SAP applications while Memcached is a key/value caching system and used for accessing both RDBMS and NoSQL databases. ]
h3 => [ 12) How to connect Memcached server with telnet command? ]
p => [   By using  telnet hostname portNumber  command, you can connect Memcached server with telnet command. ]
h4 => [ Syntax ]
h4 => [ Example ]
p => [ The given example shows that how to connect to a Memcached server and execute a simple set and get command. Let's assume that the server of Memcached is running on host 127.0.0.1 and port 11211. ]
h3 => [ 13) How to get the value of key? ]
p => [  By using the  get  command, you can get the value of the key. ]
h4 => [ Syntax ]
h4 => [ Example ]
p => [ In the given example, we use javatpoint as the key and store Memcached in it with an expiration time of 900 seconds. ]
h3 => [ 14) How to set the value of key? ]
p => [  By using  set  command, you can set the value of the key. ]
h4 => [ Syntax ]
h4 => [ Example ]
p => [ In the given example, we use javatpoint as the key and set value Memcached in it with an expiration time of 900 seconds. ]
h3 => [ 15) How to add value in the key? ]
p => [  By using  add  command, you can add value in the key. ]
h4 => [ Syntax ]
h4 => [ Example ]
p => [ In the given example, we use "key" as the key and add the value Memcached in it with 900 seconds expiration time. ]
h3 => [ 16) How to replace the value of the key? ]
p => [   By using  replace  command, you can replace the value of the key. ]
h4 => [ Syntax ]
h4 => [ Example ]
p => [ In the given example, we use "key" as the key and add the value Memcached in it with 900 seconds expiration time. After this, the same key is replaced with the "redis". ]
h3 => [ 17) How to append the value of the key? ]
p => [  By using  append  command, you can append the value of the key. ]
h4 => [ Syntax ]
h4 => [ Example ]
p => [ In the given example, we are trying to add some data in a key that does not exist. Hence, NOT_STORED is returned by Memcached. After this, we set one key and append data into it. ]
h3 => [ 18) How to prepend value of key? ]
p => [  By using  prepend  command, you can prepend value of the key. ]
h4 => [ Syntax ]
h4 => [ Example ]
p => [ In the given example, we are trying to add some data in a key that does not exist. Hence, NOT_STORED is returned by Memcached. After this, we set one key and prepend data into it. ]
h3 => [ 19) How to delete the key? ]
p => [  By using  delete   command, you can delete the key. ]
h4 => [ Syntax ]
h4 => [ Example ]
p => [ In the given example, we use javatpoint as a key and add the value Memcached in it with 900 seconds expiration time. After this, it deletes the stored key. ]
h3 => [ 20) How to show the stats? ]
p => [  By using  stats  command, you can show the stats. ]
h4 => [ Syntax ]
h4 => [ Example ]
h3 => [ 21) How to get the versions? ]
p => [  By using  Version  command, you can get the versions. ]
h3 => [ 22) How to close the connection? ]
p => [  By using the  Quit  command, you can close the connection. ]
h3 => [ 23) How would you update Memcached when data changes? ]
p => [ There are two methods to update Memchached when data changes: ]
strong => [ By clearing the cache proactively: ]
strong => [ By resetting the cache: ]
h3 => [ 24) What is Dogpile effect? How can you prevent this effect? ]
p => [ If the cache expires, and websites are hit by multiple requests made by the client at the same time, this effect is known as Dogpile effect. ]
p => [ This effect can be prevented by using a semaphore lock. In this system when value expires, the first process acquires the lock and starts generating new value. ]
h3 => [ 25) What happens to the data stored in Memcached when server accidentally gets shut down? ]
p => [ In Memcached, data is not permanently stored. It is not a durable data so, if the server is shut down or restarted, all the data stored in Memcached will be deleted. ]
h3 => [ 26) If you have multiple Memcache servers and one of the Memcache servers fails which has your data, will it ever try to get key data from that one failed server? ]
p => [ The data in the failed server won't get removed, but there is a provision for auto-failure, which can be configured for multiple nodes. Fail-over can be triggered during any socket or Memcached server level errors and not during normal client errors like adding an existing key, etc. ]
h3 => [ 27) How can you minimize the Memcached server outages? ]
p => [ Following are the methods to minimize the Memcached server outage: ]
li => [ When one instance fails, several of them go down, this situation will put larger load on the database server when the client reloaded the lost data. To avoid this, you should write your code to minimize cache stampedes, and it will leave a comparatively less impact. ]
li => [ You can bring up an instance of Memcached on a new machine using the lost machines IP address. ]
li => [ The Code is another option to minimize server outages as it gives you the liberty to change the Memcached server list with minimal work. ]
li => [ Setting timeout value is another option that some Memcached clients implement for Memcached server outage. When your Memcached server goes down, the client will keep trying to send a request till the time-out limit is reached.
 ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Java Multithreading Questions ]
a => [ Java String &amp; Exception Questions ]
a => [ Java Collection Interview Questions ]
a => [ JDBC Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
