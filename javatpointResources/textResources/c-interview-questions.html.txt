
div => [ 
 ]
h1 => [ C Programming Interview Questions ]
p => [ A list of 50 top frequently asked C programming interview questions and answers are given below. ]
h3 => [ 1) What is C language? ]
p => [  C is a mid-level and procedural programming language. The Procedural programming language is also known as the structured programming language is a technique in which large programs are broken down into smaller modules, and each module uses structured code. This technique minimizes error and misinterpretation.  More details. ]
h3 => [ 2) Why is C known as a mother language? ]
p => [  C is known as a mother language because most of the compilers and JVMs are written in C language. Most of the languages which are developed after C language has borrowed heavily from it like C++, Python, Rust, javascript, etc. It introduces new core concepts like arrays, functions, file handling which are used in these languages.  More details. ]
h3 => [ 3) Why is C called a mid-level programming language? ]
p => [  C is called a mid-level programming language because it binds the low level and high -level programming language. We can use C language as a System programming to develop the operating system as well as an Application programming to generate menu driven customer driven billing system.  More details. ]
h3 => [ 4) Who is the founder of C language? ]
p => [  Dennis Ritchie.  More details. ]
h3 => [ 5) When was C language developed? ]
p => [  C language was developed in 1972 at bell laboratories of AT&amp;T.  More details. ]
h3 => [ 6) What are the features of the C language? ]
p => [ The main features of C language are given below: ]
strong => [ Simple: ]
strong => [ Portable: ]
strong => [ Mid Level: ]
strong => [ Structured: ]
strong => [ Fast Speed: ]
strong => [ Memory Management: ]
strong => [ Extensible: ]
a => [ More details. ]
h3 => [ 7) What is the use of printf() and scanf() functions? ]
p => [  printf():  The printf() function is used to print the integer, character, float and string values on to the screen. ]
p => [ Following are the format specifier:  ]
strong => [ %d ]
strong => [ %s ]
strong => [ %c ]
strong => [ %f ]
p => [  scanf() : The scanf() function is used to take input from the user. ]
a => [ More details. ]
h3 => [ 8) What is the difference between the local variable and global variable in C? ]
p => [ Following are the differences between a local variable and global variable: ]
th => [ Basis for comparison ]
th => [ Local variable ]
th => [ Global variable ]
td => [ Declaration ]
td => [ A variable which is declared inside function or block is known as a local variable. ]
td => [ A variable which is declared outside function or block is known as a global variable. ]
td => [ Scope ]
td => [ The scope of a variable is available within a function in which they are declared. ]
td => [ The scope of a variable is available throughout the program. ]
td => [ Access ]
td => [ Variables can be accessed only by those statements inside a function in which they are declared. ]
td => [ Any statement in the entire program can access variables. ]
td => [ Life ]
td => [ Life of a variable is created when the function block is entered and destroyed on its exit. ]
td => [ Life of a variable exists until the program is executing. ]
td => [ Storage ]
td => [ Variables are stored in a stack unless specified. ]
td => [ The compiler decides the storage location of a variable. ]
a => [ More details. ]
h3 => [ 9) What is the use of a static variable in C? ]
p => [ Following are the uses of a static variable: ]
li => [ A variable which is declared as static is known as a static variable. The static variable retains its value between multiple function calls. ]
li => [ Static variables are used because the scope of the static variable is available in the entire program. So, we can access a static variable anywhere in the program. ]
li => [ The static variable is initially initialized to zero. If we update the value of a variable, then the updated value is assigned. ]
li => [ The static variable is used as a common value which is shared by all the methods. ]
li => [ The static variable is initialized only once in the memory heap to reduce the memory usage. ]
a => [ More details. ]
h3 => [ 10) What is the use of the function in C? ]
strong => [ Uses of C function are: ]
li => [ C functions are used to avoid the rewriting the same code again and again in our program. ]
li => [ C functions can be called any number of times from any place of our program. ]
li => [ When a program is divided into functions, then any part of our program can easily be tracked. ]
li => [ C functions provide the reusability concept, i.e., it breaks the big task into smaller tasks so that it makes the C program more understandable. ]
a => [ More details. ]
h3 => [ 11) What is the difference between call by value and call by reference in C? ]
strong => [ Following are the differences between a call by value and call by reference are: ]
th => [ Call by value ]
th => [ Call by reference ]
td => [ Description ]
td => [ When a copy of the value is passed to the function, then the original value is not modified. ]
td => [ When a copy of the value is passed to the function, then the original value is modified. ]
td => [ Memory location ]
td => [ Actual arguments and formal arguments are created in separate memory locations. ]
td => [ Actual arguments and formal arguments are created in the same memory location. ]
td => [ Safety ]
td => [ In this case, actual arguments remain safe as they cannot be modified. ]
td => [ In this case, actual arguments are not reliable, as they are modified. ]
td => [ Arguments ]
td => [ The copies of the actual arguments are passed to the formal arguments. ]
td => [ The addresses of actual arguments are passed to their respective formal arguments. ]
strong => [ Example of call by value: ]
strong => [ Output: ]
strong => [ Example of call by reference: ]
strong => [ Output: ]
a => [ More details. ]
h3 => [ 12) What is recursion in C? ]
p => [ When a function calls itself, and this process is known as recursion. The function that calls itself is known as a recursive function. ]
p => [ Recursive function comes in two phases: ]
li => [ Winding phase ]
li => [ Unwinding phase ]
p => [  Winding phase : When the recursive function calls itself, and this phase ends when the condition is reached. ]
p => [  Unwinding phase : Unwinding phase starts when the condition is reached, and the control returns to the original call. ]
strong => [ Example of recursion ]
strong => [ Output: ]
a => [ More details. ]
h3 => [ 13) What is an array in C? ]
p => [ An Array is a group of similar types of elements. It has a contiguous memory location. It makes the code optimized, easy to traverse and easy to sort. The size and type of arrays cannot be changed after its declaration. ]
strong => [ Arrays are of two types: ]
strong => [ One-dimensional array ]
strong => [ Syntax: ]
strong => [ Multidimensional array ]
strong => [ Syntax: ]
strong => [ Example of an array: ]
strong => [ Output: ]
a => [ More details. ]
h3 => [ 14) What is a pointer in C? ]
p => [ A pointer is a variable that refers to the address of a value. It makes the code optimized and makes the performance fast. Whenever a variable is declared inside a program, then the system allocates some memory to a variable. The memory contains some address number. The variables that hold this address number is known as the pointer variable. ]
strong => [ For example: ]
p => [ The above syntax tells that p is a pointer variable that holds the address number of a given data type value. ]
strong => [ Example of pointer ]
strong => [ Output: ]
a => [ More details. ]
h3 => [ 15) What is the usage of the pointer in C? ]
strong => [ Accessing array elements ]
strong => [ Dynamic memory allocation ]
strong => [ Call by Reference ]
strong => [ Data Structures like a tree, graph, linked list, etc. ]
h3 => [ 16) What is a NULL pointer in C? ]
p => [ A pointer that doesn't refer to any address of value but NULL is known as a NULL pointer. When we assign a '0' value to a pointer of any type, then it becomes a Null pointer. ]
a => [ More details. ]
h3 => [ 17) What is a far pointer in C? ]
p => [ A pointer which can access all the 16 segments (whole residence memory) of RAM is known as far pointer. A far pointer is a 32-bit pointer that obtains information outside the memory in a given section. ]
h3 => [ 18) What is dangling pointer in C? ]
li => [ If a pointer is pointing any memory location, but meanwhile another pointer deletes the memory occupied by the first pointer while the first pointer still points to that memory location, the first pointer will be known as a dangling pointer. This problem is known as a dangling pointer problem. ]
li => [ Dangling pointer arises when an object is deleted without modifying the value of the pointer. The pointer points to the deallocated memory. ]
strong => [ Let's see this through an example. ]
p => [ In the above example, initially memory is allocated to the pointer variable ptr, and then the memory is deallocated from the pointer variable. Now, pointer variable, i.e., ptr becomes a dangling pointer. ]
strong => [ How to overcome the problem of a dangling pointer ]
p => [ The problem of a dangling pointer can be overcome by assigning a NULL value to the dangling pointer. Let's understand this through an example: ]
p => [ In the above example, after deallocating the memory from a pointer variable, ptr is assigned to a NULL value. This means that ptr does not point to any memory location. Therefore, it is no longer a dangling pointer. ]
h3 => [ 19) What is pointer to pointer in C? ]
p => [ In case of a pointer to pointer concept, one pointer refers to the address of another pointer. The pointer to pointer is a chain of pointers. Generally, the pointer contains the address of a variable. The pointer to pointer contains the address of a first pointer. Let's understand this concept through an example: ]
p => [ In the above example, pptr is a double pointer pointing to the address of the ptr variable and ptr points to the address of 'a' variable. ]
a => [ More details. ]
h3 => [ 20) What is static memory allocation? ]
li => [ In case of static memory allocation, memory is allocated at compile time, and memory can't be increased while executing the program. It is used in the array. ]
li => [ The lifetime of a variable in static memory is the lifetime of a program. ]
li => [ The static memory is allocated using static keyword. ]
li => [ The static memory is implemented using stacks or heap. ]
li => [ The pointer is required to access the variable present in the static memory. ]
li => [ The static memory is faster than dynamic memory. ]
li => [ In static memory, more memory space is required to store the variable. ]
p => [ The above example creates an array of integer type, and the size of an array is fixed, i.e., 10. ]
a => [ More details. ]
h3 => [ 21) What is dynamic memory allocation? ]
li => [ In case of dynamic memory allocation, memory is allocated at runtime and memory can be increased while executing the program. It is used in the linked list. ]
li => [ The malloc() or calloc() function is required to allocate the memory at the runtime. ]
li => [ An allocation or deallocation of memory is done at the execution time of a program. ]
li => [ No dynamic pointers are required to access the memory. ]
li => [ The dynamic memory is implemented using data segments. ]
li => [ Less memory space is required to store the variable. ]
p => [ The above example allocates the memory at runtime. ]
a => [ More details. ]
h3 => [ 22) What functions are used for dynamic memory allocation in C language? ]
li => [ malloc() ]
li => [ The malloc() function is used to allocate the memory during the execution of the program. ]
li => [ It does not initialize the memory but carries the garbage value. ]
li => [ It returns a null pointer if it could not be able to allocate the requested space. ]
strong => [ Syntax ]
li => [ calloc() ]
li => [ The calloc() is same as malloc() function, but the difference only is that it initializes the memory with zero value. ]
strong => [ Syntax ]
li => [ realloc() ]
li => [ The realloc() function is used to reallocate the memory to the new size. ]
li => [ If sufficient space is not available in the memory, then the new block is allocated to accommodate the existing data. ]
strong => [ Syntax ]
p => [ In the above syntax, ptr is allocated to a new size. ]
li => [ free():The free() function releases the memory allocated by either calloc() or malloc() function. ]
strong => [ Syntax ]
p => [ The above syntax releases the memory from a pointer variable ptr. ]
a => [ More details. ]
h3 => [ 23) What is the difference between malloc() and calloc()? ]
th => [ calloc() ]
th => [ malloc() ]
td => [ Description ]
td => [ The malloc() function allocates a single block of requested memory. ]
td => [ The calloc() function allocates multiple blocks of requested memory. ]
td => [ Initialization ]
td => [ It initializes the content of the memory to zero. ]
td => [ It does not initialize the content of memory, so it carries the garbage value. ]
td => [ Number of arguments ]
td => [ It consists of two arguments. ]
td => [ It consists of only one argument. ]
td => [ Return value ]
td => [ It returns a pointer pointing to the allocated memory. ]
td => [ It returns a pointer pointing to the allocated memory. ]
a => [ More details. ]
h3 => [ 24) What is the structure? ]
li => [ The structure is a user-defined data type that allows storing multiple types of data in a single unit. It occupies the sum of the memory of all members. ]
li => [ The structure members can be accessed only through structure variables. ]
li => [ Structure variables accessing the same structure but the memory allocated for each variable will be different. ]
strong => [ Syntax of structure ]
strong => [ Let's see a simple example. ]
strong => [ Output: ]
a => [ More details. ]
h3 => [ 25) What is a union? ]
li => [ The union is a user-defined data type that allows storing multiple types of data in a single unit. However, it doesn't occupy the sum of the memory of all members. It holds the memory of the largest member only. ]
li => [ In union, we can access only one variable at a time as it allocates one common space for all the members of a union. ]
strong => [ Syntax of union ]
strong => [ Let's see a simple example ]
strong => [ Output: ]
p => [ In the above example, the value of a and b gets corrupted, and only variable ch shows the actual output. This is because all the members of a union share the common memory space. Hence, the variable ch whose value is currently updated. ]
a => [ More details. ]
h3 => [ 26) What is an auto keyword in C? ]
p => [ In C, every local variable of a function is known as an automatic (auto) variable. Variables which are declared inside the function block are known as a local variable. The local variables are also known as an auto variable. It is optional to use an auto keyword before the data type of a variable. If no value is stored in the local variable, then it consists of a garbage value. ]
h3 => [ 27) What is the purpose of sprintf() function? ]
p => [ The sprintf() stands for "string print." The sprintf() function does not print the output on the console screen. It transfers the data to the buffer. It returns the total number of characters present in the string. ]
strong => [ Syntax ]
strong => [ Let's see a simple example ]
strong => [ Output: ]
h3 => [ 28) Can we compile a program without main() function? ]
p => [ Yes, we can compile, but it can't be executed. ]
p => [ But, if we use #define, we can compile and run a C program without using the main() function. For example: ]
a => [ More details. ]
h3 => [ 29) What is a token? ]
p => [ The Token is an identifier. It can be constant, keyword, string literal, etc. A token is the smallest individual unit in a program. C has the following tokens: ]
li => [ Identifiers: Identifiers refer to the name of the variables. ]
li => [ Keywords: Keywords are the predefined words that are explained by the compiler. ]
li => [ Constants: Constants are the fixed values that cannot be changed during the execution of a program. ]
li => [ Operators: An operator is a symbol that performs the particular operation. ]
li => [ Special characters: All the characters except alphabets and digits are treated as special characters. ]
h3 => [ 30) What is command line argument? ]
p => [ The argument passed to the main() function while executing the program is known as command line argument. For example: ]
h3 => [ 31) What is the acronym for ANSI? ]
p => [ The ANSI stands for " American National Standard Institute." It is an organization that maintains the broad range of disciplines including photographic film, computer languages, data encoding, mechanical parts, safety and more. ]
h3 => [ 32) What is the difference between getch() and getche()? ]
p => [  The  getch()  function reads a single character from the keyboard. It doesn't use any buffer, so entered data will not be displayed on the output screen. ]
p => [  The  getche()  function reads a single character from the keyword, but data is displayed on the output screen. Press Alt+f5 to see the entered character. ]
strong => [ Let's see a simple example ]
strong => [ Output: ]
p => [ In the above example, the value entered through a getch() function is not displayed on the screen while the value entered through a getche() function is displayed on the screen. ]
h3 => [ 33) What is the newline escape sequence? ]
p => [ The new line escape sequence is represented by "\n". It inserts a new line on the output screen. ]
a => [ More details. ]
h3 => [ 34) Who is the main contributor in designing the C language after Dennis Ritchie? ]
p => [ Brain Kernighan. ]
h3 => [ 35) What is the difference between near, far and huge pointers? ]
p => [  A virtual address is composed of the  selector  and  offset .  ]
p => [  A  near  pointer doesn't have explicit selector whereas  far, and huge  pointers have explicit selector. When you perform pointer arithmetic on the far pointer, the selector is not modified, but in case of a huge pointer, it can be modified. ]
p => [ These are the non-standard keywords and implementation specific. These are irrelevant in a modern platform. ]
h3 => [ 36) What is the maximum length of an identifier? ]
p => [ It is 32 characters ideally but implementation specific. ]
h3 => [ 37) What is typecasting? ]
p => [ The typecasting is a process of converting one data type into another is known as typecasting. If we want to store the floating type value to an int type, then we will convert the data type into another data type explicitly. ]
strong => [ Syntax ]
h3 => [ 38) What are the functions to open and close the file in C language? ]
p => [  The  fopen()  function is used to open file whereas  fclose()  is used to close file. ]
h3 => [ 39) Can we access the array using a pointer in C language? ]
p => [ Yes, by holding the base address of array into a pointer, we can access the array using a pointer. ]
h3 => [ 40) What is an infinite loop? ]
p => [ A loop running continuously for an indefinite number of times is called the infinite loop. ]
strong => [ Infinite For Loop: ]
strong => [ Infinite While Loop: ]
strong => [ Infinite Do-While Loop: ]
h3 => [ 41) Write a program to print "hello world" without using a semicolon? ]
a => [ More details. ]
h3 => [ 42) Write a program to swap two numbers without using the third variable? ]
a => [ More details. ]
h3 => [ 43) Write a program to print Fibonacci series without using recursion? ]
a => [ More details. ]
h3 => [ 44) Write a program to print Fibonacci series using recursion? ]
a => [ More details. ]
h3 => [ 45) Write a program to check prime number in C Programming? ]
a => [ More details. ]
h3 => [ 46) Write a program to check palindrome number in C Programming? ]
a => [ More details. ]
h3 => [ 47) Write a program to print factorial of given number without using recursion? ]
a => [ More details. ]
h3 => [ 48) Write a program to print factorial of given number using recursion? ]
a => [ More details. ]
h3 => [ 49) Write a program to check Armstrong number in C? ]
a => [ More details. ]
h3 => [ 50) Write a program to reverse a given number in C? ]
a => [ More details. ]
a => [ Java Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Java Multithreading Questions ]
a => [ Java String &amp; Exception Questions ]
a => [ Java Collection Interview Questions ]
a => [ JDBC Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
