
div => [ 
 ]
h1 => [ Full-Stack Developer Interview Questions Java ]
p => [  Full-stack developers  are skilled programmers who can work with both the front-end and back end of a website and applications. They are responsible for developing and designing front/ back ends web architecture, server-side applications, design databases, server-side applications, and much more. ]
p => [  It is the reason why tech giants hiring full-stack developers and conducting interviews for the same. You can increase your chance to get hire by companies if you have well prepared for the  full stack developer interview.  In this section, we have collected some  full-stack developer interview questions  that can help you to crack the interview to get your dream job. ]
p => [  In the past few years, the job profile of a  full-stack developer  has increased because they are able to work with different technologies and languages. Besides this, full-stack developers are also experts to solve the anomalies raised across the different phases of the application or web development. ]
h3 => [ 1) What should a full-stack developer know? ]
p => [ Full-stack developer must introduce with the following: ]
strong => [ Programming Languages: ]
a => [ Java ]
a => [ Python ]
a => [ Ruby ]
a => [ C++ ]
strong => [ Front End: ]
a => [ HTML5 ]
a => [ CSS3 ]
a => [ Angular ]
a => [ jQuery ]
a => [ Ajax ]
a => [ SASS ]
strong => [ Frameworks: ]
a => [ frameworks ]
a => [ Spring ]
a => [ Spring Boot ]
a => [ Django ]
a => [ PHP ]
a => [ Hibernate ]
a => [ js ]
strong => [ Databases: ]
a => [ MySQL ]
a => [ Oracle ]
a => [ MongoDB ]
strong => [ Design Ability: ]
h3 => [ 2) What are MVC and MVP and how MVC is different from MVP? ]
p => [ MVC and MVP both are architectural patterns that are used to develop applications. ]
strong => [ MVC ]
p => [  MVC stands for  Model View Controller . It is an architectural pattern that is used to develop Java Enterprise Applications. It splits an application into three logical components i.e.  Model, View,  and  Controller . It separates the business-specific logic (Model component) from the presentation layer (View component) from each other. ]
p => [ The model components contain data and logic related to it. The View component is responsible for displaying model objects inside the user interface. The Controller receives the input and calls model objects based on handler mapping. It also passes model objects to views in order to display output inside the view layer. ]
strong => [ MVP ]
p => [  MVP stands for  Model View Presenter . It is derived from the MVC architectural pattern. It adds an extra layer (known as indirection) to the architectural pattern that splits the View and Controller into View and Presenter. The role of Controller is replaced with a Presenter. It exists at the same level as View in MVC. It contains UI business logic for the View. The invocations received from the View directly sends to the Presenter. It maintains the action (events) between View and Model. The Presenter does not directly communicate with the View. It communicates through an interface. ]
p => [  The major  difference between   architectural pattern is that in MVC architectural pattern Controller does not pass the data from the Model to the View. It only notifies the View to get the data from the Model itself. ]
p => [  While in  MVP  architectural pattern the View and Model layers are connected with each other. The presenter itself receives the data from the Model and sends it to the View to show. ]
p => [ Another difference is that MVC is often used in web-frameworks while MVP is used in app development. ]
h3 => [ 3) What is pair programming? ]
p => [  Pair programming (a fundamental aspect of programming) is an  agile  software development technique in which two developer works together on the same machine (system). The developer who  writes  the code is called the  driver  and the developer who  reviews  (checks code, proofread, and spell checks) the code is called the  navigator . The programming technique is more efficient and coding mistakes reduced to the minimum. The disadvantage of pair programming is that it increases the cost. ]
h3 => [ 4) What is CORS in MVC and how it works? ]
p => [  CORS stands for  Cross-Origin Resource Sharing . It is a  W3C  standard and HTTP-header-based mechanism. It permits a server to indicate any other origins (like domain, port, etc.) instead of the requested one. In other words, it enables one website to access the resources of another website using  [object Object] . ]
p => [ It supports secure cross-origin requests and transfers data between servers and browsers. Advanced browsers use CORS in APIs. It is flexible and safe in comparison to JSONP (JSON with Padding). It provides better web service integration. ]
p => [ While using the MVC to enable CORS, the same CORS service can be used but we cannot use the same CORS middleware. We can use a particular CORS for a particular action, for a particular controller, and globally for all controllers. ]
p => [  A pre-flight check (or request) is sent by the browser to the server (hosting the cross-origin resource) which ensures that the server will permit the actual request or not. For example, invoking the URL  https://example.com  through  https://demo.com . ]
h3 => [ 5) How to enhance a website's scalability and efficiency? ]
p => [ We can use the following ways to optimize the scalability and efficiency of a website: ]
a => [ DNS ]
li => [ Avoiding URL redirects ]
li => [ Avoiding duplicate codes ]
li => [ Avoiding unnecessary images ]
li => [ Leveraging browser caching ]
li => [ Deferring parsing of JavaScript ]
li => [ Avoiding inline JavaScript and CSS ]
li => [ Using srcset for responsive images ]
li => [ Placing all assets on a cookie-free domain, preferably using a CDN. ]
h3 => [ 6) What are the differences between Get and Post requests? ]
th => [ S.N. ]
th => [ Basis of Comparison ]
th => [ Get ]
th => [ Post ]
strong => [ 1 ]
strong => [ Purpose ]
strong => [ getting ]
strong => [ sending ]
strong => [ 2 ]
strong => [ Post Mechanism ]
strong => [ URL ]
strong => [ HTTP request body ]
strong => [ 3 ]
strong => [ Parameter Passing ]
strong => [ query string ]
strong => [ body ]
strong => [ 4 ]
strong => [ Default ]
strong => [ default ]
strong => [ manually ]
strong => [ 5 ]
strong => [ Capacity ]
strong => [ limited ]
strong => [ large amount ]
strong => [ 6 ]
strong => [ Data Type ]
strong => [ text ]
strong => [ any type ]
strong => [ 7 ]
strong => [ Security ]
strong => [ safe ]
strong => [ unsafe ]
strong => [ 8 ]
strong => [ Visibility of Data ]
strong => [ visible ]
strong => [ not visible ]
strong => [ 9 ]
strong => [ Bookmark and Caching ]
strong => [ bookmarked ]
strong => [ caching ]
strong => [ bookmarked ]
strong => [ caching ]
strong => [ 10 ]
strong => [ Efficiency ]
strong => [ more efficient ]
strong => [ less efficient ]
strong => [ 11 ]
strong => [ Example ]
strong => [ Search ]
strong => [ Login ]
h3 => [ 7) What is referential transparency in functional programming? ]
p => [ A program may have the property of referential transparency if any two expressions in the program that have the same value can be substituted for one another anywhere in the program without changing the result of the program. It is used in functional programming. For example, consider the following code snippet: ]
p => [  The variables  count1  and  count2  will be equal if the value of fun(x) is not reflected. If the variable count1 is not equal to the variable count2, the referential transparency is violated.  ]
h3 => [ 8) What is RESTful API? ]
p => [  The term REST stands for Representational State Transfer. It is an architectural style that is used to create  Web Services . It uses HTTP requests to access and use the data. We can create, update, read, and delete data. ]
p => [  An API (Application Program Interface) for a website is the code that allows two software programs to communicate with each other. It allows us to write requesting services from an  operating system  or other application. ]
h3 => [ 9) What do you mean by promise, also explain its states? ]
p => [ A promise is an object that can be returned synchronously from an asynchronous function. It may be in the following three states: ]
strong => [ Fulfilled: ]
strong => [ Rejected: ]
strong => [ Pending: ]
p => [ A promise will be settled if and only if it is not pending. ]
h3 => [ 10) How to reduce the load time of a web application? ]
p => [ There are the following ways to optimize the load time of a web application: ]
li => [ Optimize image size and format ]
li => [ Compress and optimize the content ]
li => [ Avoid redirects ]
li => [ Cache the web page ]
li => [ Minimize the HTTP requests ]
li => [ Optimize dependencies ]
li => [ Put stylesheet reference at the top ]
li => [ Place script reference at the bottom ]
li => [ Put JavaScript and CSS externally ]
h3 => [ 11) What is a continuous integration and continuous delivery (CI/CD)? ]
p => [  CI/CD  is a best practice to develop applications in which code changes more frequently and rapidly. Sometimes, it is also known as  CI\CD pipeline . It is widely used in DevOps and also an agile methodology. ]
p => [  [object Object]  is a coding philosophy or deployment practice in which developers integrate their code in a shared repository several times a day. Because modern application requires developing code in different platforms. The goal of continuous integration is to establish an automated mechanism that builds, test, and package the application. ]
p => [  Continuous delivery  starts where CI ends. It automatically delivers the application to the selected infrastructure. CD ensures the automated delivery of code if any changes are made in the code. ]
h3 => [ 12) Which architectural designs are mostly used to design applications? ]
p => [ In software design, we use the following architectural design patterns: ]
li => [ Model View Controller ]
li => [ Master-Slave Pattern ]
li => [ Layered Pattern ]
li => [ Model View Presenter ]
li => [ Monolithic Architecture ]
li => [ Event-Driven Architecture Pattern ]
h3 => [ 13) What is long polling? ]
p => [  Long polling is an effective method for creating a stable server connection without using the WebSocket or Server-Side Events protocols. It operates at the top of the conventional client-server model. Note that  [object Object]  is using the same technique as the next development model. ]
p => [ In this method, the client sends the request and the server responds until the connexon is open as it contains new and unique information. As soon as the server responds, a request to the client can be submitted. When the data is available, the server will return a query. It functions when the client application stops and the server ends requests. ]
h3 => [ 14) Explain semantic HTML with an example and why we should use it? ]
p => [  In web design, the idea of using HTML elements to indicate what they actually are. It is known as  [object Object]  or  semantic markup . ]
p => [  Semantic HTML  is HTML that represents meaning to the web page rather than just presentation. For example, tag  &lt;p&gt;  indicates that a paragraph is enclosed in it. It is both semantic and presentational because the user know what paragraph are and the browser also know how to display them. On the other hand, tags such as  [object Object]  and  [object Object]  are not semantic. They only represent how text should look. These tags do not provide any additional meaning to the markup. ]
p => [  Example of semantic HTML tags are  header tags   &lt;h1&gt; to &lt;h6&gt; ,  &lt;abbr&gt; ,  &lt;cite&gt; ,  &lt;tt&gt; ,  &lt;code&gt; ,  &lt;blockquote&gt; ,  &lt;em&gt; , etc. There are some other semantic HTML tags that are used to build a standards-compliant website. ]
p => [ We should use the semantic HTML for the following reasons: ]
li => [ It provides additional information about the document in which it is used. It also aids in communication. ]
li => [ Semantic tags make it clear to the browser what the meaning of a page and its content is. ]
li => [ It provides information about the contents of those tags that goes beyond just how they look on a page. ]
li => [ It gives us many more hooks for styling the content of the page. ]
li => [ The clarity of semantic tag is also communicated with search engines that ensure the right pages are delivered for the right queries. ]
h3 => [ 15) How null is different from undefined in JavaScript?  ]
p => [  Null:  Null means a variable is assigned with a  null  value. If we use it with  [object Object]  it gives result as an  object . We should never assign a variable to null because the programmer uses it to represent a variable that has no value. Note that JavaScript will never automatically assign the value to null. ]
p => [  Undefined:  Undefined means the variable is declared but not assigned any value to it. It may be a variable itself does not exist. If we use it with typeof operator it gives the result undefined. It is not valid in JSON. ]
h4 => [ Note: Null and undefined both are primitive. ]
p => [ Let's understand it through an example. ]
p => [ When we execute the above code, it generates the following output: ]
p => [ From the above output, we can observe that the value of var1 is undefined also its type is undefined. Because we have not assigned any value to the variable var1. The value null is assigned to the variable var2. It prints its type as abject. Since null is an assignment value and we can assign it to a variable. Therefore, JavaScript treats null and undefined relatively equally because both represent an empty value. ]
h3 => [ 16) What are the key differences between GraphQL and REST? ]
p => [  Both, REST and  GraphQL , are API design architectures that can be used to develop web services, especially for data-driven applications. ]
th => [ GraphQL ]
th => [ REST ]
strong => [ GraphQL ]
strong => [ REST ]
strong => [ client-driven ]
strong => [ server-driven ]
td => [ It does not deal with the dedicated resources. ]
td => [ It deals with the dedicated resources. ]
strong => [ single ]
strong => [ multiple ]
strong => [ stateless ]
strong => [ structured ]
strong => [ stateless ]
strong => [ flexible ]
strong => [ elastic ]
strong => [ rigid ]
strong => [ JSON ]
strong => [ XML ]
strong => [ JSON, HTML, YAML ]
strong => [ query ]
strong => [ URI ]
strong => [ synchronous ]
strong => [ asynchronous ]
strong => [ HTTP, ]
strong => [ MQTT ]
strong => [ , AMQP ]
strong => [ synchronous ]
strong => [ HTTP ]
strong => [ HTTP ]
strong => [ message exchange ]
strong => [ high ]
td => [ It is difficult to achieve high consistency across all platforms. ]
strong => [ fast ]
strong => [ slow ]
h3 => [ 17) Compare fail-fast and fail-safe iterators? ]
table => [ 


 ]
th => [ Basis of Comparison ]
th => [ Fail Fast Iterator ]
th => [ Fail Safe Iterator ]
strong => [ Operates ]
strong => [ directly ]
strong => [ cloned ]
strong => [ Exception ]
td => [ It throws a ConcurrentModificationException in modifying the object during the iteration process. ]
a => [ throw ]
strong => [ Clone Object ]
td => [ No clone object is created during the iteration process. ]
td => [ A copy or clone object is created during the iteration process. ]
strong => [ Memory utilization ]
td => [ It requires low memory during the process. ]
td => [ It requires more memory during the process. ]
strong => [ Modification ]
td => [ It does not allow modification during iteration. ]
td => [ It allows modification during the iteration process. ]
strong => [ Performance ]
td => [ It is fast. ]
td => [ It is slightly slower than Fail Fast. ]
strong => [ Examples ]
a => [ HashMap ]
a => [ ArrayList ]
a => [ Vector ]
a => [ HashSet ]
a => [ CopyOnWriteArrayList ]
a => [ ConcurrentHashMap ]
h3 => [ 18) What is a connection leak in Java and how can we fix it? ]
p => [ In Java, a connection leak is a situation when the developer forgets to close the JDBC connection, it is known as connection leak. The most common type of Connection Leak experienced in Java development, is when using a Connection Pool (such as DBCP). We can fix it by closing the connection and giving special attention to the error handling code.  ]
h3 => [ 19) What are the different methods of session management in Servlet? ]
p => [  A session is a conversational state between client and server and it can consist of multiple requests and responses between client and server. Therefore,  HTTP  and web server both are stateless, the only way to maintain a session is when some unique information about the session (session-id) is passed between server and client in every request and response. We can use the following methods to maintain the session: ]
li => [ User Authentication ]
li => [ HTML Hidden Field ]
li => [ Cookies ]
a => [ URL Rewriting ]
li => [ Session Management API ]
h3 => [ 20) How ServletContext is differ from ServletConfig? ]
th => [ ServletContext ]
th => [ ServletConfig ]
a => [ ServletContext ]
a => [ JVM ]
a => [ ServletConfig ]
td => [ It is just like a global parameter associated with the whole application. ]
td => [ It is the same as the local parameter associated with a particular servlet. ]
td => [ It has application-wide scope so define outside servlet tag in the web.xml file. ]
td => [ It is a name-value pair defined inside the servlet section of web.xml files so it has servlet wide scope. ]
td => [ getServletContext() method is used to get the context object. ]
td => [ getServletConfig() method is used to get the config object. ]
td => [ To get the MIME type of a file or application session related information is stored using a servlet context object. ]
td => [ The shopping cart of a user is a specific to particular user so here we can use servlet config. ]
h3 => [ 21) What is a Request Dispatcher? ]
p => [  RequestDispatcher  is an  interface  that is used to forward the request to another resource that can be  HTML ,  JSP , or another  servlet  in the same application. We can also use it to include the content of another resource in the response. The interface contains two methods forward() and include(). ]
h3 => [ 22) What are the differences between constructor injection and setter injection? ]
th => [ Constructor Injection ]
th => [ Setter Injection ]
td => [ There is no partial injection of dependencies. ]
td => [ There can be a partial injection of dependencies. ]
td => [ It does not override the setter injection value. ]
td => [ It overrides the constructor injection value if both are defined. ]
td => [ It always creates a new instance if any modification occurs. ]
td => [ It does not create a new instance if we made any changes to it. ]
a => [ constructor injection ]
a => [ setter injection ]
td => [ It makes bean class objects as immutable. ]
td => [ It makes bean class objects as mutable. ]
h3 => [ 23) How many ways to handle exceptions in the Spring MVC Framework? ]
p => [  Spring MVC  Framework provides the following ways to handle exceptions: ]
strong => [ Controller-Based: ]
strong => [ Global Exception Handler: ]
a => [ Exception handling ]
a => [ Spring ]
strong => [ HandlerExceptionResolver: ]
h3 => [ 24) What are the advantages of Hibernate over JDBC? ]
p => [  There are the following advantages of  Hibernate  over  JDBC : ]
li => [ Hibernate removes boilerplate code that comes with JDBC API. ]
a => [ inheritance ]
a => [ transaction management ]
a => [ try-catch ]
li => [ In Hibernate, HQL is more object-oriented that is closed to Java programming language. ]
li => [ It provides better performance in comparison to JDBC because Hibernate supports caching while JDBC does not support caching of queries. ]
h3 => [ 25) What is callback hell and how to fix it? ]
p => [  Callback hell is a phenomenon in  JavaScript  in which the developer tries to execute multiple asynchronous operations together. The nesting of callback functions in such a way, we easily end up with error-prone, hard to read, and hard to maintain code. ]
p => [ We can easily fix it by using the following methods: ]
li => [ Split large functions into smaller functions ]
li => [ Use Promises ]
a => [ Async/ Wait ]
h3 => [ 26) What is double brace initialization in Java and where it is used? ]
p => [  In  Java , double brace initialization is a combination of two separate processes. The two consecutive curly braces  {{ involved  in it. ]
p => [  The  first curly brace  represents the creation of an  anonymous inner class . Remember that the second curly brace will not be considered in such a case. It is just like creating an  anonymous inner class . ]
p => [  The  second curly brace  represents an  initialization block  that we have seen in it as a class for initialization. When we use the initialization block for an anonymous inner class it becomes Java double brace initialization. The  inner class  has a reference to the enclosing outer class. We can use the reference by using  this  pointer. ]
p => [  It is used to initialize  [object Object]  because it is easier to initialize a constant collection using double brace initialization. The example of double brace initialization is as follows: ]
h3 => [ 27) How to avoid deadlock in Java? ]
p => [  Avoid Unnecessary Locks:  We should use locks only for those members on which it is required. Unnecessary use of locks leads to a  deadlock  situation. It is recommended that use a lock-free  data structure . If possible, keep your code free from locks. For example, instead of using synchronized  ArrayList  use the  ConcurrentLinkedQueue . ]
p => [  Avoid Nested Locks:  Another way to avoid deadlock is to avoid giving a lock to multiple  threads  if we have already provided a lock to one thread. Since we must avoid allocating a lock to multiple threads. ]
p => [  Using Thread.join() Method:  We can get a deadlock if two threads are waiting for each other to finish indefinitely using thread join. If a thread has to wait for another thread to finish, it's always best to use join with the maximum time you want to wait for the thread to finish. ]
p => [  Use Lock Ordering:  Always assign a numeric value to each lock. Before acquiring the lock with a higher numeric value, acquire the locks with a lower numeric value. ]
p => [  Lock Time-out:  We can also specify the time for a thread to acquire a lock. If a thread does not acquire a lock, the thread must wait for a specific time before retrying to acquire a lock. ]
h3 => [ 28) What is a critical section? ]
p => [  The critical section is a part of code in  multi-threading  that must be exclusively modified by any thread. The critical section is protected by  Semaphore or mutex . In Java, there are two ways to protect critical section: ]
a => [ Synchronized ]
a => [ Reentrant Locks ]
h3 => [ 29) What is numeric promotion? ]
p => [  The conversion of a smaller numeric type to a larger numeric type is known as  numeric promotion . In this type, byte, char, and short values are converted to int values. The int values are converted to long values, if necessary. The long and float values are converted to double values, as needed. ]
h3 => [ 30) What is the SOLID principle in Java? ]
p => [  In Java,  [object Object] are an object-oriented approach that are applied to software structure design. It is conceptualized by  Robert C. Martin  (also known as  Uncle Bob ). These five principles have changed the world of object-oriented programming, and also changed the way of writing software. It also ensures that the software is modular, easy to understand, debug, and refactor. ]
p => [ The word SOLID acronym for: ]
strong => [ S ]
strong => [ O ]
strong => [ L ]
strong => [ I ]
strong => [ D ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ Company Interview Questions &amp; Procedure ]
a => [ JavaScript Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
a => [ jQuery Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
