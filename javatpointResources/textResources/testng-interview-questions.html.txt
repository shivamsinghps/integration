
div => [ 
 ]
h1 => [ TestNG Interview Questions ]
p => [  A list of top frequently asked  TestNG Interview Questions and answers  are given below.  ]
h3 => [ 1) What is TestNG? ]
p => [  TestNG stands for " Testing Next Generation ". It is an` automation testing framework used for java programming language developed by Credric beust, and it comes after the inspiration from the JUnit framework. TestNG consists of all the features of JUnit framework but also contains some more additional features that make TestNG more powerful. ]
h3 => [ 2) What are the advantages of TestNG? ]
strong => [ The following are the advantages of TestNG are: ]
li => [ Number of test cases executed. ]
li => [ Number of test cases passed. ]
li => [ Number of test cases failed. ]
li => [ Number of test cases skipped ]
li => [ Multiple test cases can be grouped easily by converting them into a testng.xml file, in which you can set the priority of each test case that determines which test case should be executed first. ]
li => [ With the help of TestNG, you can execute the multiple test cases on multiple browsers known as cross-browser testing. ]
li => [ The TestNG framework can be easily integrated with other tools such as Maven. Jenkins, etc. ]
li => [ Annotations used in a TestNG framework are easily understandable such as @BeforeMethod, @AfterMethod, @BeforeTest, @AfterTest. ]
li => [ WebDriver does not generate the reports while TestNG generates the reports in a readable format. ]
li => [ TestNG simplifies the way the test cases are coded. We do not have to write the static main method. The sequence of actions is maintained by the annotations only. ]
li => [ TestNG allows you to execute the test cases separately. For example, if you have six test cases, then one method is written for each test case. When we run the program, five methods are executed successfully, and the sixth method is failed. To remove the error, we need to run only the sixth method, and this can be possible only through TestNG. Because TestNG generates testng-failed.xml file in the test output folder, we will run only this xml file to execute the failed test case. ]
h3 => [ 3) How to run the test script in TestNG? ]
p => [ You can run the test script in TestNG by clicking right click on the TestNG class, click on "Run As" and then select "TestNG test".  ]
h3 => [ 4) What are the annotations used in the TestNG? ]
strong => [ The following are the annotations used in the TestNG are: ]
strong => [ Precondition annotations ]
strong => [ Test annotation ]
strong => [ Postcondition annotations ]
h3 => [ 5) What is the sequence of execution of all the annotations in TestNG? ]
strong => [ The sequence of execution of all the annotations in TestNG is given below: ]
li => [ @BeforeSuite ]
li => [ @BeforeTest ]
li => [ @BeforeClass ]
li => [ @BeforeMethod ]
li => [ @Test ]
li => [ @AfterSuite ]
li => [ @AfterTest ]
li => [ @AfterClass ]
li => [ @AfterMethod ]
h3 => [ 6) How to set the priorities in TestNG? ]
p => [ If we do not prioritize the test methods, then the test methods are selected alphabetically and executed. If we want the test methods to be executed in the sequence we want, then we need to provide the priority along with the @Test annotation. ]
strong => [ Let's understand through an example. ]
h3 => [ 7) Define grouping in TestNG?  ]
p => [ The group is an attribute in TestNG that allows you to execute the multiple test cases. For example, if we have 100 test cases of it_department and 10 test cases of hr_department, and if you want to run all the test cases of it_department together in a single suite, this can be possible only through the grouping. ]
strong => [ Let's understand through an example. ]
strong => [ testng.xml ]
h3 => [ 8) What is dependency in TestNG? ]
p => [ When we want to run the test cases in a specific order, then we use the concept of dependency in TestNG. ]
strong => [ Two types of dependency attributes used in TestNG: ]
strong => [ dependsOnMethods ]
strong => [ dependsOnGroups ]
h3 => [ 9) What is timeOut in TestNG? ]
p => [ While running test cases, there can be a case when some test cases take much more time than expected. In such a case, we can mark the test case as a failed test case by using timeOut. ]
p => [ TimeOut in TestNG allows you to configure the time period to wait for a test to get completely executed. It can be configured in two levels: ]
strong => [ At the suit level: ]
strong => [ At each method level: ]
p => [ The timeOut attribute can be specified as shown below: ]
p => [ The above @Test annotation tells that the test method will be given 700 ms to complete its execution otherwise it will be marked as a failed test case. ]
h3 => [ 10) What is invocationCount in TestNG? ]
p => [ An invocationCount in TestNG is the number of times that we want to execute the same test. ]
strong => [ Output ]
h3 => [ 11) What is the importance of testng.xml file? ]
strong => [ The testng.xml file is important because of the following reasons: ]
li => [ It defines the order of the execution of all the test cases. ]
li => [ It allows you to group the test cases and can be executed as per the requirements. ]
li => [ It executes the selected test cases. ]
li => [ In TestNG, listeners can be implemented at the suite level. ]
li => [ It allows you to integrate the TestNG framework with tools such as Jenkins. ]
h3 => [ 12) How to pass the parameter in test case through testng.xml file? ]
p => [  We can also pass the value to test methods at runtime, we can achieve this by sending parameter values through the testng.xml file. We can use the  @Parameter  annotation: ]
strong => [ Let's understand through an example: ]
strong => [ testng.xml file ]
strong => [ On running the testng.xml file, we get the output as shown below: ]
h3 => [ 13) How can we disable the test case from running? ]
p => [ We can disable the test case from running by using the enabled attribute. We can assign the false value to the enabled attribute, in this way we can disable the test case from running. ]
h3 => [ 14) What is the difference between soft assertion and hard assertion? ]
p => [  Soft Assertion:  In case of Soft Assertion, if TestNG gets an error during @Test, it will throw an exception when an assertion fails and continues with the next statement after the assert statement. ]
p => [  Hard Assertion:  In the case of Hard Assertion, if TestNG gets an error during @Test, it will throw an AssertException immediately when an assertion fails and stops execution after the assert statement. ]
strong => [ Let's understand through an example. ]
strong => [ Output ]
h3 => [ 15) What is the use of @Listener annotation in TestNG? ]
p => [ TestNG provides different kinds of listeners which can perform different actions whenever the event is triggered. The most widely used listener in TestNG is ITestListener interface. The ITestListener interface contains methods such as onTestSuccess, onTestfailure, onTestSkipped, etc. ]
strong => [ Following are the scenarios that can be made: ]
li => [ If the test case is failed, then what action should be performed by the listener. ]
li => [ If the test case is passed, then what action should be performed by the listener. ]
li => [ If the test case is skipped, then what action should be performed by the listener. ]
strong => [ Let's understand through an example. ]
strong => [ Listener.java ]
strong => [ Output ]
h3 => [ 16) What is the use of @Factory annotation? ]
p => [ The @Factory annotation is useful when we want to run multiple test cases through a single test class. It is mainly used for the dynamic execution of test cases. ]
strong => [ Let's understand through an example. ]
strong => [ testcase1.java ]
strong => [ testcase2.java ]
strong => [ Factory.java ]
h3 => [ 17) What is the difference between @Factory and @DataProvider annotation? ]
p => [  @DataProvider:  It is annotation used by TestNG to execute the test method multiple numbers of times based on the data provided by the DataProvider. ]
p => [  @Factory:  It is annotation used by the TestNG to execute the test methods present in the same test class using different instances of the respective class. ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ jQuery Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
