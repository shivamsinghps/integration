
div => [ 
 ]
h1 => [ Most Asked Microservices Interview Questions ]
p => [ Following is the list of most frequently asked Microservices Interview questions and their best possible answers. ]
h3 => [ 1) What are Microservices? / What do you understand by Microservices? ]
p => [ Microservices are an architectural approach or style that is used to build applications. The microservice architecture provides a rapid, frequent and reliable delivery of large and complex applications. It is distributed and loosely coupled, so it won't break the entire app if you make changes in one team. ]
p => [ Microservices are also known as the microservice architecture, a variant of the service-oriented architecture (SOA) structural style and used to structure an application as a collection of services that have the following features: ]
li => [ Distributed and loosely coupled ]
li => [ Highly maintainable and testable ]
li => [ Independently deployable ]
li => [ Organized around business capabilities ]
li => [ Owned by a small team ]
h3 => [ 2) What are the most significant benefits of using microservices? ]
p => [ The most significant benefit of using microservices is that it builds an application to collect small autonomous services developed for a business domain. So, if the business needs to change constantly, the development teams can rapidly build new apps components to meet the requirement. ]
p => [ Each microservice runs a unique process and communicates through a well-defined, lightweight mechanism, such as a container, to serve a business goal. It also makes an organization capable of evolving its technology stack. ]
h3 => [ 3) What are the three commonly used tools for Microservices?  ]
p => [ Following are the three commonly used tools for Microservices: ]
li => [ Wiremock ]
li => [ Docker ]
li => [ Hysrix ]
h3 => [ 4) What are the main components of Microservices?  ]
p => [ Following is the list of main components of Microservices or Microservice architecture: ]
li => [ Containers, Clustering, and Orchestration ]
li => [ IaC (Infrastructure as Code Conception) ]
li => [ Cloud Infrastructure ]
li => [ API Gateway ]
li => [ Enterprise Service Bus ]
li => [ Service Delivery ]
h3 => [ 5) How does a Microservice architecture work? ]
p => [ The Microservice architecture of an application can be simplified into multiple modules that independently perform the single precise standalone task. Let's see how Microservice architecture works: ]
li => [ An application is fragmented into loosely coupled various modules, each of which performs a distinct function. ]
li => [ It is distributed across clouds and data centers. ]
li => [ Each application module is an independent service/process that can be replaced, updated, or deleted without disrupting the rest of the application. ]
li => [ Under microservice architecture, an application can grow along with its requirements. ]
h3 => [ 6) What are the main advantages of using Microservices?  ]
p => [ Following is a list of some most important advantages of using Microservices: ]
li => [ Microservices provide great technology diversity. You can mix it easily with other frameworks, libraries, and databases. ]
li => [ Microservices support fault isolation as it collects small autonomous services or processes, so a process failure should not bring the whole system down. ]
li => [ It provides excellent support for the minor and parallel team. ]
li => [ It reduces the deployment time significantly. ]
li => [ Independent deployment ]
h3 => [ 7) What do you understand by Monolithic Architecture? ]
p => [ Monolithic architecture is like a big container that contains all the software components of an application. These applications are clubbed inside a single package within the application.  ]
h3 => [ 8) What are the biggest challenges in Microservice deployment? ]
p => [ We can specify the biggest challenges in Microservice deployment in two ways, i.e., technical and functional. ]
strong => [ The main challenges from the business point of view: ]
li => [ Microservices require a heavy investment. ]
li => [ It requires a heavy infrastructure setup also. ]
li => [ We need excessive planning for managing operations overhead. ]
li => [ It cost a lot in staff selection and maintenance. ]
strong => [ The main challenges from a technical point of view: ]
li => [ The components in microservices always rely on each other, so; it requires communication between them in the application. ]
li => [ There are also a lot of challenges in deployment. ]
li => [ Testing and Debugging are very challenging. ]
li => [ It requires complete component automation and application maintenance. ]
li => [ It receives heavy operations overhead. ]
li => [ It requires skilled professionals to support heterogeneously distributed microservices. ]
h3 => [ 9) What do you understand by Spring Cloud? ]
p => [ Spring cloud is an Integration software used to integrate with external systems. It allows a microservices framework to build applications that perform restricted amounts of data processing.  ]
h3 => [ 10) What are the main differences between Microservices and Monolithic Architecture? ]
p => [ The main differences between Microservices and Monolithic Architecture:  ]
th => [ Microservices ]
th => [ Monolithic Architecture ]
td => [ The service startup is fast in Microservices. ]
td => [ The service startup takes time as it is slow in Monolithic Architecture. ]
td => [ It is a loosely coupled architecture. ]
td => [ It is primarily a tightly coupled architecture. ]
td => [ In Microservices, if you make changes in a single data model, it does not affect others. ]
td => [ In Monolithic Architecture, any changes in the data model affect the entire database. ]
td => [ It mainly focuses on products, not projects. ]
td => [ It mainly focuses on the whole project. ]
h3 => [ 11) In which cases microservice architecture is best suited? ]
p => [ The microservice architecture is best suited for all tech devices such as desktop, web, mobile devices, Smart TVs, Wearable devices, etc. ]
h3 => [ 12) What are the most significant advantages and disadvantages of using Microservices? ]
p => [ Following is the list of the most significant advantages and disadvantages of using Microservices: ]
strong => [ Advantages of Microservices ]
li => [ Provide improved scalability ]
li => [ Increased Agility ]
li => [ Localized Complexity ]
li => [ Provide fault isolation ]
li => [ Debugging &amp; Maintenance are easy and simplified. ]
li => [ Communication between developers with business users is accessible and better. ]
li => [ Smaller development teams ]
li => [ You can easily upgrade the technology. ]
strong => [ Disadvantages of Microservices ]
li => [ As a whole project, it isn't easy because it uses multiple components in the application. ]
li => [ It requires accurate pre-planning before use. ]
li => [ It uses modular dependencies that are hard to calculate. ]
li => [ The third-party applications are hard to control. ]
li => [ Modular interdependencies are challenging to track. ]
li => [ More opportunities for malicious intrusions. ]
li => [ Complete end-to-end testing is complex. ]
li => [ Deployment Challenges. ]
h3 => [ 13) Which are some famous companies that are using Microservice architecture? ]
p => [ Most large-scale software companies and websites such as Twitter, Netflix, Amazon are using microservices architecture instead of monolithic architecture.  ]
h3 => [ 14) What do you understand by RESTful?  ]
p => [ REST or RESTful stands for Representational State Transfer. The RESTful web service is an architectural style that helps computer systems to communicate over the internet. These web services make microservices easier to understand and implement.  ]
h3 => [ 15) What are the different strategies used in Microservices deployment? ]
p => [ Following strategies are used in Microservices deployment: ]
strong => [ Multiple Service Instance per Host: ]
strong => [ Service Instance per Host: ]
li => [ Service Instance per Container: It is used to run each service instance in its respective container. ]
strong => [ Serverless Deployment: ]
h3 => [ 16) What are the three types of tests used in Microservices?  ]
p => [ We can categorize the tests used in Microservice architecture into three main categories: ]
strong => [ Bottom Level Test: ]
strong => [ Middle-Level Tests: ]
strong => [ Top Level Tests: ]
h3 => [ 17) What is the main difference between SOA and the Microservices Architecture? ]
p => [ SOA stands for Service Oriented Architecture. It is a collection of services used to communicate with each other through simple data passing or activity coordination. On the other hand, the Microservices Architecture is a collection of small functional modules that are independently deployable, scalable, target specific business goals, and communicate over standard protocols.  ]
h3 => [ 18) What is a Client certificate? What is its usage? ]
p => [ A client certificate is a digital certificate used to make authenticated requests to a remote server. A certificate is generated for each microservice.  ]
h3 => [ 19) What do you understand by Domain-Driven Design? ]
p => [ Domain-Driven Design is an architectural style based on Object-Oriented Analysis Design concepts and principles. It is used to develop a complex system by connecting the related components of the software system into a continuously evolving system. Domain-Driven Design is based on three principles: ]
li => [ Focus on the core domain and domain logic. ]
li => [ Base complex designs on models of the domain. ]
li => [ Collaborate with the domain experts to improve the application model and resolve any emerging domain-related issues regularly. ]
h3 => [ 20) What is the use of PACT in Microservices architecture? ]
p => [ PACT is an open-source tool used for testing interactions between service providers and consumers. It increases the reliability of the Microservices applications.  ]
h3 => [ 21) What do you understand by OAuth? ]
p => [ OAuth stands for Open Authorization protocol. This protocol allows you to access the client applications on HTTP for third-party providers GitHub, Facebook, etc. It also facilitates us to share resources stored on one site with another site without their credentials.  ]
h3 => [ 22) What is Spring Boot? Why is it used? ]
p => [ Spring Boot is an open-source, Java-based framework that provides developers an excellent platform for developing a stand-alone and production-grade spring application. It is easy to understand, reduces development time, and increases productivity. It automatically configures a claim based on the added dependencies of an application.  ]
h3 => [ 23) What is the method to override a Spring Boot project's default properties? ]
p => [ We can do it by specifying the properties in application.properties. The Spring MVC applications need the suffix and the prefix to be specified. This can be done by: ]
strong => [ For suffix: ]
strong => [ For prefix: ]
h3 => [ 24) What do you understand by end-to-end Microservices testing? ]
p => [ End-to-end testing is used to validate that every process in the workflow is functioning correctly. It also ensures that the system works together as a whole and fulfills all the requirements. ]
h3 => [ 25) What is the difference between Coupling and Cohesion?  ]
strong => [ Difference between Coupling and Cohesion ]
p => [  Coupling:  Coupling is specified as a relationship between module A and another module B. There are mainly three types of coupling. Any module can be highly coupled (highly dependent), loosely coupled, and uncoupled with other modules. The best coupling is the loose coupling which can be achieved through interfaces. ]
p => [  Cohesion:  Cohesion is the relationship between 2 or more parts within a module. The high cohesion within a module specifies that the module can perform a specific task with maximum efficiency on its own, without the need to communicate with other modules. High cohesion increases the functional strength of the module. ]
h3 => [ 26) What is the use of containers in Microservices? ]
p => [ Containers are the easiest and effective method to manage microservice-based applications. They are like a software development platform. They also help us to develop and deploy individually. A Docker is an example of a container. It is an open-source software development platform that allows us to encapsulate our microservice in a container image along with its dependencies. Microservice can use these elements without additional efforts. ]
h3 => [ 27) What is Spring Cloud? What problems can be solved by using Spring Cloud? ]
p => [ Spring Cloud is a collection of tools used by developers to quickly build some of the common patterns in distributed systems such as configuration management, circuit breakers, service discovery, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state, etc. ]
p => [ We can use spring cloud to solve the following problems: ]
li => [ We can solve network issues, latency overhead, bandwidth issues, security issues, and other issues occurred in distributed systems. ]
li => [ We can also solve redundancy issues that occur in distributed systems. ]
li => [ We can balance the distribution of load between resources like network links, CPU, clusters, etc. ]
li => [ We can solve the performance issues that occurred because of operational overheads. ]
li => [ We can resolve the service discovery issues to make smooth communication possible between services in a cluster. ]
h3 => [ 28) What do you understand by semantic monitoring in Microservices architecture?  ]
p => [ Semantic monitoring is used to combine the automated tests by monitoring the application. It is used to find out the reasons why your business is not getting more profits. ]
h3 => [ 29) What do you understand by the Distributed Transaction? ]
p => [ A distribution transaction is a type of transaction that has two or more engaged network hosts. In this transaction, a transaction manager takes care of developing and handling transactions. If the transaction involves more than one peer, the transaction managers of each peer communicate with each other using subordinate or superior relationships. In the same way, the resource manager handles the resources and coordinates with the distributed transaction coordinator for transaction atomicity and isolation.  ]
h3 => [ 30) What is the full form of CDC? What is its usage? ]
p => [ The full form of CDC is a Consumer-Driven Contract. It is a pattern used for developing Microservices so that the external systems can use them efficiently.  ]
h3 => [ 31) What is Reactive Extension in Microservices? ]
p => [ Reactive Extension is a design pattern that allows collecting results by calling multiple services and then compiles a combined response. It is also called Rx. Rx is a popular tool in distributed systems that works opposite to legacy flows.  ]
h3 => [ 32) How can you configure Spring Boot application login?  ]
p => [ We can configure the Spring Boot application login by specifying the logging.level in the application.properties file. Generally, it is pre-configured as console output.  ]
h3 => [ 33) What do you understand by the term 'Continuous Monitoring'? ]
p => [ The term continuous monitoring is used to specify a method used to search compliance and risk issues associated with a company's operational and financial environment. This method contains human processes and working systems that support efficient and actual operations.  ]
h3 => [ 34) What is Mike Cohn's Test Pyramid? ]
p => [ Mike Cohn's Test Pyramid is used to maximize automation at all levels of testing, such as unit testing, service level testing, UI testing, etc. This pyramid specifies that while unit tests are faster and more isolated, UI tests, which are at the highest level, take time and focus on integration.  ]
h3 => [ 35) How independent micro-services communicate with each other? ]
p => [ We can make our micro-services communicate with each other according to our project needs. In most cases, developers use HTTP/REST with JSON or Binary protocol while using any communication protocol. ]
h3 => [ 36) How can you implement a Spring Security in a Spring Boot Application? ]
p => [ We can quickly implement a Spring Security in a Spring Boot Application by using the following method: ]
li => [ By adding the spring-boot-starter-security in the file pom.xml ]
li => [ By creating a Spring config class that will override the required method while extending the WebSecurityConfigurerAdapter to achieve security in the application ]
h3 => [ 37) What do you understand by ubiquitous language? ]
p => [ Ubiquitous Language or UL is a common language used by developers and users of a specific domain to explain that domain easily. The ubiquitous language has to bring all the team members on the same page and be translated so that a machine can understand.  ]
h3 => [ 38) What is the difference between Rest and Microservices? ]
p => [ There are multiple ways to implement microservices. REST over HTTP is one of them. REST is also used in other applications such as web apps, API design, and MVC applications to serve business data. ]
p => [ On the other hand, in microservices architecture, all the system components are put into individual components, which can be built, deployed, and scaled individually. Microservices provide certain principles and best practices that help in building a resilient application. So, we can say that REST is a medium to build Microservices. ]
h3 => [ 39) What do you understand by Idempotence? Where is it used? ]
p => [ Idempotence is a property that facilitates us to do something twice so that the result will remain the same always in such a way that if it had been done once only. Usage of Idempotence: Idempotence is used at the remote service or data source so that, when it receives the instruction more than once, it only processes the instruction once.  ]
h3 => [ 40) What is an Actuator in Microservices? Why is it used? ]
p => [ Actuator is a sub-project of Spring Boot. It brings in production-ready features into an application and is mainly used to expose operational information about the running application's health, metrics, info, dump, env, etc. It uses HTTP endpoints or JMX beans to interact with it.  ]
h3 => [ 41) What is the use of Bounded Context in Domain-Driven Design? ]
p => [ The Bounded Context is a central pattern in Domain-Driven Design. It is the core of Domain-Driven Design's strategic design section, which deals with large models and teams. It is used to divide the large models into different Bounded Contexts and being explicit about their inter-relationships.  ]
h3 => [ 42) What is PACT in Microservices Architecture? ]
p => [ The contract between a consumer application and a provider application is known as a PACT. Each PACT is a collection of interactions. It is an open-source tool that can be used to implement the Consumer-Driven Contract in Microservices.  ]
h3 => [ 43) What do you understand by Two Factor Authentication? What are the different types of credentials used in Two Factor Authentication? ]
p => [ Two-factor authentication enables the users to fulfill the second level of authentication to an account login process. If a user has to enter only a username and password at the time of login, it would be considered a single-factor authentication. But in Two-factor authentication, the user has to enter more information than the login password. ]
strong => [ Mainly three types of credentials are used in Two-factor authentication: ]
strong => [ Something you know: ]
strong => [ Something you have: ]
strong => [ Something you are: ]
h3 => [ 44) What is the need for Reports and Dashboards in Microservices? ]
p => [ Reports and dashboards are mainly used to monitor microservices. There are multiple tools used for this purpose. ]
strong => [ Following is the list of some usages of Reports and dashboards in microservices: ]
li => [ Reports and dashboards are used to find out which microservices expose what resources. ]
li => [ It is also used to specify the services which are impacted whenever we make changes in a component. ]
li => [ It provides an easy point to access whenever documentation is required. ]
li => [ It specifies the versions of the components which are deployed. ]
li => [ It is also used to obtain a sense of maturity and compliance from the components. ]
h3 => [ 45) What do you understand by Canary Releasing? ]
p => [ Canary releasing is a technique used to introduce new software versions by rolling out the updated version or new code/features to a subset of users as an initial test before making the entire infrastructure available to everybody. This technique is called canary release because it is based on canary releases in coal mines to alert miners when the toxic gases reach dangerous levels.  ]
h3 => [ 46) Why do many developers hesitate in using Microservices? / What are the biggest cons of using Microservices?  ]
p => [ There are some cons of Microservices that can make developers hesitate in using Microservices: ]
strong => [ Microservices require heavy investment: ]
strong => [ The architecture setup cost is high: ]
strong => [ Handling operations overhead is complex: ]
strong => [ Autonomous staff selection: ]
h3 => [ 47) What are non-deterministic tests? What is the process to eliminate them? ]
p => [ Non-deterministic tests or NDT are unreliable tests that sometimes pass and sometimes fail. When these tests fail, they are re-run again. We can use the following ways to eliminate non-determinism from Non-Deterministic tests. ]
li => [ Quarantine ]
li => [ Asynchronous ]
li => [ Remote Services ]
li => [ Isolation ]
li => [ Time ]
li => [ Resource Leaks ]
h3 => [ 48) What is the usage of WebMvcTest annotation in Spring MVC applications?  ]
p => [ WebMvcTest annotation is used for unit testing in Spring MVC Applications in cases where the test objective is to focus on Spring MVC Components. ]
strong => [ See the following code: ]
div => [ 
@WebMvcTest(value =ToTestController.class, secure = false):
 ]
p => [ Here, we want to launch only the ToTestController. All other controllers and mappings will not be launched until this unit test is executed.  ]
h3 => [ 49) What is Eureka in Microservices? ]
p => [ Eureka or Eureka Server is an application that holds the information about the client-service applications. Microservices have to register into the Eureka server, and the Eureka server knows all the client applications running on each port and IP address. Eureka Server is also alternatively known as the Netflix Service Discovery Server. It uses Spring Cloud and is not heavy on the application development process. ]
h3 => [ 50) What is the full form of DRY? What is its usage in Microservices architecture? ]
p => [  The full form of DRY is Don't Repeat Yourself. It is used to promote the concept of reusing the code. This makes things easy in developing and sharing the libraries, which in turn result in tight coupling.  ]
h3 => [ 51) How can you balance the server-side load by utilizing Spring Cloud? ]
p => [ We can use the Netflix Zuul to balance the server-side load by utilizing Spring Cloud. It is also known as a JVM-based router.  ]
h3 => [ 52) What do you understand by Cross-functional testing? ]
p => [ Cross-functional testing is the verification of non-functional requirements, i.e., the requirements that we cannot implement like a standard feature.  ]
h3 => [ 53) What is the use of Netflix Hystrix?  ]
p => [ Hystrix is an error tolerance and latency library. It is mainly used to isolate the access points. It also ensures that all 3rd party libraries and services are restricted. So, the application runs efficiently and avoids the kind of failures that occur in distributed systems. ]
h3 => [ 54) What do you understand by Tasklet in Microservices?  ]
p => [ The Tasklet is a simple interface with a method to execute. We can use it to perform single tasks like running queries, deleting files, etc. In Spring Batch, the Tasklet is an interface used to perform unique tasks like clean or set up resources before or after any step execution. ]
a => [ Interview Tips ]
a => [ Job/HR Interview Questions ]
a => [ Company Interview Questions &amp; Procedure ]
a => [ JavaScript Interview Questions ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
a => [ jQuery Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
