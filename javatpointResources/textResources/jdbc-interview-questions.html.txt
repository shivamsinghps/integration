
div => [ 
 ]
h1 => [ JDBC Interview Questions ]
p => [ A list of top frequently asked JDBC interview questions and answers is given below. ]
h3 => [  1) What is JDBC? ]
p => [ JDBC is a Java API that is used to connect and execute the query to the database. JDBC API uses JDBC drivers to connect to the database. JDBC API can be used to access tabular data stored into any relational database. ]
a => [ More details. ]
h3 => [  2) What is JDBC Driver? ]
p => [ JDBC Driver is a software component that enables Java application to interact with the database. There are 4 types of JDBC drivers: ]
strong => [ JDBC-ODBC bridge driver: ]
strong => [ Native-API driver (partially java driver): ]
strong => [ Network Protocol driver (fully java driver): ]
strong => [ Thin driver (fully java driver): ]
a => [ More details. ]
h3 => [  3) What are the steps to connect to the database in java? ]
p => [ The following steps are used in database connectivity. ]
strong => [ Registering the driver class: ]
p => [ The forName() method of the Class class is used to register the driver class. This method is used to load the driver class dynamically. Consider the following example to register OracleDriver class.  ]
strong => [ Creating connection: ]
p => [ The getConnection() method of DriverManager class is used to establish the connection with the database. The syntax of the getConnection() method is given below. ]
p => [ Consider the following example to establish the connection with the Oracle database.  ]
strong => [ Creating the statement: ]
p => [ The createStatement() method of Connection interface is used to create the Statement. The object of the Statement is responsible for executing queries with the database. ]
p => [ consider the following example to create the statement object ]
p => [ 
 ]
strong => [ Executing the queries: ]
p => [ The executeQuery() method of Statement interface is used to execute queries to the database. This method returns the object of ResultSet that can be used to get all the records of a table. ]
p => [ Syntax of executeQuery() method is given below. ]
p => [ 
 ]
p => [ Example to execute the query ]
p => [ 
 ]
p => [ However, to perform the insert and update operations in the database, executeUpdate() method is used which returns the boolean value to indicate the successful completion of the operation. ]
strong => [ Closing connection: ]
p => [ By closing connection, object statement and ResultSet will be closed automatically. The close() method of Connection interface is used to close the connection. ]
p => [ Syntax of close() method is given below.  ]
p => [ 
 ]
p => [ Consider the following example to close the connection.  ]
a => [ More details. ]
h3 => [  4) What are the JDBC API components? ]
p => [ The java.sql package contains following interfaces and classes for JDBC API. ]
b => [ Interfaces: ]
strong => [ Connection: ]
strong => [ Statement: ]
strong => [ PreparedStatement: ]
strong => [ ResultSet: ]
strong => [ ResultSetMetaData: ]
strong => [ DatabaseMetaData: ]
strong => [ CallableStatement: ]
b => [ Classes: ]
strong => [ DriverManager: ]
strong => [ Blob: ]
strong => [ Clob: ]
strong => [ SQLException ]
h3 => [  5) What are the JDBC statements? ]
p => [ In JDBC, Statements are used to send SQL commands to the database and receive data from the database. There are various methods provided by JDBC statements such as execute(), executeUpdate(), executeQuery, etc. which helps you to interact with the database. ]
p => [ There is three type of JDBC statements given in the following table. ]
th => [ Statements ]
th => [ Explanation ]
td => [ Statement ]
td => [ Statement is the factory for resultset. It is used for general purpose access to the database. It executes a static SQL query at runtime. ]
td => [ PreparedStatement ]
td => [ The PreparedStatement is used when we need to provide input parameters to the query at runtime. ]
td => [ CallableStatement ]
td => [ CallableStatement is used when we need to access the database stored procedures. It can also accept runtime parameters. ]
h3 => [  6) What is the return type of Class.forName() method? ]
p => [ The Class.forName() method returns the object of java.lang.Class object. ]
h3 => [  7) What are the differences between Statement and PreparedStatement interface? ]
th => [ Statement ]
th => [ PreparedStatement ]
td => [ The Statement interface provides methods to execute queries with the database. The statement interface is a factory of ResultSet; i.e., it provides the factory method to get the object of ResultSet. ]
td => [ The PreparedStatement interface is a subinterface of Statement. It is used to execute the parameterized query.
 ]
td => [ In the case of Statement, the query is compiled each time we run the program.  ]
td => [ In the case of PreparedStatement, the query is compiled only once. ]
td => [ The Statement is mainly used in the case when we need to run the static query at runtime. ]
td => [ PreparedStatement is used when we need to provide input parameters to the query at runtime. ]
a => [ More details. ]
h3 => [  8) How can we set null value in JDBC PreparedStatement? ]
p => [ By using setNull() method of PreparedStatement interface, we can set the null value to an index. The syntax of the method is given below. ]
h3 => [  9) What are the benefits of PreparedStatement over Statement? ]
p => [ The benefits of using PreparedStatement over Statement interface is given below. ]
li => [ The PreparedStatement performs faster as compare to Statement because the Statement needs to be compiled everytime we run the code whereas the PreparedStatement compiled once and then execute only on runtime. ]
li => [ PreparedStatement can execute Parameterized query whereas Statement can only run static queries. ]
li => [ The query used in PreparedStatement is appeared to be similar every time. Therefore, the database can reuse the previous access plan whereas, Statement inline the parameters into the String, therefore, the query doesn't appear to be same everytime which prevents cache reusage. ]
h3 => [  10) What are the differences between execute, executeQuery, and executeUpdate? ]
th => [ execute ]
th => [ executeQuery ]
th => [ executeUpdate ]
td => [ The execute method can be used for any SQL statements(Select and Update both). ]
td => [ The executeQuery method can be used only with the select statement. ]
td => [ The executeUpdate method can be used to update/delete/insert operations in the database. ]
td => [ The execute method returns a boolean type value where true indicates that the ResultSet s returned which can later be extracted and false indicates that the integer or void value is returned. ]
td => [ The executeQuery() method returns a ResultSet object which contains the data retrieved by the select statement. ]
td => [ The executeUpdate() method returns an integer value representing the number of records affected where 0 indicates that query returns nothing. ]
h3 => [ 11) What are the different types of ResultSet? ]
p => [ ResultSet is categorized by the direction of the reading head and sensitivity or insensitivity of the result provided by it. There are three general types of ResultSet. ]
td => [ Type ]
td => [ Description ]
td => [ ResultSet.TYPE_Forward_ONLY ]
td => [ The cursor can move in the forward direction only. ]
td => [ ResultSet.TYPE_SCROLL_INSENSITIVE ]
td => [ The cursor can move in both the direction (forward and backward). The ResultSet is not sensitive to the changes made by the others to the database. ]
td => [ ResultSet.TYPE_SCROLL_SENSITIVE ]
td => [ The cursor can move in both the direction. The ResultSet is sensitive to the changes made by the others to the database. ]
h3 => [  12) What are the differences between ResultSet and RowSet? ]
td => [ ResultSet ]
td => [ RowSet ]
td => [ ResultSet cannot be serialized as it maintains the connection with the database. ]
td => [ RowSet is disconnected from the database and can be serialized. ]
td => [ ResultSet object is not a JavaBean object ]
td => [ ResultSet Object is a JavaBean object. ]
td => [ ResultSet is returned by the executeQuery() method of Statement Interface. ]
td => [ Rowset Interface extends ResultSet Interface and returned by calling the RowSetProvider.newFactory().createJdbcRowSet() method. ]
td => [ ResultSet object is non-scrollable and non-updatable by default. ]
td => [ RowSet object is scrollable and updatable by default. ]
h3 => [  13) How can we execute stored procedures using CallableStatement? ]
p => [ Following are the steps to create and execute stored procedures. Here, we are creating a table user420 by using a stored procedure and inserting values into it. ]
strong => [ Create the procedure in the database. ]
p => [ To call the stored procedure, you need to create it in the database. Here, we are assuming that the stored procedure looks like this. ]
p => [ The table structure is given below: ]
strong => [ Establish a network connection. ]
strong => [ Create the Object of CallableStatement. ]
strong => [ Provide the values and execute the query by using the following syntax. ]
strong => [ Check the database; the values will be found there. However, the complete code will look like the following.  ]
h3 => [  14) What is the role of the JDBC DriverManager class? ]
p => [ The DriverManager class acts as an interface between user and drivers. It keeps track of the drivers that are available and handles establishing a connection between a database and the appropriate driver. The DriverManager class maintains a list of Driver classes that have registered themselves by calling the method DriverManager.registerDriver(). ]
a => [ More details. ]
h3 => [  15) What are the functions of the JDBC Connection interface? ]
p => [  The  Connection interface  maintains a session with the database. It can be used for transaction management. It provides factory methods that return the instance of Statement, PreparedStatement, CallableStatement, and DatabaseMetaData. ]
a => [ More details. ]
h3 => [  16) What does the JDBC ResultSet interface? ]
p => [ The ResultSet object represents a row of a table. It can be used to change the cursor pointer and get the information from the database. By default, ResultSet object can move in the forward direction only and is not updatable. However, we can make this object to move the forward and backward direction by passing either TYPE_SCROLL_INSENSITIVE or TYPE_SCROLL_SENSITIVE in createStatement(int, int) method. ]
a => [ More details. ]
h3 => [  17) What does the JDBC ResultSetMetaData interface? ]
p => [ The ResultSetMetaData interface returns the information of table such as the total number of columns, column name, column type, etc. ]
a => [ More details. ]
h3 => [  18) What does the JDBC DatabaseMetaData interface? ]
p => [ The DatabaseMetaData interface returns the information of the database such as username, driver name, driver version, number of tables, number of views, etc. Consider the following example. ]
strong => [ Output ]
a => [ More details. ]
h3 => [  19) Which interface is responsible for transaction management in JDBC? ]
p => [  The  Connection interface  provides methods for transaction management such as commit(), rollback() etc. ]
a => [ More details. ]
h3 => [  20) What is batch processing and how to perform batch processing in JDBC? ]
p => [ By using the batch processing technique in JDBC, we can execute multiple queries. It makes the performance fast. The java.sql.Statement and java.sql.PreparedStatement interfaces provide methods for batch processing. The batch processing in JDBC requires the following steps. ]
li => [ Load the driver class ]
li => [ Create Connection ]
li => [ Create Statement ]
li => [ Add query in the batch ]
li => [ Execute the Batch ]
li => [ Close Connection ]
p => [ Consider the following example to perform batch processing using the Statement interface. ]
a => [ More details. ]
h3 => [  21) What are CLOB and BLOB data types in JDBC? ]
p => [  BLOB:  Blob can be defined as the variable-length, binary large object which is used to hold the group of Binary data such as voice, images, and mixed media. It can hold up to 2GB data on MySQL database and 128 GB on Oracle database. BLOB is supported by many databases such as MySQL, Oracle, and DB2 to store the binary data (images, video, audio, and mixed media). ]
p => [  CLOB:  Clob can be defined as the variable-length, character-large object which is used to hold the character-based data such as files in many databases. It can hold up to 2 GB on MySQL database, and 128 GB on Oracle Database. A CLOB is considered as a character string. ]
h3 => [  22) What are the different types of lockings in JDBC? ]
p => [ A lock is a certain type of software mechanism by using which, we can restrict other users from using the data resource. There are four type of locks given in JDBC that are described below. ]
strong => [ Row and Key Locks: ]
strong => [ Page Locks: ]
strong => [ Table locks: ]
strong => [ Database locks: ]
h3 => [  23) How can we store and retrieve images from the database? ]
p => [ By using the PreparedStatement interface, we can store and retrieve images. Create a table which contains two columns namely NAME and PHOTO. ]
p => [ Consider the following example to store the image in the database. ]
p => [ Consider the following example to retrieve the image from the table. ]
a => [ More details. ]
h3 => [ 24) How can we store the file in the Oracle database? ]
p => [ The setCharacterStream() method of PreparedStatement interface is used to set character information into the parameterIndex. For storing the file into the database, CLOB (Character Large Object) datatype is used in the table. For example: ]
strong => [ Java Code ]
h3 => [ 25) How can we retrieve the file in the Oracle database? ]
p => [ The getClob() method of PreparedStatement is used to get file information from the database. Let's see the table structure of the example to retrieve the file. ]
p => [ The example to retrieve the file from the Oracle database is given below. ]
h3 => [ 26) What are the differences between stored procedure and functions? ]
p => [ The differences between stored procedures and functions are given below: ]
th => [ Stored Procedure ]
th => [ Function ]
td => [ Is used to perform business logic. ]
td => [ Is used to perform the calculation. ]
td => [ Must not have the return type. ]
td => [ Must have the return type. ]
td => [ May return 0 or more values. ]
td => [ May return only one value. ]
td => [ The procedure supports input and output parameters. ]
td => [ The function supports only input parameter. ]
td => [ Exception handling using try/catch block can be used in stored procedures. ]
td => [ Exception handling using try/catch can't be used in user-defined functions. ]
h3 => [ 27) How can we maintain the integrity of a database by using JDBC? ]
p => [ To maintain the integrity of a database, we need to ensure the ACID properties. ACID properties mean Atomicity, Consistency, Isolation, and durability. In JDBC, Connection interface provides methods like setAutoCommit(), commit(), and rollback() which can be used to manage transaction. Let's see an example of transaction management in JDBC. ]
h3 => [ 28) What is the JDBC Rowset? ]
p => [ JDBC Rowset is the wrapper of ResultSet. It holds tabular data like ResultSet, but it is easy and flexible to use. The implementation classes of RowSet interface are as follows: ]
li => [ JdbcRowSet ]
li => [ CachedRowSet ]
li => [ WebRowSet ]
li => [ JoinRowSet ]
li => [ FilteredRowSet ]
h3 => [ 29) What is the major difference between java.util.Date and java.sql.Date data type? ]
p => [ The major difference between java.util.Date and java.sql.Date is that, java.sql.Date represents date without time information whereas, java.util.Date represents both date and time information. ]
h3 => [ 30) What does JDBC setMaxRows method do? ]
p => [ The setMaxRows(int i) method limits the number of rows the database can return by using the query. This can also be done within the query as we can use the limit cause in MySQL. ]
a => [ 1 ]
a => [ 2 ]
a => [ 3 ]
a => [ 4 ]
a => [ 5 ]
a => [ 6 ]
a => [ 7 ]
a => [ 8 ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Java Multithreading Interview Questions ]
a => [ Java String &amp; Exception Interview Questions ]
a => [ Java Collection Interview Questions ]
a => [ JDBC Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
