
div => [ 
 ]
h1 => [ Django Interview Questions ]
p => [  A list of top frequently asked  Django interview questions  and answers are given below.  ]
h3 => [ 1) Explain Django. ]
p => [  Django is a free and open source web application framework, written in Python. It is a server-side web framework that provides rapid development of secure and maintainable websites. ]
h3 => [ 2) What does Django mean? ]
p => [ Django is named after Django Reinhardt, a gypsy jazz guitarist from the 1930s to early 1950s who is known as one of the best guitarists of all time. ]
h3 => [ 3) Which architectural pattern does Django follow? ]
p => [ Django follows Model-View-Template (MVT) architectural pattern. ]
p => [ See the following graph that shows the MVT based control flow. ]
p => [  Here, a user  requests  for a resource to the Django, Django works as a controller and check to the available resource in URL. ]
p => [  If URL maps,  a view is called  that interact with model and template, it renders a template. ]
p => [  Django responds back to the user and sends a template as a  response . ]
h3 => [ 4) Explain Django architecture. ]
p => [ Django follows MVT (Model View Template) pattern. It is slightly different from MVC.  ]
p => [  Model:   It is the data access layer. It contains everything about the data, i.e., how to access it, how to validate it, its behaviors and the relationships between the data.  ]
p => [  Let's see an example. We are creating a model  Employee  who has two fields  first_name  and  last_name . ]
p => [  View:   It is the business logic layer. This layer contains the logic that accesses the model and defers to the appropriate template. It is like a bridge between the model and the template.  ]
p => [  Template:   It is a presentation layer. This layer contains presentation-related decisions, i.e., how something should be displayed on a Web page or other type of document.  ]
p => [  To configure the template system, we have to provide some entries in  settings.py  file. ]
h3 => [ 5) Is Django a high-level web framework or low-level framework? ]
p => [ Django is a high-level Python's web framework which was designed for rapid development and clean, realistic design. ]
h3 => [ 6) How would you pronounce Django? ]
p => [ Django is pronounced JANG-oh. Here D is silent. ]
h3 => [ 7) How does Django work? ]
p => [ Django can be broken into many components: ]
p => [  Models.py file:  This file defines your data model by extending your single line of code into full database tables and add a pre-built administration section to manage content. ]
p => [  Urls.py file:  It uses a regular expression to capture URL patterns for processing. ]
p => [  Views.py file:  It is the main part of Django. The actual processing happens in view. ]
p => [ When a visitor lands on Django page, first Django checks the URLs pattern you have created and used the information to retrieve the view. After that view processes the request, querying your database if necessary, and passes the requested information to a template. ]
p => [ After that, the template renders the data in a layout you have created and displayed the page. ]
h3 => [ 8) Which foundation manages the Django web framework? ]
p => [ Django web framework is managed and maintained by an independent and non-profit organization named Django Software Foundation (DSF). The primary foundation goal is to promote, support, and advance the Django Web framework. ]
h3 => [ 9) Is Django stable? ]
p => [ Yes, Django is quite stable. Many companies like Disqus, Instagram, Pinterest, and Mozilla have been using Django for many years. ]
h3 => [ 10) What are the features available in Django web framework? ]
p => [ Features available in Django web framework are: ]
li => [ Admin Interface (CRUD) ]
li => [ Templating ]
li => [ Form handling ]
li => [ Internationalization ]
li => [ A Session, user management, role-based permissions ]
li => [ Object-relational mapping (ORM) ]
li => [ Testing Framework ]
li => [ Fantastic Documentation ]
h3 => [ 11) Explain the advantages of Django? ]
p => [ Advantages of Django: ]
li => [ Django is a Python's framework which is easy to learn. ]
li => [ It is clear and readable. ]
li => [ It is versatile. ]
li => [ It is fast to write. ]
li => [ No loopholes in design. ]
li => [ It is secure. ]
li => [ It is scalable. ]
li => [ It is versatile. ]
h3 => [ 12) What are the disadvantages of Django? ]
p => [ Following is the list of disadvantages of Django: ]
li => [ Django' modules are bulky.  ]
li => [ It is completely based on Django ORM. ]
li => [ Components are deployed together. ]
li => [ You must know the full system to work with it. ]
h3 => [ 13) What are the inheritance styles in Django? ]
p => [ There are three possible inheritance styles in Django: ]
p => [  1) Abstract base classes:  This style is used when you only want parent's class to hold information that you don't want to type out for each child model. ]
p => [  2) Multi-table Inheritance:  This style is used if you are sub-classing an existing model and need each model to have its database table. ]
p => [  3) Proxy models:  This style is used, if you only want to modify the Python level behavior of the model, without changing the model's fields. ]
h3 => [ 14) Is Django a content management system (CMS)? ]
p => [  No, Django is not a CMS. Instead, it is a Web framework and a programming tool that makes you able to build websites. ]
h3 => [ 15) How can you set up static files in Django? ]
p => [ There are three main things required to set up static files in Django: ]
p => [ 1) Set STATIC_ROOT in settings.py ]
p => [ 2) run manage.py collect static ]
p => [ 3) set up a Static Files entry on the PythonAnywhere web tab ]
h3 => [ 16) What is some typical usage of middlewares in Django? ]
p => [ Some usage of middlewares in Django is: ]
li => [ Session management, ]
li => [ Use authentication ]
li => [ Cross-site request forgery protection ]
li => [ Content Gzipping ]
h3 => [ 17) What does of Django field class types do? ]
p => [  The Django field class types specify: ]
li => [ The database column type. ]
li => [ The default HTML widget to avail while rendering a form field. ]
li => [ The minimal validation requirements used in Django admin. ]
li => [ Automatic generated forms. ]
h3 => [ 18) What is the usage of Django-admin.py and manage.py? ]
p => [  Django-admin.py:  It is a Django's command line utility for administrative tasks. ]
p => [  Manage.py:  It is an automatically created file in each Django project. It is a thin wrapper around the Django-admin.py. It has the following usage: ]
li => [ It puts your project's package on sys.path. ]
li => [ It sets the DJANGO_SETTING_MODULE environment variable to points to your project's setting.py file. ]
h3 => [ 19) What are the signals in Django? ]
p => [ Signals are pieces of code which contain information about what is happening. A dispatcher is used to sending the signals and listen for those signals. ]
h3 => [ 20) What are the two important parameters in signals? ]
p => [ Two important parameters in signals are: ]
strong => [ Receiver: ]
strong => [ Sender: ]
h3 => [ 21) How to handle URLs in Django? ]
p => [  To handle URL,  django.urls  module is used by the Django framework. ]
p => [  Let's open the file  urls.py  of the project and see the what it looks like: ]
strong => [ // urls.py ]
p => [ See, Django already has mentioned a URL here for the admin. The path function takes the first argument as a route of string or regex type. ]
p => [ The view argument is a view function which is used to return a response (template) to the user. ]
p => [  The  django.urls  module contains various functions,  path(route,view,kwargs,name)  is one of those which is used to map the URL and call the specified view. ]
h3 => [ 22) What is Django Exception? ]
p => [  An exception is an abnormal event that leads to program failure. To deal with this situation, Django uses its exception classes and supports all core Python exceptions as well. Django core exceptions classes are defined in django.core.exceptions module. ]
h3 => [ 23) What are the different types of Django Exception Classes? ]
p => [ The django.core.exceptions module contains the following classes ]
th => [ Exception ]
th => [ Description ]
td => [ AppRegistryNotReady ]
td => [ It is raised when attempting to use models before the app loading process. ]
td => [ ObjectDoesNotExist ]
td => [ The base class for DoesNotExist exceptions. ]
td => [ EmptyResultSet ]
td => [ If a query does not return any result, this exception is raised. ]
td => [ FieldDoesNotExist ]
td => [ It raises when the requested field does not exist. ]
td => [ MultipleObjectsReturned ]
td => [ This exception is raised by a query if only one object is expected, but multiple objects are returned. ]
td => [ SuspiciousOperation ]
td => [ This exception is raised when a user has performed an operation that should be considered suspicious from a security perspective. ]
td => [ PermissionDenied ]
td => [ It is raised when a user does not have permission to perform the action requested. ]
td => [ ViewDoesNotExist ]
td => [ It is raised by django.urls when a requested view does not exist. ]
td => [ MiddlewareNotUsed ]
td => [ It is raised when a middleware is not used in the server configuration. ]
td => [ ImproperlyConfigured ]
td => [ The ImproperlyConfigured exception is raised when Django is somehow improperly configured. ]
td => [ FieldError ]
td => [ It is raised when there is a problem with a model field. ]
td => [ ValidationError ]
td => [ It is raised when data validation fails to form or model field validation. ]
h3 => [ 24) What is Django Session? ]
p => [ A session is a mechanism to store information on the server side during the interaction with the web application. By default, session stores in the database and also allows file-based and cache based sessions. ]
h3 => [ 25) What is the role of Cookie in Django? ]
p => [ A cookie is a small piece of information which is stored in the client browser. It is used to store user's data in a file permanently (or for the specified time). Cookie has its expiry date and time and removes automatically when gets expire. Django provides built-in methods to set and fetch cookie. ]
p => [ The set_cookie() method is used to set a cookie and get() method is used to get the cookie. ]
p => [ The request.COOKIES['key'] array can also be used to get cookie values. ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Java Multithreading Questions ]
a => [ Java String &amp; Exception Questions ]
a => [ Java Collection Interview Questions ]
a => [ JDBC Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
