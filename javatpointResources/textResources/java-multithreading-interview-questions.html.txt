
div => [ 
 ]
h1 => [ Java Multithreading and Concurrency Interview Questions ]
p => [ Multithreading and Synchronization are considered as the typical chapter in java programming. In game development companies, multithreading related interview questions are asked mostly. A list of frequently asked java multithreading and concurrency interview questions is given below. ]
h2 => [ Multithreading Interview Questions ]
h3 => [ 1) What is multithreading? ]
p => [ 
Multithreading is a process of executing multiple threads simultaneously. Multithreading is used to obtain the multitasking. It consumes less memory and gives the fast and efficient performance. Its main advantages are:
 ]
li => [ Threads share the same address space. ]
li => [ The thread is lightweight. ]
li => [ The cost of communication between the processes is low. ]
a => [ More details. ]
h3 => [ 2) What is the thread? ]
p => [ A thread is a lightweight subprocess. It is a separate path of execution because each thread runs in a different stack frame. A process may contain multiple threads. Threads share the process resources, but still, they execute independently.  ]
a => [ More details. ]
h3 => [ 3) Differentiate between process and thread?  ]
p => [ There are the following differences between the process and thread. ]
li => [ A Program in the execution is called the process whereas; A thread is a subset of the process ]
li => [ Processes are independent whereas threads are the subset of process. ]
li => [ Process have different address space in memory, while threads contain a shared address space. ]
li => [ Context switching is faster between the threads as compared to processes. ]
li => [ Inter-process communication is slower and expensive than inter-thread communication. ]
li => [ Any change in Parent process doesn't affect the child process whereas changes in parent thread can affect the child thread. ]
h3 => [ 4) What do you understand by inter-thread communication? ]
li => [ The process of communication between synchronized threads is termed as inter-thread communication. ]
li => [ Inter-thread communication is used to avoid thread polling in Java. ]
li => [ The thread is paused running in its critical section, and another thread is allowed to enter (or lock) in the same critical section to be executed. ]
li => [ It can be obtained by wait(), notify(), and notifyAll() methods. ]
h3 => [ 5) What is the purpose of wait() method in Java? ]
p => [ The wait() method is provided by the Object class in Java. This method is used for inter-thread communication in Java.
The java.lang.Object.wait() is used to pause the current thread, and wait until another thread does not call the notify() or notifyAll() method. Its syntax is given below. ]
p => [ public final void wait() ]
h3 => [ 6) Why must wait() method be called from the synchronized block? ]
p => [  We must call the wait method otherwise it will throw  java.lang.IllegalMonitorStateException  exception. Moreover, we need wait() method for inter-thread communication with notify() and notifyAll(). Therefore It must be present in the synchronized block for the proper and correct communication.
 ]
h3 => [ 7) What are the advantages of multithreading? ]
p => [ Multithreading programming has the following advantages: ]
li => [ Multithreading allows an application/program to be always reactive for input, even already running with some background tasks ]
li => [ Multithreading allows the faster execution of tasks, as threads execute independently. ]
li => [ Multithreading provides better utilization of cache memory as threads share the common memory resources. ]
li => [ Multithreading reduces the number of the required server as one server can execute multiple threads at a time. ]
h3 => [ 8) What are the states in the lifecycle of a Thread? ]
p => [ A thread can have one of the following states during its lifetime: ]
strong => [ New: ]
strong => [ Runnable: ]
strong => [ Running: ]
strong => [ Waiting/Blocked: ]
strong => [ Dead/Terminated: ]
h3 => [ 9) What is the difference between preemptive scheduling and time slicing?  ]
p => [ Under preemptive scheduling, the highest priority task executes until it enters the waiting or dead states or a higher priority task comes into existence. Under time slicing, a task executes for a predefined slice of time and then reenters the pool of ready tasks. The scheduler then determines which task should execute next, based on priority and other factors. ]
h3 => [ 10) What is context switching? ]
p => [ In Context switching the state of the process (or thread) is stored so that it can be restored and execution can be resumed from the same point later. Context switching enables the multiple processes to share the same CPU. ]
h3 => [ 11) Differentiate between the Thread class and Runnable interface for creating a Thread? ]
p => [ The Thread can be created by using two ways. ]
li => [ By extending the Thread class ]
li => [ By implementing the Runnable interface ]
p => [ However, the primary differences between both the ways are given below: ]
li => [ By extending the Thread class, we cannot extend any other class, as Java does not allow multiple inheritances while implementing the Runnable interface; we can also extend other base class(if required). ]
li => [ By extending the Thread class, each of thread creates the unique object and associates with it while implementing the Runnable interface; multiple threads share the same object ]
li => [ Thread class provides various inbuilt methods such as getPriority(), isAlive and many more while the Runnable interface provides a single method, i.e., run(). ]
h3 => [ 12) What does join() method? ]
p => [ The join() method waits for a thread to die. In other words, it causes the currently running threads to stop executing until the thread it joins with completes its task. Join method is overloaded in Thread class in the following ways.  ]
li => [ public void join()throws InterruptedException ]
li => [ public void join(long milliseconds)throws InterruptedException ]
a => [ More details. ]
h3 => [ 13) Describe the purpose and working of sleep() method. ]
p => [ The sleep() method in java is used to block a thread for a particular time, which means it pause the execution of a thread for a specific time. There are two methods of doing so. ]
strong => [ Syntax: ]
li => [ public static void sleep(long milliseconds)throws InterruptedException ]
li => [ public static void sleep(long milliseconds, int nanos)throws InterruptedException ]
strong => [ Working of sleep() method ]
p => [ When we call the sleep() method, it pauses the execution of the current thread for the given time and gives priority to another thread(if available). Moreover, when the waiting time completed then again previous thread changes its state from waiting to runnable and comes in running state, and the whole process works so on till the execution doesn't complete.  ]
h3 => [ 14) What is the difference between wait() and sleep() method? ]
th => [ wait() ]
th => [ sleep() ]
td => [ 1) The wait() method is defined in Object class. ]
td => [ The sleep() method is defined in Thread class. ]
td => [ 2) The wait() method releases the lock. ]
td => [ The sleep() method doesn't release the lock. ]
h3 => [ 15) Is it possible to start a thread twice? ]
p => [ No, we cannot restart the thread, as once a thread started and executed, it goes to the Dead state. Therefore, if we try to start a thread twice, it will give a runtimeException "java.lang.IllegalThreadStateException". Consider the following example. ]
strong => [ Output ]
a => [ More details. ]
h3 => [ 16) Can we call the run() method instead of start()? ]
p => [ Yes, calling run() method directly is valid, but it will not work as a thread instead it will work as a normal object. There will not be context-switching between the threads. When we call the start() method, it internally calls the run() method, which creates a new stack for a thread while directly calling the run() will not create a new stack.  ]
a => [ More details. ]
h3 => [ 17) What about the daemon threads? ]
p => [ The daemon threads are the low priority threads that provide the background support and services to the user threads. Daemon thread gets automatically terminated by the JVM if the program remains with the daemon thread only, and all other user threads are ended/died. There are two methods for daemon thread available in the Thread class: ]
strong => [ public void setDaemon(boolean status): ]
strong => [ public boolean isDaemon(): ]
a => [ More details. ]
h3 => [ 18)Can we make the user thread as daemon thread if the thread is started? ]
p => [ No, if you do so, it will throw IllegalThreadStateException. Therefore, we can only create a daemon thread before starting the thread. ]
strong => [ Output ]
a => [ More details. ]
h3 => [ 19)What is shutdown hook? ]
p => [ The shutdown hook is a thread that is invoked implicitly before JVM shuts down. So we can use it to perform clean up the resource or save the state when JVM shuts down normally or abruptly. We can add shutdown hook by using the following method: ]
p => [ Some important points about shutdown hooks are :  ]
li => [ Shutdown hooks initialized but can only be started when JVM shutdown occurred. ]
li => [ Shutdown hooks are more reliable than the finalizer() because there are very fewer chances that shutdown hooks not run. ]
li => [ The shutdown hook can be stopped by calling the halt(int) method of Runtime class. ]
a => [ More details. ]
h3 => [ 20)When should we interrupt a thread? ]
p => [ We should interrupt a thread when we want to break out the sleep or wait state of a thread. We can interrupt a thread by calling the interrupt()ï¿½throwing the InterruptedException. ]
a => [ More details. ]
h3 => [ 21) What is the synchronization? ]
p => [ Synchronization is the capability to control the access of multiple threads to any shared resource. It is used:
 ]
li => [ To prevent thread interference. ]
li => [ To prevent consistency problem. ]
p => [ When the multiple threads try to do the same task, there is a possibility of an erroneousï¿½result, hence to remove this issue, Java uses the process of synchronization which allows only one thread to be executed at a time.
Synchronization can be achieved in three ways:  ]
li => [ by the synchronized method ]
li => [ by synchronized block ]
li => [ by static synchronization ]
p => [ Syntax for synchronized block ]
a => [ More details. ]
h3 => [ 22) What is the purpose of the Synchronized block? ]
p => [ The Synchronized block can be used to perform synchronization on any specific resource of the method. Only one thread at a time can execute on a particular resource, and all other threads which attempt to enter the synchronized block are blocked. ]
li => [ Synchronized block is used to lock an object for any shared resource. ]
li => [ The scope of the synchronized block is limited to the block on which, it is applied. Its scope is smaller than a method.  ]
a => [ More details. ]
h3 => [ 23)Can Java object be locked down for exclusive use by a given thread?  ]
p => [ Yes. You can lock an object by putting it in a "synchronized" block. The locked object is inaccessible to any thread other than the one that explicitly claimed it. ]
h3 => [ 24) What is static synchronization? ]
p => [  
If you make any static method as synchronized, the lock will be on the class not on the object. If we use the synchronized keyword before a method so it will lock the object (one thread can access an object at a time) but if we use static synchronized so it will lock a class (one thread can access a class at a time).
 More details. 
 ]
h3 => [ 25)What is the difference between notify() and notifyAll()?  ]
p => [ The notify() is used to unblock one waiting thread whereas notifyAll() method is used to unblock all the threads in waiting state.
 ]
h3 => [ 26)What is the deadlock? ]
p => [ Deadlock is a situation in which every thread is waiting for a resource which is held by some other waiting thread. In this situation, Neither of the thread executes nor it gets the chance to be executed. Instead, there exists a universal waiting state among all the threads. Deadlock is a very complicated situation which can break our code at runtime. ]
a => [ More details. ]
h3 => [ 27) How to detect a deadlock condition? How can it be avoided? ]
p => [ We can detect the deadlock condition by running the code on cmd and collecting the Thread Dump, and if any deadlock is present in the code, then a message will appear on cmd. ]
strong => [ Ways to avoid the deadlock condition in Java: ]
strong => [ Avoid Nested lock: ]
strong => [ Avoid unnecessary locks: ]
strong => [ Using thread join: ]
h3 => [ 28) What is Thread Scheduler in java? ]
p => [ In Java, when we create the threads, they are supervised with the help of a Thread Scheduler, which is the part of JVM. Thread scheduler is only responsible for deciding which thread should be executed.
Thread scheduler uses two mechanisms for scheduling the threads: Preemptive and Time Slicing. ]
li => [ It selects the priority of the thread. ]
li => [ It determines the waiting time for a thread ]
li => [ It checks the Nature of thread ]
h3 => [ 29) Does each thread have its stack in multithreaded programming? ]
p => [ Yes, in multithreaded programming every thread maintains its own or separate stack area in memory due to which every thread is independent of each other. ]
h3 => [ 30) How is the safety of a thread achieved? ]
p => [ If a method or class object can be used by multiple threads at a time without any race condition, then the class is thread-safe.
Thread safety is used to make a program safe to use in multithreaded programming. It can be achieved by the following ways: ]
li => [ Synchronization ]
li => [ Using Volatile keyword ]
li => [ Using a lock based mechanism ]
li => [ Use of atomic wrapper classes ]
h3 => [ 31) What is race-condition? ]
p => [ A Race condition is a problem which occurs in the multithreaded programming when various threads execute simultaneously accessing a shared resource at the same time. The proper use of synchronization can avoid the Race condition. ]
h3 => [ 32) What is the volatile keyword in java? ]
p => [ Volatile keyword is used in multithreaded programming to achieve the thread safety, as a change in one volatile variable is visible to all other threads so one variable can be used by one thread at a time. ]
h3 => [ 33) What do you understand by thread pool? ]
li => [ Java Thread pool represents a group of worker threads, which are waiting for the task to be allocated. ]
li => [ Threads in the thread pool are supervised by the service provider which pulls one thread from the pool and assign a job to it. ]
li => [ After completion of the given task, thread again came to the thread pool. ]
li => [ The size of the thread pool depends on the total number of threads kept at reserve for execution. ]
p => [ The advantages of the thread pool are : ]
li => [ Using a thread pool, performance can be enhanced. ]
li => [ Using a thread pool, better system stability can occur. ]
h2 => [ Concurrency Interview Questions ]
h3 => [ 34) What are the main components of concurrency API? ]
p => [ Concurrency API can be developed using the class and interfaces of java.util.Concurrent package. There are the following classes and interfaces in java.util.Concurrent package. ]
li => [ Executor ]
li => [ FarkJoinPool ]
li => [ ExecutorService ]
li => [ ScheduledExecutorService ]
li => [ Future ]
li => [ TimeUnit(Enum) ]
li => [ CountDownLatch ]
li => [ CyclicBarrier ]
li => [ Semaphore ]
li => [ ThreadFactory ]
li => [ BlockingQueue ]
li => [ DelayQueue ]
li => [ Locks ]
li => [ Phaser ]
h3 => [ 35) What is the Executor interface in Concurrency API in Java? ]
p => [ The Executor Interface provided by the package java.util.concurrent is the simple interface used to execute the new task. The execute() method of Executor interface is used to execute some given command. The syntax of the execute() method is given below. ]
strong => [ void execute(Runnable command) ]
p => [ Consider the following example: ]
strong => [ Output ]
h3 => [ 36) What is BlockingQueue? ]
p => [ The java.util.concurrent.BlockingQueue is the subinterface of Queue that supports the operations such as waiting for the space availability before inserting a new value or waiting for the queue to become non-empty before retrieving an element from it. Consider the following example. ]
strong => [ Output ]
h3 => [ 37) How to implement producer-consumer problem by using BlockingQueue? ]
p => [ The producer-consumer problem can be solved by using BlockingQueue in the following way. ]
strong => [ Output ]
h3 => [ 38) What is the difference between Java Callable interface and Runnable interface? ]
p => [ The Callable interface and Runnable interface both are used by the classes which wanted to execute with multiple threads. However, there are two main differences between the both :  ]
li => [ A Callable &lt;V&gt; interface can return a result, whereas the Runnable interface cannot return any result. ]
li => [ A Callable &lt;V&gt; interface can throw a checked exception, whereas the Runnable interface cannot throw checked exception.  ]
li => [ A Callable &lt;V&gt; interface cannot be used before the Java 5 whereas the Runnable interface can be used. ]
h3 => [ 39) What is the Atomic action in Concurrency in Java? ]
li => [ The Atomic action is the operation which can be performed in a single unit of a task without any interference of the other operations. ]
li => [ The Atomic action cannot be stopped in between the task. Once started it fill stop after the completion of the task only.  ]
li => [ An increment operation such as a++ does not allow an atomic action. ]
li => [ All reads and writes operation for the primitive variable (except long and double) are the atomic operation. ]
li => [ All reads and writes operation for the volatile variable (including long and double) are the atomic operation. ]
li => [ The Atomic methods are available in java.util.Concurrent package.  ]
h3 => [ 40) What is lock interface in Concurrency API in Java? ]
p => [ The java.util.concurrent.locks.Lock interface is used as the synchronization mechanism. It works similar to the synchronized block. There are a few differences between the lock and synchronized block that are given below. ]
li => [ Lock interface provides the guarantee of sequence in which the waiting thread will be given the access, whereas the synchronized block doesn't guarantee it. ]
li => [ Lock interface provides the option of timeout if the lock is not granted whereas the synchronized block doesn't provide that. ]
li => [ The methods of Lock interface, i.e., Lock() and Unlock() can be called in different methods whereas single synchronized block must be fully contained in a single method. ]
h3 => [ 41) Explain the ExecutorService Interface. ]
p => [ The ExecutorService Interface is the subinterface of Executor interface and adds the features to manage the lifecycle. Consider the following example. ]
strong => [ Output ]
h3 => [ 42) What is the difference between Synchronous programming and Asynchronous programming regarding a thread? ]
p => [  Synchronous programming:  In Synchronous programming model, a thread is assigned to complete a task and hence thread started working on it, and it is only available for other tasks once it will end the assigned task. ]
p => [  Asynchronous Programming:   In Asynchronous programming, one job can be completed by multiple threads and hence it provides maximum usability of the various threads. ]
h3 => [ 43) What do you understand by Callable and Future in Java? ]
p => [  Java Callable interface:  In Java5 callable interface was provided by the package java.util.concurrent. It is similar to the Runnable interface but it can return a result, and it can throw an Exception. It also provides a run() method for execution of a thread. Java Callable can return any object as it uses Generic. ]
strong => [ Syntax: ]
p => [ public interface Callable&lt;V&gt; ]
p => [  Java Future interface:  Java Future interface gives the result of a concurrent process. The Callable interface returns the object of java.util.concurrent.Future. ]
p => [ Java Future provides following methods for implementation. ]
strong => [ cancel(booleanï¿½mayInterruptIfRunning): ]
strong => [ get(): ]
strong => [ isCancelled(): ]
strong => [ isDone(): ]
h3 => [ 44. What is the difference between ScheduledExecutorService and ExecutorService interface? ]
p => [ ExecutorServcie and ScheduledExecutorService both are the interfaces of java.util.Concurrent package but scheduledExecutorService provides some additional methods to execute the Runnable and Callable tasks with the delay or every fixed time period. ]
h3 => [ 45) Define FutureTask class in Java?  ]
p => [ Java FutureTask class provides a base implementation of the Future interface. The result can only be obtained if the execution of one task is completed, and if the computation is not achieved then get method will be blocked. If the execution is completed, then it cannot be re-started and can't be canceled. ]
strong => [ Syntax ]
p => [ public class FutureTask&lt;V&gt; extends Object implements RunnableFuture&lt;V&gt; ]
span => [ Next Topic ]
a => [ Java Collections interview Questions ]
a => [ â prev ]
a => [ next â ]
a => [ 1 ]
a => [ 2 ]
a => [ 3 ]
a => [ 4 ]
a => [ 5 ]
a => [ 6 ]
a => [ 7 ]
a => [ 8 ]
a => [ Java Basics Interview Questions ]
a => [ Java OOPs Interview Questions ]
a => [ Java Multithreading Interview Questions ]
a => [ Java String &amp; Exception Interview Questions ]
a => [ Java Collection Interview Questions ]
a => [ JDBC Interview Questions ]
a => [ Servlet Interview Questions ]
a => [ JSP Interview Questions ]
span => [ Spring Interview Questions ]
span => [ Hibernate Interview Questions ]
span => [ PL/SQL Interview Questions ]
span => [ SQL Interview Questions ]
span => [ Oracle Interview Questions ]
span => [ Android Interview Questions ]
span => [ SQL Server Interview Questions ]
span => [ MySQL Interview Questions ]
h2 => [ You may also like: ]
a => [ Java Interview Questions ]
a => [ SQL Interview Questions ]
a => [ Python Interview Questions ]
a => [ JavaScript Interview Questions ]
a => [ Angular Interview Questions ]
a => [ Selenium Interview Questions ]
a => [ Spring Boot Interview Questions ]
a => [ HR Interview Questions ]
a => [ C Programming Interview Questions ]
a => [ C++ Interview Questions ]
a => [ Data Structure Interview Questions ]
a => [ DBMS Interview Questions ]
a => [ HTML Interview Questions ]
a => [ IAS Interview Questions ]
a => [ Manual Testing Interview Questions ]
a => [ OOPs Interview Questions ]
a => [ .Net Interview Questions ]
a => [ C# Interview Questions ]
a => [ ReactJS Interview Questions ]
a => [ Networking Interview Questions ]
a => [ PHP Interview Questions ]
a => [ CSS Interview Questions ]
a => [ Node.js Interview Questions ]
a => [ Spring Interview Questions ]
a => [ Hibernate Interview Questions ]
a => [ AWS Interview Questions ]
a => [ Accounting Interview Questions ]
h2 => [ Learn Latest Tutorials ]
p => [ Splunk ]
p => [ SPSS ]
p => [ Swagger ]
p => [ Transact-SQL ]
p => [ Tumblr ]
p => [ ReactJS ]
p => [ Regex ]
p => [ Reinforcement Learning ]
p => [ R Programming ]
p => [ RxJS ]
p => [ React Native ]
p => [ Python Design Patterns ]
p => [ Python Pillow ]
p => [ Python Turtle ]
p => [ Keras ]
h2 => [ Preparation ]
p => [ Aptitude ]
p => [ Reasoning ]
p => [ Verbal Ability ]
p => [ Interview Questions ]
p => [ Company Questions ]
h2 => [ Trending Technologies ]
p => [ Artificial Intelligence ]
p => [ AWS ]
p => [ Selenium ]
p => [ Cloud Computing ]
p => [ Hadoop ]
p => [ ReactJS ]
p => [ Data Science ]
p => [ Angular 7 ]
p => [ Blockchain ]
p => [ Git ]
p => [ Machine Learning ]
p => [ DevOps ]
h2 => [ B.Tech / MCA ]
p => [ DBMS ]
p => [ Data Structures ]
p => [ DAA ]
p => [ Operating System ]
p => [ Computer Network ]
p => [ Compiler Design ]
p => [ Computer Organization ]
p => [ Discrete Mathematics ]
p => [ Ethical Hacking ]
p => [ Computer Graphics ]
p => [ Software Engineering ]
p => [ Web Technology ]
p => [ Cyber Security ]
p => [ Automata ]
p => [ C Programming ]
p => [ C++ ]
p => [ Java ]
p => [ .Net ]
p => [ Python ]
p => [ Programs ]
p => [ Control System ]
p => [ Data Mining ]
p => [ Data Warehouse ]
